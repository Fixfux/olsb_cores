/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
module line_types;

import thrift.base;
import thrift.codegen.base;
import thrift.util.hashset;

enum ApplicationType {
  IOS = 16,  IOS_RC = 17,  IOS_BETA = 18,  IOS_ALPHA = 19,  ANDROID = 32,  ANDROID_RC = 33,  ANDROID_BETA = 34,  ANDROID_ALPHA = 35,  WAP = 48,  WAP_RC = 49,  WAP_BETA = 50,  WAP_ALPHA = 51,  BOT = 64,  BOT_RC = 65,  BOT_BETA = 66,  BOT_ALPHA = 67,  WEB = 80,  WEB_RC = 81,  WEB_BETA = 82,  WEB_ALPHA = 83,  DESKTOPWIN = 96,  DESKTOPWIN_RC = 97,  DESKTOPWIN_BETA = 98,  DESKTOPWIN_ALPHA = 99,  DESKTOPMAC = 112,  DESKTOPMAC_RC = 113,  DESKTOPMAC_BETA = 114,  DESKTOPMAC_ALPHA = 115,  CHANNELGW = 128,  CHANNELGW_RC = 129,  CHANNELGW_BETA = 130,  CHANNELGW_ALPHA = 131,  CHANNELCP = 144,  CHANNELCP_RC = 145,  CHANNELCP_BETA = 146,  CHANNELCP_ALPHA = 147,  WINPHONE = 160,  WINPHONE_RC = 161,  WINPHONE_BETA = 162,  WINPHONE_ALPHA = 163,  BLACKBERRY = 176,  BLACKBERRY_RC = 177,  BLACKBERRY_BETA = 178,  BLACKBERRY_ALPHA = 179,  WINMETRO = 192,  WINMETRO_RC = 193,  WINMETRO_BETA = 194,  WINMETRO_ALPHA = 195,  S40 = 208,  S40_RC = 209,  S40_BETA = 210,  S40_ALPHA = 211,  CHRONO = 224,  CHRONO_RC = 225,  CHRONO_BETA = 226,  CHRONO_ALPHA = 227,  TIZEN = 256,  TIZEN_RC = 257,  TIZEN_BETA = 258,  TIZEN_ALPHA = 259,  VIRTUAL = 272,
}

enum BuddyBannerLinkType {
  BUDDY_BANNER_LINK_HIDDEN = 0,  BUDDY_BANNER_LINK_MID = 1,  BUDDY_BANNER_LINK_URL = 2,
}

enum BuddyOnAirType {
  NORMAL = 0,  LIVE = 1,  VOIP = 2,
}

enum BuddyResultState {
  ACCEPTED = 1,  SUCCEEDED = 2,  FAILED = 3,  CANCELLED = 4,  NOTIFY_FAILED = 5,  STORING = 11,  UPLOADING = 21,  NOTIFYING = 31,
}

enum BuddySearchRequestSource {
  NA = 0,  FRIEND_VIEW = 1,  OFFICIAL_ACCOUNT_VIEW = 2,
}

enum CarrierCode {
  NOT_SPECIFIED = 0,  JP_DOCOMO = 1,  JP_AU = 2,  JP_SOFTBANK = 3,  KR_SKT = 17,  KR_KT = 18,  KR_LGT = 19,
}

enum ChannelConfiguration {
  MESSAGE = 0,  MESSAGE_NOTIFICATION = 1,  NOTIFICATION_CENTER = 2,
}

enum ChannelErrorCode {
  ILLEGAL_ARGUMENT = 0,  INTERNAL_ERROR = 1,  CONNECTION_ERROR = 2,  AUTHENTICATIONI_FAILED = 3,  NEED_PERMISSION_APPROVAL = 4,  COIN_NOT_USABLE = 5,
}

enum ChannelSyncType {
  SYNC = 0,  REMOVE = 1,
}

enum ContactAttribute {
  CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1,  CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2,  CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16,  CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32,
}

enum ContactCategory {
  NORMAL = 0,  RECOMMEND = 1,
}

enum ContactRelation {
  ONEWAY = 0,  BOTH = 1,  NOT_REGISTERED = 2,
}

enum ContactSetting {
  CONTACT_SETTING_NOTIFICATION_DISABLE = 1,  CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2,  CONTACT_SETTING_CONTACT_HIDE = 4,  CONTACT_SETTING_FAVORITE = 8,  CONTACT_SETTING_DELETE = 16,
}

enum ContactStatus {
  UNSPECIFIED = 0,  FRIEND = 1,  FRIEND_BLOCKED = 2,  RECOMMEND = 3,  RECOMMEND_BLOCKED = 4,  DELETED = 5,  DELETED_BLOCKED = 6,
}

enum ContactType {
  MID = 0,  PHONE = 1,  EMAIL = 2,  USERID = 3,  PROXIMITY = 4,  GROUP = 5,  USER = 6,  QRCODE = 7,  PROMOTION_BOT = 8,  REPAIR = 128,  FACEBOOK = 2305,  SINA = 2306,  RENREN = 2307,  FEIXIN = 2308,
}

enum ContentType {
  NONE = 0,  IMAGE = 1,  VIDEO = 2,  AUDIO = 3,  HTML = 4,  PDF = 5,  CALL = 6,  STICKER = 7,  PRESENCE = 8,  GIFT = 9,  GROUPBOARD = 10,  APPLINK = 11,  LINK = 12,  CONTACT = 13,  FILE = 14,  LOCATION = 15,  POSTNOTIFICATION = 16,  RICH = 17,  CHATEVENT = 18,
}

enum CustomMode {
  PROMOTION_FRIENDS_INVITE = 1,  CAPABILITY_SERVER_SIDE_SMS = 2,  LINE_CLIENT_ANALYTICS_CONFIGURATION = 3,
}

enum EmailConfirmationStatus {
  NOT_SPECIFIED = 0,  NOT_YET = 1,  DONE = 3,
}

enum EmailConfirmationType {
  SERVER_SIDE_EMAIL = 0,  CLIENT_SIDE_EMAIL = 1,
}

enum ErrorCode {
  ILLEGAL_ARGUMENT = 0,  AUTHENTICATION_FAILED = 1,  DB_FAILED = 2,  INVALID_STATE = 3,  EXCESSIVE_ACCESS = 4,  NOT_FOUND = 5,  INVALID_LENGTH = 6,  NOT_AVAILABLE_USER = 7,  NOT_AUTHORIZED_DEVICE = 8,  INVALID_MID = 9,  NOT_A_MEMBER = 10,  INCOMPATIBLE_APP_VERSION = 11,  NOT_READY = 12,  NOT_AVAILABLE_SESSION = 13,  NOT_AUTHORIZED_SESSION = 14,  SYSTEM_ERROR = 15,  NO_AVAILABLE_VERIFICATION_METHOD = 16,  NOT_AUTHENTICATED = 17,  INVALID_IDENTITY_CREDENTIAL = 18,  NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19,  INTERNAL_ERROR = 20,  NO_SUCH_IDENTITY_IDENFIER = 21,  DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22,  ILLEGAL_IDENTITY_CREDENTIAL = 23,  UNKNOWN_CHANNEL = 24,  NO_SUCH_MESSAGE_BOX = 25,  NOT_AVAILABLE_MESSAGE_BOX = 26,  CHANNEL_DOES_NOT_MATCH = 27,  NOT_YOUR_MESSAGE = 28,  MESSAGE_DEFINED_ERROR = 29,  USER_CANNOT_ACCEPT_PRESENTS = 30,  USER_NOT_STICKER_OWNER = 32,  MAINTENANCE_ERROR = 33,  ACCOUNT_NOT_MATCHED = 34,  ABUSE_BLOCK = 35,  NOT_FRIEND = 36,  NOT_ALLOWED_CALL = 37,  BLOCK_FRIEND = 38,  INCOMPATIBLE_VOIP_VERSION = 39,  INVALID_SNS_ACCESS_TOKEN = 40,  EXTERNAL_SERVICE_NOT_AVAILABLE = 41,  NOT_ALLOWED_ADD_CONTACT = 42,  NOT_CERTIFICATED = 43,  NOT_ALLOWED_SECONDARY_DEVICE = 44,  INVALID_PIN_CODE = 45,  NOT_FOUND_IDENTITY_CREDENTIAL = 46,  EXCEED_FILE_MAX_SIZE = 47,  EXCEED_DAILY_QUOTA = 48,  NOT_SUPPORT_SEND_FILE = 49,  MUST_UPGRADE = 50,  NOT_AVAILABLE_PIN_CODE_SESSION = 51,
}

enum FeatureType {
  OBJECT_STORAGE = 1,
}

enum GroupAttribute {
  NAME = 1,  PICTURE_STATUS = 2,  ALL = 255,
}

enum IdentityProvider {
  UNKNOWN = 0,  LINE = 1,  NAVER_KR = 2,
}

enum LoginResultType {
  SUCCESS = 1,  REQUIRE_QRCODE = 2,  REQUIRE_DEVICE_CONFIRM = 3,
}

enum MessageOperationType {
  SEND_MESSAGE = 1,  RECEIVE_MESSAGE = 2,  READ_MESSAGE = 3,  NOTIFIED_READ_MESSAGE = 4,  NOTIFIED_JOIN_CHAT = 5,  FAILED_SEND_MESSAGE = 6,  SEND_CONTENT = 7,  SEND_CONTENT_RECEIPT = 8,  SEND_CHAT_REMOVED = 9,  REMOVE_ALL_MESSAGES = 10,
}

enum MIDType {
  USER = 0,  ROOM = 1,  GROUP = 2,
}

enum ModificationType {
  ADD = 0,  REMOVE = 1,  MODIFY = 2,
}

enum NotificationItemFetchMode {
  ALL = 0,  APPEND = 1,
}

enum NotificationQueueType {
  GLOBAL = 1,  MESSAGE = 2,  PRIMARY = 3,
}

enum NotificationStatus {
  NOTIFICATION_ITEM_EXIST = 1,  TIMELINE_ITEM_EXIST = 2,  NOTE_GROUP_NEW_ITEM_EXIST = 4,  TIMELINE_BUDDYGROUP_CHANGED = 8,  NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16,  ALBUM_ITEM_EXIST = 32,  TIMELINE_ITEM_DELETED = 64,
}

enum NotificationType {
  APPLE_APNS = 1,  GOOGLE_C2DM = 2,  NHN_NNI = 3,  SKT_AOM = 4,  MS_MPNS = 5,  RIM_BIS = 6,  GOOGLE_GCM = 7,  NOKIA_NNAPI = 8,  TIZEN = 9,  LINE_BOT = 17,  LINE_WAP = 18,
}

enum OpStatus {
  NORMAL = 0,  ALERT_DISABLED = 1,
}

enum OpType {
  END_OF_OPERATION = 0,  UPDATE_PROFILE = 1,  NOTIFIED_UPDATE_PROFILE = 2,  REGISTER_USERID = 3,  ADD_CONTACT = 4,  NOTIFIED_ADD_CONTACT = 5,  BLOCK_CONTACT = 6,  UNBLOCK_CONTACT = 7,  NOTIFIED_RECOMMEND_CONTACT = 8,  CREATE_GROUP = 9,  UPDATE_GROUP = 10,  NOTIFIED_UPDATE_GROUP = 11,  INVITE_INTO_GROUP = 12,  NOTIFIED_INVITE_INTO_GROUP = 13,  LEAVE_GROUP = 14,  NOTIFIED_LEAVE_GROUP = 15,  ACCEPT_GROUP_INVITATION = 16,  NOTIFIED_ACCEPT_GROUP_INVITATION = 17,  KICKOUT_FROM_GROUP = 18,  NOTIFIED_KICKOUT_FROM_GROUP = 19,  CREATE_ROOM = 20,  INVITE_INTO_ROOM = 21,  NOTIFIED_INVITE_INTO_ROOM = 22,  LEAVE_ROOM = 23,  NOTIFIED_LEAVE_ROOM = 24,  SEND_MESSAGE = 25,  RECEIVE_MESSAGE = 26,  SEND_MESSAGE_RECEIPT = 27,  RECEIVE_MESSAGE_RECEIPT = 28,  SEND_CONTENT_RECEIPT = 29,  RECEIVE_ANNOUNCEMENT = 30,  CANCEL_INVITATION_GROUP = 31,  NOTIFIED_CANCEL_INVITATION_GROUP = 32,  NOTIFIED_UNREGISTER_USER = 33,  REJECT_GROUP_INVITATION = 34,  NOTIFIED_REJECT_GROUP_INVITATION = 35,  UPDATE_SETTINGS = 36,  NOTIFIED_REGISTER_USER = 37,  INVITE_VIA_EMAIL = 38,  NOTIFIED_REQUEST_RECOVERY = 39,  SEND_CHAT_CHECKED = 40,  SEND_CHAT_REMOVED = 41,  NOTIFIED_FORCE_SYNC = 42,  SEND_CONTENT = 43,  SEND_MESSAGE_MYHOME = 44,  NOTIFIED_UPDATE_CONTENT_PREVIEW = 45,  REMOVE_ALL_MESSAGES = 46,  NOTIFIED_UPDATE_PURCHASES = 47,  DUMMY = 48,  UPDATE_CONTACT = 49,  NOTIFIED_RECEIVED_CALL = 50,  CANCEL_CALL = 51,  NOTIFIED_REDIRECT = 52,  NOTIFIED_CHANNEL_SYNC = 53,  FAILED_SEND_MESSAGE = 54,  NOTIFIED_READ_MESSAGE = 55,  FAILED_EMAIL_CONFIRMATION = 56,  NOTIFIED_CHAT_CONTENT = 58,  NOTIFIED_PUSH_NOTICENTER_ITEM = 59,
}

enum PayloadType {
  PAYLOAD_BUY = 101,  PAYLOAD_CS = 111,  PAYLOAD_BONUS = 121,  PAYLOAD_EVENT = 131,
}

enum PaymentPgType {
  PAYMENT_PG_NONE = 0,  PAYMENT_PG_AU = 1,  PAYMENT_PG_AL = 2,
}

enum PaymentType {
  PAYMENT_APPLE = 1,  PAYMENT_GOOGLE = 2,
}

enum ProductBannerLinkType {
  BANNER_LINK_NONE = 0,  BANNER_LINK_ITEM = 1,  BANNER_LINK_URL = 2,  BANNER_LINK_CATEGORY = 3,
}

enum ProductEventType {
  NO_EVENT = 0,  CARRIER_ANY = 65537,  BUDDY_ANY = 131073,  INSTALL_IOS = 196609,  INSTALL_ANDROID = 196610,  MISSION_ANY = 262145,  MUSTBUY_ANY = 327681,
}

enum ProfileAttribute {
  EMAIL = 1,  DISPLAY_NAME = 2,  PHONETIC_NAME = 4,  PICTURE = 8,  STATUS_MESSAGE = 16,  ALLOW_SEARCH_BY_USERID = 32,  ALLOW_SEARCH_BY_EMAIL = 64,  BUDDY_STATUS = 128,  ALL = 255,
}

enum PublicType {
  HIDDEN = 0,  PUBLIC = 1000,
}

enum RedirectType {
  NONE = 0,  EXPIRE_SECOND = 1,
}

enum RegistrationType {
  PHONE = 0,  EMAIL_WAP = 1,  FACEBOOK = 2305,  SINA = 2306,  RENREN = 2307,  FEIXIN = 2308,
}

enum SettingsAttribute {
  NOTIFICATION_ENABLE = 1,  NOTIFICATION_MUTE_EXPIRATION = 2,  NOTIFICATION_NEW_MESSAGE = 4,  NOTIFICATION_GROUP_INVITATION = 8,  NOTIFICATION_SHOW_MESSAGE = 16,  NOTIFICATION_INCOMING_CALL = 32,  PRIVACY_SYNC_CONTACTS = 64,  PRIVACY_SEARCH_BY_PHONE_NUMBER = 128,  NOTIFICATION_SOUND_MESSAGE = 256,  NOTIFICATION_SOUND_GROUP = 512,  CONTACT_MY_TICKET = 1024,  IDENTITY_PROVIDER = 2048,  IDENTITY_IDENTIFIER = 4096,  PRIVACY_SEARCH_BY_USERID = 8192,  PRIVACY_SEARCH_BY_EMAIL = 16384,  PREFERENCE_LOCALE = 32768,  NOTIFICATION_DISABLED_WITH_SUB = 65536,  SNS_ACCOUNT = 524288,  PHONE_REGISTRATION = 1048576,  PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152,  CUSTOM_MODE = 4194304,  PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608,  EMAIL_CONFIRMATION_STATUS = 16777216,  PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432,  ALL = 2147483647,
}

enum SnsIdType {
  FACEBOOK = 1,  SINA = 2,  RENREN = 3,  FEIXIN = 4,
}

enum SpammerReason {
  OTHER = 0,  ADVERTISING = 1,  GENDER_HARASSMENT = 2,  HARASSMENT = 3,
}

enum SyncActionType {
  SYNC = 0,  REPORT = 1,
}

enum SyncCategory {
  PROFILE = 0,  SETTINGS = 1,  OPS = 2,  CONTACT = 3,  RECOMMEND = 4,  BLOCK = 5,  GROUP = 6,  ROOM = 7,  NOTIFICATION = 8,
}

enum TMessageBoxStatus {
  ACTIVATED = 1,  UNREAD = 2,
}

enum UniversalNotificationServiceErrorCode {
  INTERNAL_ERROR = 0,  INVALID_KEY = 1,  ILLEGAL_ARGUMENT = 2,  TOO_MANY_REQUEST = 3,  AUTHENTICATION_FAILED = 4,  NO_WRITE_PERMISSION = 5,
}

enum UnregistrationReason {
  UNREGISTRATION_REASON_UNREGISTER_USER = 1,  UNREGISTRATION_REASON_UNBIND_DEVICE = 2,
}

enum UserAgeType {
  OVER = 1,  UNDER = 2,  UNDEFINED = 3,
}

enum VerificationMethod {
  NO_AVAILABLE = 0,  PIN_VIA_SMS = 1,  CALLERID_INDIGO = 2,  PIN_VIA_TTS = 4,  SKIP = 10,
}

enum VerificationResult {
  FAILED = 0,  OK_NOT_REGISTERED_YET = 1,  OK_REGISTERED_WITH_SAME_DEVICE = 2,  OK_REGISTERED_WITH_ANOTHER_DEVICE = 3,
}

enum WapInvitationType {
  REGISTRATION = 1,  CHAT = 2,
}

struct AgeCheckDocomoResult {
  string authUrl;
  UserAgeType userAgeType;
  
  mixin TStructHelpers!([
    TFieldMeta(`authUrl`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`userAgeType`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct AgeCheckRequestResult {
  string authUrl;
  string sessionId;
  
  mixin TStructHelpers!([
    TFieldMeta(`authUrl`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`sessionId`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Announcement {
  int index;
  bool forceUpdate;
  string title;
  string text;
  long createdTime;
  string pictureUrl;
  string thumbnailUrl;
  
  mixin TStructHelpers!([
    TFieldMeta(`index`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`forceUpdate`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`title`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`text`, 12, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`createdTime`, 13, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`pictureUrl`, 14, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`thumbnailUrl`, 15, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ChannelProvider {
  string name;
  
  mixin TStructHelpers!([
    TFieldMeta(`name`, 1, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ChannelInfo {
  string channelId;
  string name;
  string entryPageUrl;
  string descriptionText;
  ChannelProvider provider;
  PublicType publicType;
  string iconImage;
  string[] permissions;
  string iconThumbnailImage;
  ChannelConfiguration[] channelConfigurations;
  
  mixin TStructHelpers!([
    TFieldMeta(`channelId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`name`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`entryPageUrl`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`descriptionText`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`provider`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`publicType`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`iconImage`, 8, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`permissions`, 9, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`iconThumbnailImage`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`channelConfigurations`, 12, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ApprovedChannelInfo {
  ChannelInfo channelInfo;
  long approvedAt;
  
  mixin TStructHelpers!([
    TFieldMeta(`channelInfo`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`approvedAt`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ApprovedChannelInfos {
  ApprovedChannelInfo[] approvedChannelInfos;
  long revision;
  
  mixin TStructHelpers!([
    TFieldMeta(`approvedChannelInfos`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`revision`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct AuthQrcode {
  string qrcode;
  string verifier;
  
  mixin TStructHelpers!([
    TFieldMeta(`qrcode`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`verifier`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct BuddyBanner {
  BuddyBannerLinkType buddyBannerLinkType;
  string buddyBannerLink;
  string buddyBannerImageUrl;
  
  mixin TStructHelpers!([
    TFieldMeta(`buddyBannerLinkType`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`buddyBannerLink`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`buddyBannerImageUrl`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct BuddyDetail {
  string mid;
  long memberCount;
  bool onAir;
  bool businessAccount;
  bool addable;
  HashSet!(ContentType) acceptableContentTypes;
  bool capableMyhome;
  
  mixin TStructHelpers!([
    TFieldMeta(`mid`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`memberCount`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`onAir`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`businessAccount`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`addable`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`acceptableContentTypes`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`capableMyhome`, 7, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Contact {
  string mid;
  long createdTime;
  ContactType type;
  ContactStatus status;
  ContactRelation relation;
  string displayName;
  string phoneticName;
  string pictureStatus;
  string thumbnailUrl;
  string statusMessage;
  string displayNameOverridden;
  long favoriteTime;
  bool capableVoiceCall;
  bool capableVideoCall;
  bool capableMyhome;
  bool capableBuddy;
  int attributes;
  long settings;
  string picturePath;
  
  mixin TStructHelpers!([
    TFieldMeta(`mid`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`createdTime`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`type`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`status`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`relation`, 21, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`displayName`, 22, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`phoneticName`, 23, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`pictureStatus`, 24, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`thumbnailUrl`, 25, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`statusMessage`, 26, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`displayNameOverridden`, 27, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`favoriteTime`, 28, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`capableVoiceCall`, 31, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`capableVideoCall`, 32, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`capableMyhome`, 33, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`capableBuddy`, 34, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`attributes`, 35, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`settings`, 36, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`picturePath`, 37, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct BuddyList {
  string classification;
  string displayName;
  int totalBuddyCount;
  Contact[] popularContacts;
  
  mixin TStructHelpers!([
    TFieldMeta(`classification`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`displayName`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`totalBuddyCount`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`popularContacts`, 4, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Location {
  string title;
  string address;
  double latitude;
  double longitude;
  string phone;
  
  mixin TStructHelpers!([
    TFieldMeta(`title`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`address`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`latitude`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`longitude`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`phone`, 5, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct BuddyMessageRequest {
  ContentType contentType;
  string text;
  Location location;
  string content;
  string[string] contentMetadata;
  
  mixin TStructHelpers!([
    TFieldMeta(`contentType`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`text`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`location`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`content`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`contentMetadata`, 5, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct BuddyOnAirUrls {
  string[string] hls;
  string[string] smoothStreaming;
  
  mixin TStructHelpers!([
    TFieldMeta(`hls`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`smoothStreaming`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct BuddyOnAir {
  string mid;
  long freshnessLifetime;
  string onAirId;
  bool onAir;
  string text;
  long viewerCount;
  long targetCount;
  BuddyOnAirType onAirType;
  BuddyOnAirUrls onAirUrls;
  
  mixin TStructHelpers!([
    TFieldMeta(`mid`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`freshnessLifetime`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`onAirId`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`onAir`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`text`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`viewerCount`, 12, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`targetCount`, 13, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`onAirType`, 31, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`onAirUrls`, 32, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct BuddyProfile {
  string buddyId;
  string mid;
  string searchId;
  string displayName;
  string statusMessage;
  long contactCount;
  
  mixin TStructHelpers!([
    TFieldMeta(`buddyId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`mid`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`searchId`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`displayName`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`statusMessage`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`contactCount`, 11, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct BuddySearchResult {
  string mid;
  string displayName;
  string pictureStatus;
  string picturePath;
  string statusMessage;
  bool businessAccount;
  
  mixin TStructHelpers!([
    TFieldMeta(`mid`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`displayName`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`pictureStatus`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`picturePath`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`statusMessage`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`businessAccount`, 6, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ChannelDomain {
  string host;
  bool removed;
  
  mixin TStructHelpers!([
    TFieldMeta(`host`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`removed`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ChannelDomains {
  ChannelDomain[] channelDomains;
  long revision;
  
  mixin TStructHelpers!([
    TFieldMeta(`channelDomains`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`revision`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

class ChannelException : TException {
  ChannelErrorCode code;
  string reason;
  string[string] parameterMap;
  
  mixin TStructHelpers!([
    TFieldMeta(`code`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`reason`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`parameterMap`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ChannelInfos {
  ChannelInfo[] channelInfos;
  long revision;
  
  mixin TStructHelpers!([
    TFieldMeta(`channelInfos`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`revision`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ChannelNotificationSetting {
  string channelId;
  string name;
  bool notificationReceivable;
  bool messageReceivable;
  bool showDefault;
  
  mixin TStructHelpers!([
    TFieldMeta(`channelId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`name`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`notificationReceivable`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`messageReceivable`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`showDefault`, 5, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ChannelSyncDatas {
  ChannelInfo[] channelInfos;
  ChannelDomain[] channelDomains;
  long revision;
  long expires;
  
  mixin TStructHelpers!([
    TFieldMeta(`channelInfos`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`channelDomains`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`revision`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`expires`, 4, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ChannelToken {
  string token;
  string obsToken;
  long expiration;
  string refreshToken;
  string channelAccessToken;
  
  mixin TStructHelpers!([
    TFieldMeta(`token`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`obsToken`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`expiration`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`refreshToken`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`channelAccessToken`, 5, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Coin {
  int freeCoinBalance;
  int payedCoinBalance;
  int totalCoinBalance;
  int rewardCoinBalance;
  
  mixin TStructHelpers!([
    TFieldMeta(`freeCoinBalance`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`payedCoinBalance`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`totalCoinBalance`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`rewardCoinBalance`, 4, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct CoinPayLoad {
  int payCoin;
  int freeCoin;
  PayloadType type;
  int rewardCoin;
  
  mixin TStructHelpers!([
    TFieldMeta(`payCoin`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`freeCoin`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`type`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`rewardCoin`, 4, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct CoinHistory {
  long payDate;
  int coinBalance;
  int coin;
  string price;
  string title;
  bool refund;
  string paySeq;
  string currency;
  string currencySign;
  string displayPrice;
  CoinPayLoad payload;
  string channelId;
  
  mixin TStructHelpers!([
    TFieldMeta(`payDate`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`coinBalance`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`coin`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`price`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`title`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`refund`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`paySeq`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`currency`, 8, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`currencySign`, 9, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`displayPrice`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`payload`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`channelId`, 12, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct CoinHistoryCondition {
  long start;
  int size;
  string language;
  string eddt;
  PaymentType appStoreCode;
  
  mixin TStructHelpers!([
    TFieldMeta(`start`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`size`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`language`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`eddt`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`appStoreCode`, 5, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct CoinHistoryResult {
  CoinHistory[] historys;
  Coin balance;
  bool hasNext;
  
  mixin TStructHelpers!([
    TFieldMeta(`historys`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`balance`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`hasNext`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct CoinProductItem {
  string itemId;
  int coin;
  int freeCoin;
  string currency;
  string price;
  string displayPrice;
  string name;
  string desc;
  
  mixin TStructHelpers!([
    TFieldMeta(`itemId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`coin`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`freeCoin`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`currency`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`price`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`displayPrice`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`name`, 8, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`desc`, 9, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct CoinPurchaseConfirm {
  string orderId;
  PaymentType appStoreCode;
  string receipt;
  string signature;
  string seller;
  string requestType;
  bool ignoreReceipt;
  
  mixin TStructHelpers!([
    TFieldMeta(`orderId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`appStoreCode`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`receipt`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`signature`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`seller`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`requestType`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`ignoreReceipt`, 7, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct CoinPurchaseReservation {
  string productId;
  string country;
  string currency;
  string price;
  PaymentType appStoreCode;
  string language;
  PaymentPgType pgCode;
  string redirectUrl;
  
  mixin TStructHelpers!([
    TFieldMeta(`productId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`country`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`currency`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`price`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`appStoreCode`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`language`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`pgCode`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`redirectUrl`, 8, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct CoinUseReservationItem {
  string itemId;
  string itemName;
  int amount;
  
  mixin TStructHelpers!([
    TFieldMeta(`itemId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`itemName`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`amount`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct CoinUseReservation {
  string channelId;
  string shopOrderId;
  PaymentType appStoreCode;
  CoinUseReservationItem[] items;
  string country;
  
  mixin TStructHelpers!([
    TFieldMeta(`channelId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`shopOrderId`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`appStoreCode`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`items`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`country`, 5, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct CompactContact {
  string mid;
  long createdTime;
  long modifiedTime;
  ContactStatus status;
  long settings;
  string displayNameOverridden;
  
  mixin TStructHelpers!([
    TFieldMeta(`mid`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`createdTime`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`modifiedTime`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`status`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`settings`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`displayNameOverridden`, 6, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ContactModification {
  ModificationType type;
  string luid;
  string[] phones;
  string[] emails;
  string[] userids;
  
  mixin TStructHelpers!([
    TFieldMeta(`type`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`luid`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`phones`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`emails`, 12, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`userids`, 13, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ContactRegistration {
  Contact contact;
  string luid;
  ContactType contactType;
  string contactKey;
  
  mixin TStructHelpers!([
    TFieldMeta(`contact`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`luid`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`contactType`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`contactKey`, 12, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ContactReport {
  string mid;
  bool exists;
  Contact contact;
  
  mixin TStructHelpers!([
    TFieldMeta(`mid`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`exists`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`contact`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ContactReportResult {
  string mid;
  bool exists;
  
  mixin TStructHelpers!([
    TFieldMeta(`mid`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`exists`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct DeviceInfo {
  string deviceName;
  string systemName;
  string systemVersion;
  string model;
  CarrierCode carrierCode;
  string carrierName;
  ApplicationType applicationType;
  
  mixin TStructHelpers!([
    TFieldMeta(`deviceName`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`systemName`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`systemVersion`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`model`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`carrierCode`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`carrierName`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`applicationType`, 20, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct EmailConfirmation {
  bool usePasswordSet;
  string email;
  string password;
  bool ignoreDuplication;
  
  mixin TStructHelpers!([
    TFieldMeta(`usePasswordSet`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`email`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`password`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`ignoreDuplication`, 4, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct EmailConfirmationSession {
  EmailConfirmationType emailConfirmationType;
  string verifier;
  string targetEmail;
  
  mixin TStructHelpers!([
    TFieldMeta(`emailConfirmationType`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`verifier`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`targetEmail`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct FriendChannelMatrix {
  string channelId;
  string representMid;
  int count;
  
  mixin TStructHelpers!([
    TFieldMeta(`channelId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`representMid`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`count`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct FriendChannelMatricesResponse {
  long expires;
  FriendChannelMatrix[] matrices;
  
  mixin TStructHelpers!([
    TFieldMeta(`expires`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`matrices`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Geolocation {
  double longitude;
  double latitude;
  
  mixin TStructHelpers!([
    TFieldMeta(`longitude`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`latitude`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct NotificationTarget {
  string applicationType;
  string applicationVersion;
  string region;
  
  mixin TStructHelpers!([
    TFieldMeta(`applicationType`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`applicationVersion`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`region`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct GlobalEvent {
  string key;
  NotificationTarget[] targets;
  long createdTime;
  long data;
  int maxDelay;
  
  mixin TStructHelpers!([
    TFieldMeta(`key`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`targets`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`createdTime`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`data`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`maxDelay`, 5, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Group {
  string id;
  long createdTime;
  string name;
  string pictureStatus;
  Contact[] members;
  Contact creator;
  Contact[] invitee;
  bool notificationDisabled;
  
  mixin TStructHelpers!([
    TFieldMeta(`id`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`createdTime`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`name`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`pictureStatus`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`members`, 20, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`creator`, 21, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`invitee`, 22, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`notificationDisabled`, 31, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct IdentityCredential {
  IdentityProvider provider;
  string identifier;
  string password;
  
  mixin TStructHelpers!([
    TFieldMeta(`provider`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`identifier`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`password`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct LastReadMessageId {
  string mid;
  string lastReadMessageId;
  
  mixin TStructHelpers!([
    TFieldMeta(`mid`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`lastReadMessageId`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct LastReadMessageIds {
  string chatId;
  LastReadMessageId[] lastReadMessageIds;
  
  mixin TStructHelpers!([
    TFieldMeta(`chatId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`lastReadMessageIds`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct LoginResult {
  string authToken;
  string certificate;
  string verifier;
  string pinCode;
  LoginResultType type;
  
  mixin TStructHelpers!([
    TFieldMeta(`authToken`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`certificate`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`verifier`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`pinCode`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`type`, 5, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct LoginSession {
  string tokenKey;
  long expirationTime;
  ApplicationType applicationType;
  string systemName;
  string accessLocation;
  
  mixin TStructHelpers!([
    TFieldMeta(`tokenKey`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`expirationTime`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`applicationType`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`systemName`, 12, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`accessLocation`, 22, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Message {
  string from_;
  string to;
  MIDType toType;
  string id;
  long createdTime;
  long deliveredTime;
  string text;
  Location location;
  bool hasContent;
  ContentType contentType;
  string contentPreview;
  string[string] contentMetadata;
  
  mixin TStructHelpers!([
    TFieldMeta(`from_`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`to`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`toType`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`id`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`createdTime`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`deliveredTime`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`text`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`location`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`hasContent`, 14, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`contentType`, 15, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`contentPreview`, 17, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`contentMetadata`, 18, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct MessageOperation {
  long revision;
  long createdTime;
  MessageOperationType type;
  int reqSeq;
  OpStatus status;
  string param1;
  string param2;
  string param3;
  Message message;
  
  mixin TStructHelpers!([
    TFieldMeta(`revision`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`createdTime`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`type`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`reqSeq`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`status`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`param1`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`param2`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`param3`, 12, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`message`, 20, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct MessageOperations {
  MessageOperation[] operations;
  bool endFlag;
  
  mixin TStructHelpers!([
    TFieldMeta(`operations`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`endFlag`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct MetaProfile {
  long createTime;
  string regionCode;
  string[RegistrationType] identities;
  
  mixin TStructHelpers!([
    TFieldMeta(`createTime`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`regionCode`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`identities`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct NotificationItem {
  string id;
  string from_;
  string to;
  string fromChannel;
  string toChannel;
  long revision;
  long createdTime;
  string[string] content;
  
  mixin TStructHelpers!([
    TFieldMeta(`id`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`from_`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`to`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`fromChannel`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`toChannel`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`revision`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`createdTime`, 8, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`content`, 9, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct NotificationFetchResult {
  NotificationItemFetchMode fetchMode;
  NotificationItem[] itemList;
  
  mixin TStructHelpers!([
    TFieldMeta(`fetchMode`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`itemList`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Operation {
  long revision;
  long createdTime;
  OpType type;
  int reqSeq;
  string checksum;
  OpStatus status;
  string param1;
  string param2;
  string param3;
  Message message;
  
  mixin TStructHelpers!([
    TFieldMeta(`revision`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`createdTime`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`type`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`reqSeq`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`checksum`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`status`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`param1`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`param2`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`param3`, 12, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`message`, 20, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct PaymentReservation {
  string receiverMid;
  string productId;
  string language;
  string location;
  string currency;
  string price;
  PaymentType appStoreCode;
  string messageText;
  int messageTemplate;
  long packageId;
  
  mixin TStructHelpers!([
    TFieldMeta(`receiverMid`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`productId`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`language`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`location`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`currency`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`price`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`appStoreCode`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`messageText`, 8, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`messageTemplate`, 9, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`packageId`, 10, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct PaymentReservationResult {
  string orderId;
  string confirmUrl;
  string[string] extras;
  
  mixin TStructHelpers!([
    TFieldMeta(`orderId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`confirmUrl`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`extras`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Product {
  string productId;
  long packageId;
  int version_;
  string authorName;
  bool onSale;
  int validDays;
  int saleType;
  string copyright;
  string title;
  string descriptionText;
  long shopOrderId;
  string fromMid;
  string toMid;
  long validUntil;
  int priceTier;
  string price;
  string currency;
  string currencySymbol;
  PaymentType paymentType;
  long createDate;
  bool ownFlag;
  ProductEventType eventType;
  string urlSchema;
  string downloadUrl;
  string buddyMid;
  long publishSince;
  bool newFlag;
  bool missionFlag;
  
  mixin TStructHelpers!([
    TFieldMeta(`productId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`packageId`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`version_`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`authorName`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`onSale`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`validDays`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`saleType`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`copyright`, 8, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`title`, 9, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`descriptionText`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`shopOrderId`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`fromMid`, 12, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`toMid`, 13, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`validUntil`, 14, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`priceTier`, 15, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`price`, 16, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`currency`, 17, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`currencySymbol`, 18, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`paymentType`, 19, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`createDate`, 20, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`ownFlag`, 21, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`eventType`, 22, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`urlSchema`, 23, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`downloadUrl`, 24, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`buddyMid`, 25, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`publishSince`, 26, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`newFlag`, 27, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`missionFlag`, 28, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ProductList {
  bool hasNext;
  long bannerSequence;
  ProductBannerLinkType bannerTargetType;
  string bannerTargetPath;
  Product[] productList;
  string bannerLang;
  
  mixin TStructHelpers!([
    TFieldMeta(`hasNext`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`bannerSequence`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`bannerTargetType`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`bannerTargetPath`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`productList`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`bannerLang`, 8, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ProductSimple {
  string productId;
  long packageId;
  int version_;
  bool onSale;
  long validUntil;
  
  mixin TStructHelpers!([
    TFieldMeta(`productId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`packageId`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`version_`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`onSale`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`validUntil`, 5, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ProductSimpleList {
  bool hasNext;
  int reinvokeHour;
  long lastVersionSeq;
  ProductSimple[] productList;
  long recentNewReleaseDate;
  long recentEventReleaseDate;
  
  mixin TStructHelpers!([
    TFieldMeta(`hasNext`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`reinvokeHour`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`lastVersionSeq`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`productList`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`recentNewReleaseDate`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`recentEventReleaseDate`, 6, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Profile {
  string mid;
  string userid;
  string phone;
  string email;
  string regionCode;
  string displayName;
  string phoneticName;
  string pictureStatus;
  string thumbnailUrl;
  string statusMessage;
  bool allowSearchByUserid;
  bool allowSearchByEmail;
  string picturePath;
  
  mixin TStructHelpers!([
    TFieldMeta(`mid`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`userid`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`phone`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`email`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`regionCode`, 12, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`displayName`, 20, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`phoneticName`, 21, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`pictureStatus`, 22, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`thumbnailUrl`, 23, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`statusMessage`, 24, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`allowSearchByUserid`, 31, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`allowSearchByEmail`, 32, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`picturePath`, 33, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct ProximityMatchCandidateResult {
  Contact[] users;
  Contact[] buddies;
  
  mixin TStructHelpers!([
    TFieldMeta(`users`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`buddies`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct RegisterWithSnsIdResult {
  string authToken;
  bool userCreated;
  
  mixin TStructHelpers!([
    TFieldMeta(`authToken`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`userCreated`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct RequestTokenResponse {
  string requestToken;
  string returnUrl;
  
  mixin TStructHelpers!([
    TFieldMeta(`requestToken`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`returnUrl`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Room {
  string mid;
  long createdTime;
  Contact[] contacts;
  bool notificationDisabled;
  
  mixin TStructHelpers!([
    TFieldMeta(`mid`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`createdTime`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`contacts`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`notificationDisabled`, 31, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct RSAKey {
  string keynm;
  string nvalue;
  string evalue;
  string sessionKey;
  
  mixin TStructHelpers!([
    TFieldMeta(`keynm`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`nvalue`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`evalue`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`sessionKey`, 4, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct SendBuddyMessageResult {
  string requestId;
  BuddyResultState state;
  string messageId;
  int eventNo;
  long receiverCount;
  long successCount;
  long failCount;
  long cancelCount;
  long blockCount;
  long unregisterCount;
  long timestamp;
  string message;
  
  mixin TStructHelpers!([
    TFieldMeta(`requestId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`state`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`messageId`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`eventNo`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`receiverCount`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`successCount`, 12, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`failCount`, 13, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`cancelCount`, 14, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`blockCount`, 15, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`unregisterCount`, 16, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`timestamp`, 21, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`message`, 22, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct SetBuddyOnAirResult {
  string requestId;
  BuddyResultState state;
  int eventNo;
  long receiverCount;
  long successCount;
  long failCount;
  long cancelCount;
  long unregisterCount;
  long timestamp;
  string message;
  
  mixin TStructHelpers!([
    TFieldMeta(`requestId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`state`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`eventNo`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`receiverCount`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`successCount`, 12, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`failCount`, 13, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`cancelCount`, 14, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`unregisterCount`, 15, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`timestamp`, 21, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`message`, 22, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Settings {
  bool notificationEnable;
  long notificationMuteExpiration;
  bool notificationNewMessage;
  bool notificationGroupInvitation;
  bool notificationShowMessage;
  bool notificationIncomingCall;
  string notificationSoundMessage;
  string notificationSoundGroup;
  bool notificationDisabledWithSub;
  bool privacySyncContacts;
  bool privacySearchByPhoneNumber;
  bool privacySearchByUserid;
  bool privacySearchByEmail;
  bool privacyAllowSecondaryDeviceLogin;
  bool privacyProfileImagePostToMyhome;
  bool privacyReceiveMessagesFromNotFriend;
  string contactMyTicket;
  IdentityProvider identityProvider;
  string identityIdentifier;
  string[SnsIdType] snsAccounts;
  bool phoneRegistration;
  EmailConfirmationStatus emailConfirmationStatus;
  string preferenceLocale;
  string[CustomMode] customModes;
  
  mixin TStructHelpers!([
    TFieldMeta(`notificationEnable`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`notificationMuteExpiration`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`notificationNewMessage`, 12, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`notificationGroupInvitation`, 13, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`notificationShowMessage`, 14, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`notificationIncomingCall`, 15, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`notificationSoundMessage`, 16, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`notificationSoundGroup`, 17, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`notificationDisabledWithSub`, 18, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`privacySyncContacts`, 20, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`privacySearchByPhoneNumber`, 21, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`privacySearchByUserid`, 22, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`privacySearchByEmail`, 23, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`privacyAllowSecondaryDeviceLogin`, 24, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`privacyProfileImagePostToMyhome`, 25, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`privacyReceiveMessagesFromNotFriend`, 26, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`contactMyTicket`, 30, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`identityProvider`, 40, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`identityIdentifier`, 41, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`snsAccounts`, 42, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`phoneRegistration`, 43, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`emailConfirmationStatus`, 44, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`preferenceLocale`, 50, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`customModes`, 60, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct SimpleChannelClient {
  string applicationType;
  string applicationVersion;
  string locale;
  
  mixin TStructHelpers!([
    TFieldMeta(`applicationType`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`applicationVersion`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`locale`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct SimpleChannelContact {
  string mid;
  string displayName;
  string pictureStatus;
  string picturePath;
  string statusMessage;
  
  mixin TStructHelpers!([
    TFieldMeta(`mid`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`displayName`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`pictureStatus`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`picturePath`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`statusMessage`, 5, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct SnsFriend {
  string snsUserId;
  string snsUserName;
  SnsIdType snsIdType;
  
  mixin TStructHelpers!([
    TFieldMeta(`snsUserId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`snsUserName`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`snsIdType`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct SnsFriendContactRegistration {
  Contact contact;
  SnsIdType snsIdType;
  string snsUserId;
  
  mixin TStructHelpers!([
    TFieldMeta(`contact`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`snsIdType`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`snsUserId`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct SnsFriendModification {
  ModificationType type;
  SnsFriend snsFriend;
  
  mixin TStructHelpers!([
    TFieldMeta(`type`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`snsFriend`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct SnsFriends {
  SnsFriend[] snsFriends;
  bool hasMore;
  
  mixin TStructHelpers!([
    TFieldMeta(`snsFriends`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`hasMore`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct SnsIdUserStatus {
  bool userExisting;
  bool phoneNumberRegistered;
  bool sameDevice;
  
  mixin TStructHelpers!([
    TFieldMeta(`userExisting`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`phoneNumberRegistered`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`sameDevice`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct SnsProfile {
  string snsUserId;
  string snsUserName;
  string email;
  string thumbnailUrl;
  
  mixin TStructHelpers!([
    TFieldMeta(`snsUserId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`snsUserName`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`email`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`thumbnailUrl`, 4, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct SystemConfiguration {
  string endpoint;
  string endpointSsl;
  string updateUrl;
  string c2dmAccount;
  string nniServer;
  
  mixin TStructHelpers!([
    TFieldMeta(`endpoint`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`endpointSsl`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`updateUrl`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`c2dmAccount`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`nniServer`, 12, TReq.OPT_IN_REQ_OUT)
  ]);
}

class TalkException : TException {
  ErrorCode code;
  string reason;
  string[string] parameterMap;
  
  mixin TStructHelpers!([
    TFieldMeta(`code`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`reason`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`parameterMap`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct Ticket {
  string id;
  long expirationTime;
  int maxUseCount;
  
  mixin TStructHelpers!([
    TFieldMeta(`id`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`expirationTime`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`maxUseCount`, 21, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct TMessageBox {
  string id;
  string channelId;
  long lastSeq;
  long unreadCount;
  long lastModifiedTime;
  int status;
  MIDType midType;
  Message[] lastMessages;
  
  mixin TStructHelpers!([
    TFieldMeta(`id`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`channelId`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`lastSeq`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`unreadCount`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`lastModifiedTime`, 7, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`status`, 8, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`midType`, 9, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`lastMessages`, 10, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct TMessageBoxWrapUp {
  TMessageBox messageBox;
  string name;
  Contact[] contacts;
  string pictureRevision;
  
  mixin TStructHelpers!([
    TFieldMeta(`messageBox`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`name`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`contacts`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`pictureRevision`, 4, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct TMessageBoxWrapUpResponse {
  TMessageBoxWrapUp[] messageBoxWrapUpList;
  int totalSize;
  
  mixin TStructHelpers!([
    TFieldMeta(`messageBoxWrapUpList`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`totalSize`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

class UniversalNotificationServiceException : TException {
  UniversalNotificationServiceErrorCode code;
  string reason;
  string[string] parameterMap;
  
  mixin TStructHelpers!([
    TFieldMeta(`code`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`reason`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`parameterMap`, 3, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct UpdateBuddyProfileResult {
  string requestId;
  BuddyResultState state;
  int eventNo;
  long receiverCount;
  long successCount;
  long failCount;
  long cancelCount;
  long unregisterCount;
  long timestamp;
  string message;
  
  mixin TStructHelpers!([
    TFieldMeta(`requestId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`state`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`eventNo`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`receiverCount`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`successCount`, 12, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`failCount`, 13, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`cancelCount`, 14, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`unregisterCount`, 15, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`timestamp`, 21, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`message`, 22, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct UserAuthStatus {
  bool phoneNumberRegistered;
  SnsIdType[] registeredSnsIdTypes;
  
  mixin TStructHelpers!([
    TFieldMeta(`phoneNumberRegistered`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`registeredSnsIdTypes`, 2, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct VerificationSessionData {
  string sessionId;
  VerificationMethod method;
  string callback;
  string normalizedPhone;
  string countryCode;
  string nationalSignificantNumber;
  VerificationMethod[] availableVerificationMethods;
  
  mixin TStructHelpers!([
    TFieldMeta(`sessionId`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`method`, 2, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`callback`, 3, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`normalizedPhone`, 4, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`countryCode`, 5, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`nationalSignificantNumber`, 6, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`availableVerificationMethods`, 7, TReq.OPT_IN_REQ_OUT)
  ]);
}

struct WapInvitation {
  WapInvitationType type;
  string inviteeEmail;
  string inviterMid;
  string roomMid;
  
  mixin TStructHelpers!([
    TFieldMeta(`type`, 1, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`inviteeEmail`, 10, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`inviterMid`, 11, TReq.OPT_IN_REQ_OUT),
    TFieldMeta(`roomMid`, 12, TReq.OPT_IN_REQ_OUT)
  ]);
}

