// Autogenerated by Thrift Compiler (0.14.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"line"
)

var _ = line.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void acceptGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  void acceptProximityMatches(string sessionId,  ids)")
  fmt.Fprintln(os.Stderr, "   acquireCallRoute(string to)")
  fmt.Fprintln(os.Stderr, "  string acquireCallTicket(string to)")
  fmt.Fprintln(os.Stderr, "  string acquireEncryptedAccessToken(FeatureType featureType)")
  fmt.Fprintln(os.Stderr, "  string addSnsId(SnsIdType snsIdType, string snsAccessToken)")
  fmt.Fprintln(os.Stderr, "  void blockContact(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void blockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void cancelGroupInvitation(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData changeVerificationMethod(string sessionId, VerificationMethod method)")
  fmt.Fprintln(os.Stderr, "  void clearIdentityCredential()")
  fmt.Fprintln(os.Stderr, "  void clearMessageBox(string channelId, string messageBoxId)")
  fmt.Fprintln(os.Stderr, "  void closeProximityMatch(string sessionId)")
  fmt.Fprintln(os.Stderr, "   commitSendMessage(i32 seq, string messageId,  receiverMids)")
  fmt.Fprintln(os.Stderr, "   commitSendMessages(i32 seq,  messageIds,  receiverMids)")
  fmt.Fprintln(os.Stderr, "   commitUpdateProfile(i32 seq,  attrs,  receiverMids)")
  fmt.Fprintln(os.Stderr, "  void confirmEmail(string verifier, string pinCode)")
  fmt.Fprintln(os.Stderr, "  Group createGroup(i32 seq, string name,  contactIds)")
  fmt.Fprintln(os.Stderr, "  string createQrcodeBase64Image(string url, string characterSet, i32 imageSize, i32 x, i32 y, i32 width, i32 height)")
  fmt.Fprintln(os.Stderr, "  Room createRoom(i32 reqSeq,  contactIds)")
  fmt.Fprintln(os.Stderr, "  string createSession()")
  fmt.Fprintln(os.Stderr, "   fetchAnnouncements(i32 lastFetchedIndex)")
  fmt.Fprintln(os.Stderr, "   fetchMessages(i64 localTs, i32 count)")
  fmt.Fprintln(os.Stderr, "   fetchOperations(i64 localRev, i32 count)")
  fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByEmail(i32 reqSeq,  emails)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByPhone(i32 reqSeq,  phones)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByUserid(i32 reqSeq, string userid)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserid(string userid)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserTicket(string ticketId)")
  fmt.Fprintln(os.Stderr, "   findContactsByEmail( emails)")
  fmt.Fprintln(os.Stderr, "   findContactsByPhone( phones)")
  fmt.Fprintln(os.Stderr, "  SnsIdUserStatus findSnsIdUserStatus(SnsIdType snsIdType, string snsAccessToken, string udidHash)")
  fmt.Fprintln(os.Stderr, "  void finishUpdateVerification(string sessionId)")
  fmt.Fprintln(os.Stderr, "  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "   getAcceptedProximityMatches(string sessionId)")
  fmt.Fprintln(os.Stderr, "   getActiveBuddySubscriberIds()")
  fmt.Fprintln(os.Stderr, "   getAllContactIds()")
  fmt.Fprintln(os.Stderr, "  AuthQrcode getAuthQrcode(bool keepLoggedIn, string systemName)")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIds()")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIdsByRange(i32 start, i32 count)")
  fmt.Fprintln(os.Stderr, "   getBlockedRecommendationIds()")
  fmt.Fprintln(os.Stderr, "   getBuddyBlockerIds()")
  fmt.Fprintln(os.Stderr, "  Geolocation getBuddyLocation(string mid, i32 index)")
  fmt.Fprintln(os.Stderr, "   getCompactContactsModifiedSince(i64 timestamp)")
  fmt.Fprintln(os.Stderr, "  Group getCompactGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "  Room getCompactRoom(string roomId)")
  fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
  fmt.Fprintln(os.Stderr, "   getContacts( ids)")
  fmt.Fprintln(os.Stderr, "  string getCountryWithRequestIp()")
  fmt.Fprintln(os.Stderr, "   getFavoriteMids()")
  fmt.Fprintln(os.Stderr, "  Group getGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "   getGroupIdsInvited()")
  fmt.Fprintln(os.Stderr, "   getGroupIdsJoined()")
  fmt.Fprintln(os.Stderr, "   getGroups( groupIds)")
  fmt.Fprintln(os.Stderr, "   getHiddenContactMids()")
  fmt.Fprintln(os.Stderr, "  string getIdentityIdentifier()")
  fmt.Fprintln(os.Stderr, "  i32 getLastAnnouncementIndex()")
  fmt.Fprintln(os.Stderr, "  i64 getLastOpRevision()")
  fmt.Fprintln(os.Stderr, "  TMessageBox getMessageBox(string channelId, string messageBoxId, i32 lastMessagesCount)")
  fmt.Fprintln(os.Stderr, "  TMessageBoxWrapUp getMessageBoxCompactWrapUp(string mid)")
  fmt.Fprintln(os.Stderr, "  TMessageBoxWrapUpResponse getMessageBoxCompactWrapUpList(i32 start, i32 messageBoxCount)")
  fmt.Fprintln(os.Stderr, "   getMessageBoxList(string channelId, i32 lastMessagesCount)")
  fmt.Fprintln(os.Stderr, "   getMessageBoxListByStatus(string channelId, i32 lastMessagesCount, i32 status)")
  fmt.Fprintln(os.Stderr, "  TMessageBoxWrapUp getMessageBoxWrapUp(string mid)")
  fmt.Fprintln(os.Stderr, "  TMessageBoxWrapUpResponse getMessageBoxWrapUpList(i32 start, i32 messageBoxCount)")
  fmt.Fprintln(os.Stderr, "   getMessagesBySequenceNumber(string channelId, string messageBoxId, i64 startSeq, i64 endSeq)")
  fmt.Fprintln(os.Stderr, "   getNextMessages(string messageBoxId, i64 startSeq, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "   getNotificationPolicy(CarrierCode carrier)")
  fmt.Fprintln(os.Stderr, "   getPreviousMessages(string messageBoxId, i64 endSeq, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "  Profile getProfile()")
  fmt.Fprintln(os.Stderr, "  ProximityMatchCandidateResult getProximityMatchCandidateList(string sessionId)")
  fmt.Fprintln(os.Stderr, "   getProximityMatchCandidates(string sessionId)")
  fmt.Fprintln(os.Stderr, "   getRecentMessages(string messageBoxId, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "   getRecommendationIds()")
  fmt.Fprintln(os.Stderr, "  Room getRoom(string roomId)")
  fmt.Fprintln(os.Stderr, "  RSAKey getRSAKeyInfo(IdentityProvider provider)")
  fmt.Fprintln(os.Stderr, "  i64 getServerTime()")
  fmt.Fprintln(os.Stderr, "   getSessions()")
  fmt.Fprintln(os.Stderr, "  Settings getSettings()")
  fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes(i32 attrBitset)")
  fmt.Fprintln(os.Stderr, "  SystemConfiguration getSystemConfiguration()")
  fmt.Fprintln(os.Stderr, "  Ticket getUserTicket()")
  fmt.Fprintln(os.Stderr, "  WapInvitation getWapInvitation(string invitationHash)")
  fmt.Fprintln(os.Stderr, "  void invalidateUserTicket()")
  fmt.Fprintln(os.Stderr, "  void inviteFriendsBySms( phoneNumberList)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoGroup(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoRoom(i32 reqSeq, string roomId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void inviteViaEmail(i32 reqSeq, string email, string name)")
  fmt.Fprintln(os.Stderr, "  bool isIdentityIdentifierAvailable(IdentityProvider provider, string identifier)")
  fmt.Fprintln(os.Stderr, "  bool isUseridAvailable(string userid)")
  fmt.Fprintln(os.Stderr, "  void kickoutFromGroup(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void leaveGroup(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  void leaveRoom(i32 reqSeq, string roomId)")
  fmt.Fprintln(os.Stderr, "  string loginWithIdentityCredential(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)")
  fmt.Fprintln(os.Stderr, "  LoginResult loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)")
  fmt.Fprintln(os.Stderr, "  string loginWithVerifier(string verifier)")
  fmt.Fprintln(os.Stderr, "  LoginResult loginWithVerifierForCerificate(string verifier)")
  fmt.Fprintln(os.Stderr, "  LoginResult loginWithVerifierForCertificate(string verifier)")
  fmt.Fprintln(os.Stderr, "  void logout()")
  fmt.Fprintln(os.Stderr, "  void logoutSession(string tokenKey)")
  fmt.Fprintln(os.Stderr, "  void noop()")
  fmt.Fprintln(os.Stderr, "  void notifiedRedirect( paramMap)")
  fmt.Fprintln(os.Stderr, "   notifyBuddyOnAir(i32 seq,  receiverMids)")
  fmt.Fprintln(os.Stderr, "  void notifyIndividualEvent(NotificationStatus notificationStatus,  receiverMids)")
  fmt.Fprintln(os.Stderr, "  void notifyInstalled(string udidHash, string applicationTypeWithExtensions)")
  fmt.Fprintln(os.Stderr, "  void notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions)")
  fmt.Fprintln(os.Stderr, "  void notifySleep(i64 lastRev, i32 badge)")
  fmt.Fprintln(os.Stderr, "  void notifyUpdated(i64 lastRev, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  string openProximityMatch(Location location)")
  fmt.Fprintln(os.Stderr, "  string registerBuddyUser(string buddyId, string registrarPassword)")
  fmt.Fprintln(os.Stderr, "  void registerBuddyUserid(i32 seq, string userid)")
  fmt.Fprintln(os.Stderr, "  string registerDevice(string sessionId)")
  fmt.Fprintln(os.Stderr, "  string registerDeviceWithIdentityCredential(string sessionId, IdentityProvider provider, string identifier, string verifier)")
  fmt.Fprintln(os.Stderr, "  string registerDeviceWithoutPhoneNumber(string region, string udidHash, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  string registerDeviceWithoutPhoneNumberWithIdentityCredential(string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid)")
  fmt.Fprintln(os.Stderr, "  bool registerUserid(i32 reqSeq, string userid)")
  fmt.Fprintln(os.Stderr, "  string registerWapDevice(string invitationHash, string guidHash, string email, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  string registerWithExistingSnsIdAndIdentityCredential(IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  RegisterWithSnsIdResult registerWithSnsId(SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid)")
  fmt.Fprintln(os.Stderr, "  string registerWithSnsIdAndIdentityCredential(SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  string reissueDeviceCredential()")
  fmt.Fprintln(os.Stderr, "  string reissueUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "  void rejectGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  void releaseSession()")
  fmt.Fprintln(os.Stderr, "  void removeAllMessages(i32 seq, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "  void removeBuddyLocation(string mid, i32 index)")
  fmt.Fprintln(os.Stderr, "  bool removeMessage(string messageId)")
  fmt.Fprintln(os.Stderr, "  bool removeMessageFromMyHome(string messageId)")
  fmt.Fprintln(os.Stderr, "  string removeSnsId(SnsIdType snsIdType)")
  fmt.Fprintln(os.Stderr, "  void report(i64 syncOpRevision, SyncCategory category, string report)")
  fmt.Fprintln(os.Stderr, "   reportContacts(i64 syncOpRevision, SyncCategory category,  contactReports, SyncActionType actionType)")
  fmt.Fprintln(os.Stderr, "  void reportGroups(i64 syncOpRevision,  groups)")
  fmt.Fprintln(os.Stderr, "  void reportProfile(i64 syncOpRevision, Profile profile)")
  fmt.Fprintln(os.Stderr, "  void reportRooms(i64 syncOpRevision,  rooms)")
  fmt.Fprintln(os.Stderr, "  void reportSettings(i64 syncOpRevision, Settings settings)")
  fmt.Fprintln(os.Stderr, "  void reportSpammer(string spammerMid,  spammerReasons,  spamMessageIds)")
  fmt.Fprintln(os.Stderr, "  void requestAccountPasswordReset(IdentityProvider provider, string identifier, string locale)")
  fmt.Fprintln(os.Stderr, "  EmailConfirmationSession requestEmailConfirmation(EmailConfirmation emailConfirmation)")
  fmt.Fprintln(os.Stderr, "  void requestIdentityUnbind(IdentityProvider provider, string identifier)")
  fmt.Fprintln(os.Stderr, "  EmailConfirmationSession resendEmailConfirmation(string verifier)")
  fmt.Fprintln(os.Stderr, "  void resendPinCode(string sessionId)")
  fmt.Fprintln(os.Stderr, "  void resendPinCodeBySMS(string sessionId)")
  fmt.Fprintln(os.Stderr, "  void sendChatChecked(i32 seq, string consumer, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "  void sendChatRemoved(i32 seq, string consumer, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "   sendContentPreviewUpdated(i32 esq, string messageId,  receiverMids)")
  fmt.Fprintln(os.Stderr, "  void sendContentReceipt(i32 seq, string consumer, string messageId)")
  fmt.Fprintln(os.Stderr, "  void sendDummyPush()")
  fmt.Fprintln(os.Stderr, "  Message sendEvent(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void sendMessageIgnored(i32 seq, string consumer,  messageIds)")
  fmt.Fprintln(os.Stderr, "  void sendMessageReceipt(i32 seq, string consumer,  messageIds)")
  fmt.Fprintln(os.Stderr, "  Message sendMessageToMyHome(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void setBuddyLocation(string mid, i32 index, Geolocation location)")
  fmt.Fprintln(os.Stderr, "  void setIdentityCredential(IdentityProvider provider, string identifier, string verifier)")
  fmt.Fprintln(os.Stderr, "  void setNotificationsEnabled(i32 reqSeq, MIDType type, string target, bool enablement)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData startUpdateVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData startVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale)")
  fmt.Fprintln(os.Stderr, "  void storeUpdateProfileAttribute(i32 seq, ProfileAttribute profileAttribute, string value)")
  fmt.Fprintln(os.Stderr, "   syncContactBySnsIds(i32 reqSeq,  modifications)")
  fmt.Fprintln(os.Stderr, "   syncContacts(i32 reqSeq,  localContacts)")
  fmt.Fprintln(os.Stderr, "  Message trySendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void unblockContact(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void unblockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  string unregisterUserAndDevice()")
  fmt.Fprintln(os.Stderr, "  void updateApnsDeviceToken(string apnsDeviceToken)")
  fmt.Fprintln(os.Stderr, "  void updateBuddySetting(string key, string value)")
  fmt.Fprintln(os.Stderr, "  void updateC2DMRegistrationId(string registrationId)")
  fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, ContactSetting flag, string value)")
  fmt.Fprintln(os.Stderr, "  void updateCustomModeSettings(CustomMode customMode,  paramMap)")
  fmt.Fprintln(os.Stderr, "  void updateDeviceInfo(string deviceUid, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  void updateGroup(i32 reqSeq, Group group)")
  fmt.Fprintln(os.Stderr, "  void updateNotificationToken(NotificationType type, string token)")
  fmt.Fprintln(os.Stderr, "  void updateNotificationTokenWithBytes(NotificationType type, string token)")
  fmt.Fprintln(os.Stderr, "  void updateProfile(i32 reqSeq, Profile profile)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttribute(i32 reqSeq, ProfileAttribute attr, string value)")
  fmt.Fprintln(os.Stderr, "  void updateRegion(string region)")
  fmt.Fprintln(os.Stderr, "  void updateSettings(i32 reqSeq, Settings settings)")
  fmt.Fprintln(os.Stderr, "  i32 updateSettings2(i32 reqSeq, Settings settings)")
  fmt.Fprintln(os.Stderr, "  void updateSettingsAttribute(i32 reqSeq, SettingsAttribute attr, string value)")
  fmt.Fprintln(os.Stderr, "  i32 updateSettingsAttributes(i32 reqSeq, i32 attrBitset, Settings settings)")
  fmt.Fprintln(os.Stderr, "  void verifyIdentityCredential(IdentityProvider identityProvider, string identifier, string password)")
  fmt.Fprintln(os.Stderr, "  UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential)")
  fmt.Fprintln(os.Stderr, "  VerificationResult verifyPhone(string sessionId, string pinCode, string udidHash)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcode(string verifier, string pinCode)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := line.NewTalkServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "acceptGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AcceptGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err1403 := (strconv.Atoi(flag.Arg(1)))
    if err1403 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AcceptGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "acceptProximityMatches":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AcceptProximityMatches requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1406 := flag.Arg(2)
    mbTrans1407 := thrift.NewTMemoryBufferLen(len(arg1406))
    defer mbTrans1407.Close()
    _, err1408 := mbTrans1407.WriteString(arg1406)
    if err1408 != nil { 
      Usage()
      return
    }
    factory1409 := thrift.NewTJSONProtocolFactory()
    jsProt1410 := factory1409.GetProtocol(mbTrans1407)
    containerStruct1 := line.NewTalkServiceAcceptProximityMatchesArgs()
    err1411 := containerStruct1.ReadField2(jsProt1410)
    if err1411 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Ids
    value1 := argvalue1
    fmt.Print(client.AcceptProximityMatches(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "acquireCallRoute":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireCallRoute requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.AcquireCallRoute(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquireCallTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireCallTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.AcquireCallTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquireEncryptedAccessToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireEncryptedAccessToken requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.FeatureType(tmp0)
    value0 := argvalue0
    fmt.Print(client.AcquireEncryptedAccessToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "addSnsId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddSnsId requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AddSnsId(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blockContact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockContact requires 2 args")
      flag.Usage()
    }
    tmp0, err1415 := (strconv.Atoi(flag.Arg(1)))
    if err1415 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockContact(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err1417 := (strconv.Atoi(flag.Arg(1)))
    if err1417 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "cancelGroupInvitation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CancelGroupInvitation requires 3 args")
      flag.Usage()
    }
    tmp0, err1419 := (strconv.Atoi(flag.Arg(1)))
    if err1419 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1421 := flag.Arg(3)
    mbTrans1422 := thrift.NewTMemoryBufferLen(len(arg1421))
    defer mbTrans1422.Close()
    _, err1423 := mbTrans1422.WriteString(arg1421)
    if err1423 != nil { 
      Usage()
      return
    }
    factory1424 := thrift.NewTJSONProtocolFactory()
    jsProt1425 := factory1424.GetProtocol(mbTrans1422)
    containerStruct2 := line.NewTalkServiceCancelGroupInvitationArgs()
    err1426 := containerStruct2.ReadField3(jsProt1425)
    if err1426 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CancelGroupInvitation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "changeVerificationMethod":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ChangeVerificationMethod requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.VerificationMethod(tmp1)
    value1 := argvalue1
    fmt.Print(client.ChangeVerificationMethod(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "clearIdentityCredential":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ClearIdentityCredential requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ClearIdentityCredential(context.Background()))
    fmt.Print("\n")
    break
  case "clearMessageBox":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ClearMessageBox requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ClearMessageBox(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "closeProximityMatch":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CloseProximityMatch requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CloseProximityMatch(context.Background(), value0))
    fmt.Print("\n")
    break
  case "commitSendMessage":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CommitSendMessage requires 3 args")
      flag.Usage()
    }
    tmp0, err1431 := (strconv.Atoi(flag.Arg(1)))
    if err1431 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1433 := flag.Arg(3)
    mbTrans1434 := thrift.NewTMemoryBufferLen(len(arg1433))
    defer mbTrans1434.Close()
    _, err1435 := mbTrans1434.WriteString(arg1433)
    if err1435 != nil { 
      Usage()
      return
    }
    factory1436 := thrift.NewTJSONProtocolFactory()
    jsProt1437 := factory1436.GetProtocol(mbTrans1434)
    containerStruct2 := line.NewTalkServiceCommitSendMessageArgs()
    err1438 := containerStruct2.ReadField3(jsProt1437)
    if err1438 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ReceiverMids
    value2 := argvalue2
    fmt.Print(client.CommitSendMessage(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "commitSendMessages":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CommitSendMessages requires 3 args")
      flag.Usage()
    }
    tmp0, err1439 := (strconv.Atoi(flag.Arg(1)))
    if err1439 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1440 := flag.Arg(2)
    mbTrans1441 := thrift.NewTMemoryBufferLen(len(arg1440))
    defer mbTrans1441.Close()
    _, err1442 := mbTrans1441.WriteString(arg1440)
    if err1442 != nil { 
      Usage()
      return
    }
    factory1443 := thrift.NewTJSONProtocolFactory()
    jsProt1444 := factory1443.GetProtocol(mbTrans1441)
    containerStruct1 := line.NewTalkServiceCommitSendMessagesArgs()
    err1445 := containerStruct1.ReadField2(jsProt1444)
    if err1445 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.MessageIds
    value1 := argvalue1
    arg1446 := flag.Arg(3)
    mbTrans1447 := thrift.NewTMemoryBufferLen(len(arg1446))
    defer mbTrans1447.Close()
    _, err1448 := mbTrans1447.WriteString(arg1446)
    if err1448 != nil { 
      Usage()
      return
    }
    factory1449 := thrift.NewTJSONProtocolFactory()
    jsProt1450 := factory1449.GetProtocol(mbTrans1447)
    containerStruct2 := line.NewTalkServiceCommitSendMessagesArgs()
    err1451 := containerStruct2.ReadField3(jsProt1450)
    if err1451 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ReceiverMids
    value2 := argvalue2
    fmt.Print(client.CommitSendMessages(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "commitUpdateProfile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CommitUpdateProfile requires 3 args")
      flag.Usage()
    }
    tmp0, err1452 := (strconv.Atoi(flag.Arg(1)))
    if err1452 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1453 := flag.Arg(2)
    mbTrans1454 := thrift.NewTMemoryBufferLen(len(arg1453))
    defer mbTrans1454.Close()
    _, err1455 := mbTrans1454.WriteString(arg1453)
    if err1455 != nil { 
      Usage()
      return
    }
    factory1456 := thrift.NewTJSONProtocolFactory()
    jsProt1457 := factory1456.GetProtocol(mbTrans1454)
    containerStruct1 := line.NewTalkServiceCommitUpdateProfileArgs()
    err1458 := containerStruct1.ReadField2(jsProt1457)
    if err1458 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Attrs
    value1 := argvalue1
    arg1459 := flag.Arg(3)
    mbTrans1460 := thrift.NewTMemoryBufferLen(len(arg1459))
    defer mbTrans1460.Close()
    _, err1461 := mbTrans1460.WriteString(arg1459)
    if err1461 != nil { 
      Usage()
      return
    }
    factory1462 := thrift.NewTJSONProtocolFactory()
    jsProt1463 := factory1462.GetProtocol(mbTrans1460)
    containerStruct2 := line.NewTalkServiceCommitUpdateProfileArgs()
    err1464 := containerStruct2.ReadField3(jsProt1463)
    if err1464 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ReceiverMids
    value2 := argvalue2
    fmt.Print(client.CommitUpdateProfile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "confirmEmail":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ConfirmEmail requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ConfirmEmail(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CreateGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err1467 := (strconv.Atoi(flag.Arg(1)))
    if err1467 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1469 := flag.Arg(3)
    mbTrans1470 := thrift.NewTMemoryBufferLen(len(arg1469))
    defer mbTrans1470.Close()
    _, err1471 := mbTrans1470.WriteString(arg1469)
    if err1471 != nil { 
      Usage()
      return
    }
    factory1472 := thrift.NewTJSONProtocolFactory()
    jsProt1473 := factory1472.GetProtocol(mbTrans1470)
    containerStruct2 := line.NewTalkServiceCreateGroupArgs()
    err1474 := containerStruct2.ReadField3(jsProt1473)
    if err1474 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CreateGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "createQrcodeBase64Image":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "CreateQrcodeBase64Image requires 7 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1477 := (strconv.Atoi(flag.Arg(3)))
    if err1477 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    tmp3, err1478 := (strconv.Atoi(flag.Arg(4)))
    if err1478 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err1479 := (strconv.Atoi(flag.Arg(5)))
    if err1479 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    tmp5, err1480 := (strconv.Atoi(flag.Arg(6)))
    if err1480 != nil {
      Usage()
      return
    }
    argvalue5 := int32(tmp5)
    value5 := argvalue5
    tmp6, err1481 := (strconv.Atoi(flag.Arg(7)))
    if err1481 != nil {
      Usage()
      return
    }
    argvalue6 := int32(tmp6)
    value6 := argvalue6
    fmt.Print(client.CreateQrcodeBase64Image(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "createRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err1482 := (strconv.Atoi(flag.Arg(1)))
    if err1482 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1483 := flag.Arg(2)
    mbTrans1484 := thrift.NewTMemoryBufferLen(len(arg1483))
    defer mbTrans1484.Close()
    _, err1485 := mbTrans1484.WriteString(arg1483)
    if err1485 != nil { 
      Usage()
      return
    }
    factory1486 := thrift.NewTJSONProtocolFactory()
    jsProt1487 := factory1486.GetProtocol(mbTrans1484)
    containerStruct1 := line.NewTalkServiceCreateRoomArgs()
    err1488 := containerStruct1.ReadField2(jsProt1487)
    if err1488 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ContactIds
    value1 := argvalue1
    fmt.Print(client.CreateRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createSession":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CreateSession requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CreateSession(context.Background()))
    fmt.Print("\n")
    break
  case "fetchAnnouncements":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FetchAnnouncements requires 1 args")
      flag.Usage()
    }
    tmp0, err1489 := (strconv.Atoi(flag.Arg(1)))
    if err1489 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.FetchAnnouncements(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FetchMessages requires 2 args")
      flag.Usage()
    }
    argvalue0, err1490 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1490 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1491 := (strconv.Atoi(flag.Arg(2)))
    if err1491 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.FetchMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "fetchOperations":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FetchOperations requires 2 args")
      flag.Usage()
    }
    argvalue0, err1492 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1492 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1493 := (strconv.Atoi(flag.Arg(2)))
    if err1493 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.FetchOperations(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "fetchOps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
      flag.Usage()
    }
    argvalue0, err1494 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1494 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1495 := (strconv.Atoi(flag.Arg(2)))
    if err1495 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2, err1496 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1496 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err1497 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1497 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FetchOps(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findAndAddContactsByEmail":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByEmail requires 2 args")
      flag.Usage()
    }
    tmp0, err1498 := (strconv.Atoi(flag.Arg(1)))
    if err1498 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1499 := flag.Arg(2)
    mbTrans1500 := thrift.NewTMemoryBufferLen(len(arg1499))
    defer mbTrans1500.Close()
    _, err1501 := mbTrans1500.WriteString(arg1499)
    if err1501 != nil { 
      Usage()
      return
    }
    factory1502 := thrift.NewTJSONProtocolFactory()
    jsProt1503 := factory1502.GetProtocol(mbTrans1500)
    containerStruct1 := line.NewTalkServiceFindAndAddContactsByEmailArgs()
    err1504 := containerStruct1.ReadField2(jsProt1503)
    if err1504 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Emails
    value1 := argvalue1
    fmt.Print(client.FindAndAddContactsByEmail(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByMid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 2 args")
      flag.Usage()
    }
    tmp0, err1505 := (strconv.Atoi(flag.Arg(1)))
    if err1505 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.FindAndAddContactsByMid(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByPhone":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByPhone requires 2 args")
      flag.Usage()
    }
    tmp0, err1507 := (strconv.Atoi(flag.Arg(1)))
    if err1507 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1508 := flag.Arg(2)
    mbTrans1509 := thrift.NewTMemoryBufferLen(len(arg1508))
    defer mbTrans1509.Close()
    _, err1510 := mbTrans1509.WriteString(arg1508)
    if err1510 != nil { 
      Usage()
      return
    }
    factory1511 := thrift.NewTJSONProtocolFactory()
    jsProt1512 := factory1511.GetProtocol(mbTrans1509)
    containerStruct1 := line.NewTalkServiceFindAndAddContactsByPhoneArgs()
    err1513 := containerStruct1.ReadField2(jsProt1512)
    if err1513 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Phones
    value1 := argvalue1
    fmt.Print(client.FindAndAddContactsByPhone(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByUserid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByUserid requires 2 args")
      flag.Usage()
    }
    tmp0, err1514 := (strconv.Atoi(flag.Arg(1)))
    if err1514 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.FindAndAddContactsByUserid(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findContactByUserid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactByUserTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactsByEmail":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactsByEmail requires 1 args")
      flag.Usage()
    }
    arg1518 := flag.Arg(1)
    mbTrans1519 := thrift.NewTMemoryBufferLen(len(arg1518))
    defer mbTrans1519.Close()
    _, err1520 := mbTrans1519.WriteString(arg1518)
    if err1520 != nil { 
      Usage()
      return
    }
    factory1521 := thrift.NewTJSONProtocolFactory()
    jsProt1522 := factory1521.GetProtocol(mbTrans1519)
    containerStruct0 := line.NewTalkServiceFindContactsByEmailArgs()
    err1523 := containerStruct0.ReadField1(jsProt1522)
    if err1523 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Emails
    value0 := argvalue0
    fmt.Print(client.FindContactsByEmail(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactsByPhone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactsByPhone requires 1 args")
      flag.Usage()
    }
    arg1524 := flag.Arg(1)
    mbTrans1525 := thrift.NewTMemoryBufferLen(len(arg1524))
    defer mbTrans1525.Close()
    _, err1526 := mbTrans1525.WriteString(arg1524)
    if err1526 != nil { 
      Usage()
      return
    }
    factory1527 := thrift.NewTJSONProtocolFactory()
    jsProt1528 := factory1527.GetProtocol(mbTrans1525)
    containerStruct0 := line.NewTalkServiceFindContactsByPhoneArgs()
    err1529 := containerStruct0.ReadField1(jsProt1528)
    if err1529 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Phones
    value0 := argvalue0
    fmt.Print(client.FindContactsByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findSnsIdUserStatus":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindSnsIdUserStatus requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindSnsIdUserStatus(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "finishUpdateVerification":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FinishUpdateVerification requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FinishUpdateVerification(context.Background(), value0))
    fmt.Print("\n")
    break
  case "generateUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GenerateUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err1533 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1533 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1534 := (strconv.Atoi(flag.Arg(2)))
    if err1534 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GenerateUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAcceptedProximityMatches":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAcceptedProximityMatches requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAcceptedProximityMatches(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getActiveBuddySubscriberIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetActiveBuddySubscriberIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetActiveBuddySubscriberIds(context.Background()))
    fmt.Print("\n")
    break
  case "getAllContactIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllContactIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllContactIds(context.Background()))
    fmt.Print("\n")
    break
  case "getAuthQrcode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAuthQrcode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAuthQrcode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getBlockedContactIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockedContactIds(context.Background()))
    fmt.Print("\n")
    break
  case "getBlockedContactIdsByRange":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIdsByRange requires 2 args")
      flag.Usage()
    }
    tmp0, err1538 := (strconv.Atoi(flag.Arg(1)))
    if err1538 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1539 := (strconv.Atoi(flag.Arg(2)))
    if err1539 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetBlockedContactIdsByRange(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getBlockedRecommendationIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockedRecommendationIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockedRecommendationIds(context.Background()))
    fmt.Print("\n")
    break
  case "getBuddyBlockerIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBuddyBlockerIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBuddyBlockerIds(context.Background()))
    fmt.Print("\n")
    break
  case "getBuddyLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetBuddyLocation requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err1541 := (strconv.Atoi(flag.Arg(2)))
    if err1541 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetBuddyLocation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getCompactContactsModifiedSince":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactContactsModifiedSince requires 1 args")
      flag.Usage()
    }
    argvalue0, err1542 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1542 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCompactContactsModifiedSince(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCompactGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCompactGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCompactRoom":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactRoom requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCompactRoom(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
      flag.Usage()
    }
    arg1546 := flag.Arg(1)
    mbTrans1547 := thrift.NewTMemoryBufferLen(len(arg1546))
    defer mbTrans1547.Close()
    _, err1548 := mbTrans1547.WriteString(arg1546)
    if err1548 != nil { 
      Usage()
      return
    }
    factory1549 := thrift.NewTJSONProtocolFactory()
    jsProt1550 := factory1549.GetProtocol(mbTrans1547)
    containerStruct0 := line.NewTalkServiceGetContactsArgs()
    err1551 := containerStruct0.ReadField1(jsProt1550)
    if err1551 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCountryWithRequestIp":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCountryWithRequestIp requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCountryWithRequestIp(context.Background()))
    fmt.Print("\n")
    break
  case "getFavoriteMids":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetFavoriteMids requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetFavoriteMids(context.Background()))
    fmt.Print("\n")
    break
  case "getGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupIdsInvited":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetGroupIdsInvited requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetGroupIdsInvited(context.Background()))
    fmt.Print("\n")
    break
  case "getGroupIdsJoined":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetGroupIdsJoined requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetGroupIdsJoined(context.Background()))
    fmt.Print("\n")
    break
  case "getGroups":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroups requires 1 args")
      flag.Usage()
    }
    arg1553 := flag.Arg(1)
    mbTrans1554 := thrift.NewTMemoryBufferLen(len(arg1553))
    defer mbTrans1554.Close()
    _, err1555 := mbTrans1554.WriteString(arg1553)
    if err1555 != nil { 
      Usage()
      return
    }
    factory1556 := thrift.NewTJSONProtocolFactory()
    jsProt1557 := factory1556.GetProtocol(mbTrans1554)
    containerStruct0 := line.NewTalkServiceGetGroupsArgs()
    err1558 := containerStruct0.ReadField1(jsProt1557)
    if err1558 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.GroupIds
    value0 := argvalue0
    fmt.Print(client.GetGroups(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getHiddenContactMids":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetHiddenContactMids requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetHiddenContactMids(context.Background()))
    fmt.Print("\n")
    break
  case "getIdentityIdentifier":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetIdentityIdentifier requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetIdentityIdentifier(context.Background()))
    fmt.Print("\n")
    break
  case "getLastAnnouncementIndex":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetLastAnnouncementIndex requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetLastAnnouncementIndex(context.Background()))
    fmt.Print("\n")
    break
  case "getLastOpRevision":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetLastOpRevision requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetLastOpRevision(context.Background()))
    fmt.Print("\n")
    break
  case "getMessageBox":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetMessageBox requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1561 := (strconv.Atoi(flag.Arg(3)))
    if err1561 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMessageBox(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getMessageBoxCompactWrapUp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxCompactWrapUp requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMessageBoxCompactWrapUp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getMessageBoxCompactWrapUpList":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxCompactWrapUpList requires 2 args")
      flag.Usage()
    }
    tmp0, err1563 := (strconv.Atoi(flag.Arg(1)))
    if err1563 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1564 := (strconv.Atoi(flag.Arg(2)))
    if err1564 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageBoxCompactWrapUpList(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMessageBoxList":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxList requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err1566 := (strconv.Atoi(flag.Arg(2)))
    if err1566 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageBoxList(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMessageBoxListByStatus":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxListByStatus requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err1568 := (strconv.Atoi(flag.Arg(2)))
    if err1568 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err1569 := (strconv.Atoi(flag.Arg(3)))
    if err1569 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMessageBoxListByStatus(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getMessageBoxWrapUp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxWrapUp requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMessageBoxWrapUp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getMessageBoxWrapUpList":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxWrapUpList requires 2 args")
      flag.Usage()
    }
    tmp0, err1571 := (strconv.Atoi(flag.Arg(1)))
    if err1571 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1572 := (strconv.Atoi(flag.Arg(2)))
    if err1572 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageBoxWrapUpList(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMessagesBySequenceNumber":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetMessagesBySequenceNumber requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err1575 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1575 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err1576 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1576 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.GetMessagesBySequenceNumber(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getNextMessages":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNextMessages requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err1578 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1578 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err1579 := (strconv.Atoi(flag.Arg(3)))
    if err1579 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNextMessages(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getNotificationPolicy":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNotificationPolicy requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.CarrierCode(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetNotificationPolicy(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPreviousMessages":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPreviousMessages requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err1581 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1581 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err1582 := (strconv.Atoi(flag.Arg(3)))
    if err1582 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPreviousMessages(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getProfile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetProfile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetProfile(context.Background()))
    fmt.Print("\n")
    break
  case "getProximityMatchCandidateList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProximityMatchCandidateList requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetProximityMatchCandidateList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getProximityMatchCandidates":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProximityMatchCandidates requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetProximityMatchCandidates(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRecentMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetRecentMessages requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err1586 := (strconv.Atoi(flag.Arg(2)))
    if err1586 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetRecentMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRecommendationIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRecommendationIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRecommendationIds(context.Background()))
    fmt.Print("\n")
    break
  case "getRoom":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoom requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetRoom(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRSAKeyInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRSAKeyInfo requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRSAKeyInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getServerTime":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetServerTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetServerTime(context.Background()))
    fmt.Print("\n")
    break
  case "getSessions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSessions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSessions(context.Background()))
    fmt.Print("\n")
    break
  case "getSettings":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSettings requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSettings(context.Background()))
    fmt.Print("\n")
    break
  case "getSettingsAttributes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettingsAttributes requires 1 args")
      flag.Usage()
    }
    tmp0, err1588 := (strconv.Atoi(flag.Arg(1)))
    if err1588 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSettingsAttributes(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSystemConfiguration":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSystemConfiguration requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSystemConfiguration(context.Background()))
    fmt.Print("\n")
    break
  case "getUserTicket":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserTicket requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserTicket(context.Background()))
    fmt.Print("\n")
    break
  case "getWapInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetWapInvitation requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetWapInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "invalidateUserTicket":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "InvalidateUserTicket requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.InvalidateUserTicket(context.Background()))
    fmt.Print("\n")
    break
  case "inviteFriendsBySms":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteFriendsBySms requires 1 args")
      flag.Usage()
    }
    arg1590 := flag.Arg(1)
    mbTrans1591 := thrift.NewTMemoryBufferLen(len(arg1590))
    defer mbTrans1591.Close()
    _, err1592 := mbTrans1591.WriteString(arg1590)
    if err1592 != nil { 
      Usage()
      return
    }
    factory1593 := thrift.NewTJSONProtocolFactory()
    jsProt1594 := factory1593.GetProtocol(mbTrans1591)
    containerStruct0 := line.NewTalkServiceInviteFriendsBySmsArgs()
    err1595 := containerStruct0.ReadField1(jsProt1594)
    if err1595 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PhoneNumberList
    value0 := argvalue0
    fmt.Print(client.InviteFriendsBySms(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err1596 := (strconv.Atoi(flag.Arg(1)))
    if err1596 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1598 := flag.Arg(3)
    mbTrans1599 := thrift.NewTMemoryBufferLen(len(arg1598))
    defer mbTrans1599.Close()
    _, err1600 := mbTrans1599.WriteString(arg1598)
    if err1600 != nil { 
      Usage()
      return
    }
    factory1601 := thrift.NewTJSONProtocolFactory()
    jsProt1602 := factory1601.GetProtocol(mbTrans1599)
    containerStruct2 := line.NewTalkServiceInviteIntoGroupArgs()
    err1603 := containerStruct2.ReadField3(jsProt1602)
    if err1603 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "inviteIntoRoom":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoRoom requires 3 args")
      flag.Usage()
    }
    tmp0, err1604 := (strconv.Atoi(flag.Arg(1)))
    if err1604 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1606 := flag.Arg(3)
    mbTrans1607 := thrift.NewTMemoryBufferLen(len(arg1606))
    defer mbTrans1607.Close()
    _, err1608 := mbTrans1607.WriteString(arg1606)
    if err1608 != nil { 
      Usage()
      return
    }
    factory1609 := thrift.NewTJSONProtocolFactory()
    jsProt1610 := factory1609.GetProtocol(mbTrans1607)
    containerStruct2 := line.NewTalkServiceInviteIntoRoomArgs()
    err1611 := containerStruct2.ReadField3(jsProt1610)
    if err1611 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoRoom(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "inviteViaEmail":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteViaEmail requires 3 args")
      flag.Usage()
    }
    tmp0, err1612 := (strconv.Atoi(flag.Arg(1)))
    if err1612 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.InviteViaEmail(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "isIdentityIdentifierAvailable":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "IsIdentityIdentifierAvailable requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.IsIdentityIdentifierAvailable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "isUseridAvailable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsUseridAvailable requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsUseridAvailable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "kickoutFromGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "KickoutFromGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err1617 := (strconv.Atoi(flag.Arg(1)))
    if err1617 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1619 := flag.Arg(3)
    mbTrans1620 := thrift.NewTMemoryBufferLen(len(arg1619))
    defer mbTrans1620.Close()
    _, err1621 := mbTrans1620.WriteString(arg1619)
    if err1621 != nil { 
      Usage()
      return
    }
    factory1622 := thrift.NewTJSONProtocolFactory()
    jsProt1623 := factory1622.GetProtocol(mbTrans1620)
    containerStruct2 := line.NewTalkServiceKickoutFromGroupArgs()
    err1624 := containerStruct2.ReadField3(jsProt1623)
    if err1624 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.KickoutFromGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "leaveGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err1625 := (strconv.Atoi(flag.Arg(1)))
    if err1625 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "leaveRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err1627 := (strconv.Atoi(flag.Arg(1)))
    if err1627 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "loginWithIdentityCredential":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "LoginWithIdentityCredential requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.LoginWithIdentityCredential(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "loginWithIdentityCredentialForCertificate":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "LoginWithIdentityCredentialForCertificate requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.LoginWithIdentityCredentialForCertificate(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "loginWithVerifier":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginWithVerifier requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.LoginWithVerifier(context.Background(), value0))
    fmt.Print("\n")
    break
  case "loginWithVerifierForCerificate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginWithVerifierForCerificate requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.LoginWithVerifierForCerificate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "loginWithVerifierForCertificate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginWithVerifierForCertificate requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.LoginWithVerifierForCertificate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "logout":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Logout requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Logout(context.Background()))
    fmt.Print("\n")
    break
  case "logoutSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LogoutSession requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.LogoutSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "noop":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Noop requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Noop(context.Background()))
    fmt.Print("\n")
    break
  case "notifiedRedirect":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "NotifiedRedirect requires 1 args")
      flag.Usage()
    }
    arg1645 := flag.Arg(1)
    mbTrans1646 := thrift.NewTMemoryBufferLen(len(arg1645))
    defer mbTrans1646.Close()
    _, err1647 := mbTrans1646.WriteString(arg1645)
    if err1647 != nil { 
      Usage()
      return
    }
    factory1648 := thrift.NewTJSONProtocolFactory()
    jsProt1649 := factory1648.GetProtocol(mbTrans1646)
    containerStruct0 := line.NewTalkServiceNotifiedRedirectArgs()
    err1650 := containerStruct0.ReadField1(jsProt1649)
    if err1650 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ParamMap
    value0 := argvalue0
    fmt.Print(client.NotifiedRedirect(context.Background(), value0))
    fmt.Print("\n")
    break
  case "notifyBuddyOnAir":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyBuddyOnAir requires 2 args")
      flag.Usage()
    }
    tmp0, err1651 := (strconv.Atoi(flag.Arg(1)))
    if err1651 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1652 := flag.Arg(2)
    mbTrans1653 := thrift.NewTMemoryBufferLen(len(arg1652))
    defer mbTrans1653.Close()
    _, err1654 := mbTrans1653.WriteString(arg1652)
    if err1654 != nil { 
      Usage()
      return
    }
    factory1655 := thrift.NewTJSONProtocolFactory()
    jsProt1656 := factory1655.GetProtocol(mbTrans1653)
    containerStruct1 := line.NewTalkServiceNotifyBuddyOnAirArgs()
    err1657 := containerStruct1.ReadField2(jsProt1656)
    if err1657 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ReceiverMids
    value1 := argvalue1
    fmt.Print(client.NotifyBuddyOnAir(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyIndividualEvent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyIndividualEvent requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.NotificationStatus(tmp0)
    value0 := argvalue0
    arg1658 := flag.Arg(2)
    mbTrans1659 := thrift.NewTMemoryBufferLen(len(arg1658))
    defer mbTrans1659.Close()
    _, err1660 := mbTrans1659.WriteString(arg1658)
    if err1660 != nil { 
      Usage()
      return
    }
    factory1661 := thrift.NewTJSONProtocolFactory()
    jsProt1662 := factory1661.GetProtocol(mbTrans1659)
    containerStruct1 := line.NewTalkServiceNotifyIndividualEventArgs()
    err1663 := containerStruct1.ReadField2(jsProt1662)
    if err1663 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ReceiverMids
    value1 := argvalue1
    fmt.Print(client.NotifyIndividualEvent(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyInstalled":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyInstalled requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyInstalled(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyRegistrationComplete":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyRegistrationComplete requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyRegistrationComplete(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifySleep":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifySleep requires 2 args")
      flag.Usage()
    }
    argvalue0, err1668 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1668 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1669 := (strconv.Atoi(flag.Arg(2)))
    if err1669 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.NotifySleep(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyUpdated":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyUpdated requires 2 args")
      flag.Usage()
    }
    argvalue0, err1670 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1670 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1671 := flag.Arg(2)
    mbTrans1672 := thrift.NewTMemoryBufferLen(len(arg1671))
    defer mbTrans1672.Close()
    _, err1673 := mbTrans1672.WriteString(arg1671)
    if err1673 != nil {
      Usage()
      return
    }
    factory1674 := thrift.NewTJSONProtocolFactory()
    jsProt1675 := factory1674.GetProtocol(mbTrans1672)
    argvalue1 := line.NewDeviceInfo()
    err1676 := argvalue1.Read(jsProt1675)
    if err1676 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.NotifyUpdated(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "openProximityMatch":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenProximityMatch requires 1 args")
      flag.Usage()
    }
    arg1677 := flag.Arg(1)
    mbTrans1678 := thrift.NewTMemoryBufferLen(len(arg1677))
    defer mbTrans1678.Close()
    _, err1679 := mbTrans1678.WriteString(arg1677)
    if err1679 != nil {
      Usage()
      return
    }
    factory1680 := thrift.NewTJSONProtocolFactory()
    jsProt1681 := factory1680.GetProtocol(mbTrans1678)
    argvalue0 := line.NewLocation()
    err1682 := argvalue0.Read(jsProt1681)
    if err1682 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenProximityMatch(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerBuddyUser":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterBuddyUser requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterBuddyUser(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerBuddyUserid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterBuddyUserid requires 2 args")
      flag.Usage()
    }
    tmp0, err1685 := (strconv.Atoi(flag.Arg(1)))
    if err1685 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterBuddyUserid(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerDevice":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegisterDevice requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RegisterDevice(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerDeviceWithIdentityCredential":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RegisterDeviceWithIdentityCredential requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.IdentityProvider(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.RegisterDeviceWithIdentityCredential(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "registerDeviceWithoutPhoneNumber":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RegisterDeviceWithoutPhoneNumber requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1693 := flag.Arg(3)
    mbTrans1694 := thrift.NewTMemoryBufferLen(len(arg1693))
    defer mbTrans1694.Close()
    _, err1695 := mbTrans1694.WriteString(arg1693)
    if err1695 != nil {
      Usage()
      return
    }
    factory1696 := thrift.NewTJSONProtocolFactory()
    jsProt1697 := factory1696.GetProtocol(mbTrans1694)
    argvalue2 := line.NewDeviceInfo()
    err1698 := argvalue2.Read(jsProt1697)
    if err1698 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.RegisterDeviceWithoutPhoneNumber(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "registerDeviceWithoutPhoneNumberWithIdentityCredential":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "RegisterDeviceWithoutPhoneNumberWithIdentityCredential requires 7 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1701 := flag.Arg(3)
    mbTrans1702 := thrift.NewTMemoryBufferLen(len(arg1701))
    defer mbTrans1702.Close()
    _, err1703 := mbTrans1702.WriteString(arg1701)
    if err1703 != nil {
      Usage()
      return
    }
    factory1704 := thrift.NewTJSONProtocolFactory()
    jsProt1705 := factory1704.GetProtocol(mbTrans1702)
    argvalue2 := line.NewDeviceInfo()
    err1706 := argvalue2.Read(jsProt1705)
    if err1706 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := line.IdentityProvider(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.RegisterDeviceWithoutPhoneNumberWithIdentityCredential(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "registerUserid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterUserid requires 2 args")
      flag.Usage()
    }
    tmp0, err1710 := (strconv.Atoi(flag.Arg(1)))
    if err1710 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterUserid(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerWapDevice":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RegisterWapDevice requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1715 := flag.Arg(4)
    mbTrans1716 := thrift.NewTMemoryBufferLen(len(arg1715))
    defer mbTrans1716.Close()
    _, err1717 := mbTrans1716.WriteString(arg1715)
    if err1717 != nil {
      Usage()
      return
    }
    factory1718 := thrift.NewTJSONProtocolFactory()
    jsProt1719 := factory1718.GetProtocol(mbTrans1716)
    argvalue3 := line.NewDeviceInfo()
    err1720 := argvalue3.Read(jsProt1719)
    if err1720 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.RegisterWapDevice(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "registerWithExistingSnsIdAndIdentityCredential":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RegisterWithExistingSnsIdAndIdentityCredential requires 4 args")
      flag.Usage()
    }
    arg1721 := flag.Arg(1)
    mbTrans1722 := thrift.NewTMemoryBufferLen(len(arg1721))
    defer mbTrans1722.Close()
    _, err1723 := mbTrans1722.WriteString(arg1721)
    if err1723 != nil {
      Usage()
      return
    }
    factory1724 := thrift.NewTJSONProtocolFactory()
    jsProt1725 := factory1724.GetProtocol(mbTrans1722)
    argvalue0 := line.NewIdentityCredential()
    err1726 := argvalue0.Read(jsProt1725)
    if err1726 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1729 := flag.Arg(4)
    mbTrans1730 := thrift.NewTMemoryBufferLen(len(arg1729))
    defer mbTrans1730.Close()
    _, err1731 := mbTrans1730.WriteString(arg1729)
    if err1731 != nil {
      Usage()
      return
    }
    factory1732 := thrift.NewTJSONProtocolFactory()
    jsProt1733 := factory1732.GetProtocol(mbTrans1730)
    argvalue3 := line.NewDeviceInfo()
    err1734 := argvalue3.Read(jsProt1733)
    if err1734 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.RegisterWithExistingSnsIdAndIdentityCredential(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "registerWithSnsId":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "RegisterWithSnsId requires 6 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1738 := flag.Arg(5)
    mbTrans1739 := thrift.NewTMemoryBufferLen(len(arg1738))
    defer mbTrans1739.Close()
    _, err1740 := mbTrans1739.WriteString(arg1738)
    if err1740 != nil {
      Usage()
      return
    }
    factory1741 := thrift.NewTJSONProtocolFactory()
    jsProt1742 := factory1741.GetProtocol(mbTrans1739)
    argvalue4 := line.NewDeviceInfo()
    err1743 := argvalue4.Read(jsProt1742)
    if err1743 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    fmt.Print(client.RegisterWithSnsId(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "registerWithSnsIdAndIdentityCredential":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "RegisterWithSnsIdAndIdentityCredential requires 6 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1746 := flag.Arg(3)
    mbTrans1747 := thrift.NewTMemoryBufferLen(len(arg1746))
    defer mbTrans1747.Close()
    _, err1748 := mbTrans1747.WriteString(arg1746)
    if err1748 != nil {
      Usage()
      return
    }
    factory1749 := thrift.NewTJSONProtocolFactory()
    jsProt1750 := factory1749.GetProtocol(mbTrans1747)
    argvalue2 := line.NewIdentityCredential()
    err1751 := argvalue2.Read(jsProt1750)
    if err1751 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg1754 := flag.Arg(6)
    mbTrans1755 := thrift.NewTMemoryBufferLen(len(arg1754))
    defer mbTrans1755.Close()
    _, err1756 := mbTrans1755.WriteString(arg1754)
    if err1756 != nil {
      Usage()
      return
    }
    factory1757 := thrift.NewTJSONProtocolFactory()
    jsProt1758 := factory1757.GetProtocol(mbTrans1755)
    argvalue5 := line.NewDeviceInfo()
    err1759 := argvalue5.Read(jsProt1758)
    if err1759 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    fmt.Print(client.RegisterWithSnsIdAndIdentityCredential(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "reissueDeviceCredential":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReissueDeviceCredential requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReissueDeviceCredential(context.Background()))
    fmt.Print("\n")
    break
  case "reissueUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReissueUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err1760 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1760 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1761 := (strconv.Atoi(flag.Arg(2)))
    if err1761 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.ReissueUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "rejectGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RejectGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err1762 := (strconv.Atoi(flag.Arg(1)))
    if err1762 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RejectGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "releaseSession":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReleaseSession requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReleaseSession(context.Background()))
    fmt.Print("\n")
    break
  case "removeAllMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveAllMessages requires 2 args")
      flag.Usage()
    }
    tmp0, err1764 := (strconv.Atoi(flag.Arg(1)))
    if err1764 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveAllMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeBuddyLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveBuddyLocation requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err1767 := (strconv.Atoi(flag.Arg(2)))
    if err1767 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.RemoveBuddyLocation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeMessage":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveMessage requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RemoveMessage(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeMessageFromMyHome":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveMessageFromMyHome requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RemoveMessageFromMyHome(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeSnsId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveSnsId requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveSnsId(context.Background(), value0))
    fmt.Print("\n")
    break
  case "report":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Report requires 3 args")
      flag.Usage()
    }
    argvalue0, err1770 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1770 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.SyncCategory(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.Report(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reportContacts":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "ReportContacts requires 4 args")
      flag.Usage()
    }
    argvalue0, err1772 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1772 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.SyncCategory(tmp1)
    value1 := argvalue1
    arg1773 := flag.Arg(3)
    mbTrans1774 := thrift.NewTMemoryBufferLen(len(arg1773))
    defer mbTrans1774.Close()
    _, err1775 := mbTrans1774.WriteString(arg1773)
    if err1775 != nil { 
      Usage()
      return
    }
    factory1776 := thrift.NewTJSONProtocolFactory()
    jsProt1777 := factory1776.GetProtocol(mbTrans1774)
    containerStruct2 := line.NewTalkServiceReportContactsArgs()
    err1778 := containerStruct2.ReadField3(jsProt1777)
    if err1778 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactReports
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := line.SyncActionType(tmp3)
    value3 := argvalue3
    fmt.Print(client.ReportContacts(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "reportGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportGroups requires 2 args")
      flag.Usage()
    }
    argvalue0, err1779 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1779 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1780 := flag.Arg(2)
    mbTrans1781 := thrift.NewTMemoryBufferLen(len(arg1780))
    defer mbTrans1781.Close()
    _, err1782 := mbTrans1781.WriteString(arg1780)
    if err1782 != nil { 
      Usage()
      return
    }
    factory1783 := thrift.NewTJSONProtocolFactory()
    jsProt1784 := factory1783.GetProtocol(mbTrans1781)
    containerStruct1 := line.NewTalkServiceReportGroupsArgs()
    err1785 := containerStruct1.ReadField2(jsProt1784)
    if err1785 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Groups
    value1 := argvalue1
    fmt.Print(client.ReportGroups(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reportProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportProfile requires 2 args")
      flag.Usage()
    }
    argvalue0, err1786 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1786 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1787 := flag.Arg(2)
    mbTrans1788 := thrift.NewTMemoryBufferLen(len(arg1787))
    defer mbTrans1788.Close()
    _, err1789 := mbTrans1788.WriteString(arg1787)
    if err1789 != nil {
      Usage()
      return
    }
    factory1790 := thrift.NewTJSONProtocolFactory()
    jsProt1791 := factory1790.GetProtocol(mbTrans1788)
    argvalue1 := line.NewProfile()
    err1792 := argvalue1.Read(jsProt1791)
    if err1792 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ReportProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reportRooms":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportRooms requires 2 args")
      flag.Usage()
    }
    argvalue0, err1793 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1793 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1794 := flag.Arg(2)
    mbTrans1795 := thrift.NewTMemoryBufferLen(len(arg1794))
    defer mbTrans1795.Close()
    _, err1796 := mbTrans1795.WriteString(arg1794)
    if err1796 != nil { 
      Usage()
      return
    }
    factory1797 := thrift.NewTJSONProtocolFactory()
    jsProt1798 := factory1797.GetProtocol(mbTrans1795)
    containerStruct1 := line.NewTalkServiceReportRoomsArgs()
    err1799 := containerStruct1.ReadField2(jsProt1798)
    if err1799 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Rooms
    value1 := argvalue1
    fmt.Print(client.ReportRooms(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reportSettings":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportSettings requires 2 args")
      flag.Usage()
    }
    argvalue0, err1800 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1800 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1801 := flag.Arg(2)
    mbTrans1802 := thrift.NewTMemoryBufferLen(len(arg1801))
    defer mbTrans1802.Close()
    _, err1803 := mbTrans1802.WriteString(arg1801)
    if err1803 != nil {
      Usage()
      return
    }
    factory1804 := thrift.NewTJSONProtocolFactory()
    jsProt1805 := factory1804.GetProtocol(mbTrans1802)
    argvalue1 := line.NewSettings()
    err1806 := argvalue1.Read(jsProt1805)
    if err1806 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ReportSettings(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reportSpammer":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReportSpammer requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1808 := flag.Arg(2)
    mbTrans1809 := thrift.NewTMemoryBufferLen(len(arg1808))
    defer mbTrans1809.Close()
    _, err1810 := mbTrans1809.WriteString(arg1808)
    if err1810 != nil { 
      Usage()
      return
    }
    factory1811 := thrift.NewTJSONProtocolFactory()
    jsProt1812 := factory1811.GetProtocol(mbTrans1809)
    containerStruct1 := line.NewTalkServiceReportSpammerArgs()
    err1813 := containerStruct1.ReadField2(jsProt1812)
    if err1813 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.SpammerReasons
    value1 := argvalue1
    arg1814 := flag.Arg(3)
    mbTrans1815 := thrift.NewTMemoryBufferLen(len(arg1814))
    defer mbTrans1815.Close()
    _, err1816 := mbTrans1815.WriteString(arg1814)
    if err1816 != nil { 
      Usage()
      return
    }
    factory1817 := thrift.NewTJSONProtocolFactory()
    jsProt1818 := factory1817.GetProtocol(mbTrans1815)
    containerStruct2 := line.NewTalkServiceReportSpammerArgs()
    err1819 := containerStruct2.ReadField3(jsProt1818)
    if err1819 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.SpamMessageIds
    value2 := argvalue2
    fmt.Print(client.ReportSpammer(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "requestAccountPasswordReset":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RequestAccountPasswordReset requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RequestAccountPasswordReset(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "requestEmailConfirmation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequestEmailConfirmation requires 1 args")
      flag.Usage()
    }
    arg1822 := flag.Arg(1)
    mbTrans1823 := thrift.NewTMemoryBufferLen(len(arg1822))
    defer mbTrans1823.Close()
    _, err1824 := mbTrans1823.WriteString(arg1822)
    if err1824 != nil {
      Usage()
      return
    }
    factory1825 := thrift.NewTJSONProtocolFactory()
    jsProt1826 := factory1825.GetProtocol(mbTrans1823)
    argvalue0 := line.NewEmailConfirmation()
    err1827 := argvalue0.Read(jsProt1826)
    if err1827 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequestEmailConfirmation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "requestIdentityUnbind":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RequestIdentityUnbind requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RequestIdentityUnbind(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "resendEmailConfirmation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ResendEmailConfirmation requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ResendEmailConfirmation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "resendPinCode":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ResendPinCode requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ResendPinCode(context.Background(), value0))
    fmt.Print("\n")
    break
  case "resendPinCodeBySMS":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ResendPinCodeBySMS requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ResendPinCodeBySMS(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendChatChecked":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendChatChecked requires 3 args")
      flag.Usage()
    }
    tmp0, err1832 := (strconv.Atoi(flag.Arg(1)))
    if err1832 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SendChatChecked(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendChatRemoved":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendChatRemoved requires 3 args")
      flag.Usage()
    }
    tmp0, err1835 := (strconv.Atoi(flag.Arg(1)))
    if err1835 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SendChatRemoved(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendContentPreviewUpdated":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendContentPreviewUpdated requires 3 args")
      flag.Usage()
    }
    tmp0, err1838 := (strconv.Atoi(flag.Arg(1)))
    if err1838 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1840 := flag.Arg(3)
    mbTrans1841 := thrift.NewTMemoryBufferLen(len(arg1840))
    defer mbTrans1841.Close()
    _, err1842 := mbTrans1841.WriteString(arg1840)
    if err1842 != nil { 
      Usage()
      return
    }
    factory1843 := thrift.NewTJSONProtocolFactory()
    jsProt1844 := factory1843.GetProtocol(mbTrans1841)
    containerStruct2 := line.NewTalkServiceSendContentPreviewUpdatedArgs()
    err1845 := containerStruct2.ReadField3(jsProt1844)
    if err1845 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ReceiverMids
    value2 := argvalue2
    fmt.Print(client.SendContentPreviewUpdated(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendContentReceipt":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendContentReceipt requires 3 args")
      flag.Usage()
    }
    tmp0, err1846 := (strconv.Atoi(flag.Arg(1)))
    if err1846 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SendContentReceipt(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendDummyPush":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "SendDummyPush requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.SendDummyPush(context.Background()))
    fmt.Print("\n")
    break
  case "sendEvent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendEvent requires 2 args")
      flag.Usage()
    }
    tmp0, err1849 := (strconv.Atoi(flag.Arg(1)))
    if err1849 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1850 := flag.Arg(2)
    mbTrans1851 := thrift.NewTMemoryBufferLen(len(arg1850))
    defer mbTrans1851.Close()
    _, err1852 := mbTrans1851.WriteString(arg1850)
    if err1852 != nil {
      Usage()
      return
    }
    factory1853 := thrift.NewTJSONProtocolFactory()
    jsProt1854 := factory1853.GetProtocol(mbTrans1851)
    argvalue1 := line.NewMessage()
    err1855 := argvalue1.Read(jsProt1854)
    if err1855 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendEvent(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err1856 := (strconv.Atoi(flag.Arg(1)))
    if err1856 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1857 := flag.Arg(2)
    mbTrans1858 := thrift.NewTMemoryBufferLen(len(arg1857))
    defer mbTrans1858.Close()
    _, err1859 := mbTrans1858.WriteString(arg1857)
    if err1859 != nil {
      Usage()
      return
    }
    factory1860 := thrift.NewTJSONProtocolFactory()
    jsProt1861 := factory1860.GetProtocol(mbTrans1858)
    argvalue1 := line.NewMessage()
    err1862 := argvalue1.Read(jsProt1861)
    if err1862 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendMessageIgnored":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendMessageIgnored requires 3 args")
      flag.Usage()
    }
    tmp0, err1863 := (strconv.Atoi(flag.Arg(1)))
    if err1863 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1865 := flag.Arg(3)
    mbTrans1866 := thrift.NewTMemoryBufferLen(len(arg1865))
    defer mbTrans1866.Close()
    _, err1867 := mbTrans1866.WriteString(arg1865)
    if err1867 != nil { 
      Usage()
      return
    }
    factory1868 := thrift.NewTJSONProtocolFactory()
    jsProt1869 := factory1868.GetProtocol(mbTrans1866)
    containerStruct2 := line.NewTalkServiceSendMessageIgnoredArgs()
    err1870 := containerStruct2.ReadField3(jsProt1869)
    if err1870 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.MessageIds
    value2 := argvalue2
    fmt.Print(client.SendMessageIgnored(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendMessageReceipt":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendMessageReceipt requires 3 args")
      flag.Usage()
    }
    tmp0, err1871 := (strconv.Atoi(flag.Arg(1)))
    if err1871 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1873 := flag.Arg(3)
    mbTrans1874 := thrift.NewTMemoryBufferLen(len(arg1873))
    defer mbTrans1874.Close()
    _, err1875 := mbTrans1874.WriteString(arg1873)
    if err1875 != nil { 
      Usage()
      return
    }
    factory1876 := thrift.NewTJSONProtocolFactory()
    jsProt1877 := factory1876.GetProtocol(mbTrans1874)
    containerStruct2 := line.NewTalkServiceSendMessageReceiptArgs()
    err1878 := containerStruct2.ReadField3(jsProt1877)
    if err1878 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.MessageIds
    value2 := argvalue2
    fmt.Print(client.SendMessageReceipt(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendMessageToMyHome":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessageToMyHome requires 2 args")
      flag.Usage()
    }
    tmp0, err1879 := (strconv.Atoi(flag.Arg(1)))
    if err1879 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1880 := flag.Arg(2)
    mbTrans1881 := thrift.NewTMemoryBufferLen(len(arg1880))
    defer mbTrans1881.Close()
    _, err1882 := mbTrans1881.WriteString(arg1880)
    if err1882 != nil {
      Usage()
      return
    }
    factory1883 := thrift.NewTJSONProtocolFactory()
    jsProt1884 := factory1883.GetProtocol(mbTrans1881)
    argvalue1 := line.NewMessage()
    err1885 := argvalue1.Read(jsProt1884)
    if err1885 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessageToMyHome(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "setBuddyLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SetBuddyLocation requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err1887 := (strconv.Atoi(flag.Arg(2)))
    if err1887 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    arg1888 := flag.Arg(3)
    mbTrans1889 := thrift.NewTMemoryBufferLen(len(arg1888))
    defer mbTrans1889.Close()
    _, err1890 := mbTrans1889.WriteString(arg1888)
    if err1890 != nil {
      Usage()
      return
    }
    factory1891 := thrift.NewTJSONProtocolFactory()
    jsProt1892 := factory1891.GetProtocol(mbTrans1889)
    argvalue2 := line.NewGeolocation()
    err1893 := argvalue2.Read(jsProt1892)
    if err1893 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetBuddyLocation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "setIdentityCredential":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SetIdentityCredential requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetIdentityCredential(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "setNotificationsEnabled":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetNotificationsEnabled requires 4 args")
      flag.Usage()
    }
    tmp0, err1896 := (strconv.Atoi(flag.Arg(1)))
    if err1896 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.MIDType(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.SetNotificationsEnabled(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "startUpdateVerification":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "StartUpdateVerification requires 7 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.CarrierCode(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1902 := flag.Arg(5)
    mbTrans1903 := thrift.NewTMemoryBufferLen(len(arg1902))
    defer mbTrans1903.Close()
    _, err1904 := mbTrans1903.WriteString(arg1902)
    if err1904 != nil {
      Usage()
      return
    }
    factory1905 := thrift.NewTJSONProtocolFactory()
    jsProt1906 := factory1905.GetProtocol(mbTrans1903)
    argvalue4 := line.NewDeviceInfo()
    err1907 := argvalue4.Read(jsProt1906)
    if err1907 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.StartUpdateVerification(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "startVerification":
    if flag.NArg() - 1 != 8 {
      fmt.Fprintln(os.Stderr, "StartVerification requires 8 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.CarrierCode(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1913 := flag.Arg(5)
    mbTrans1914 := thrift.NewTMemoryBufferLen(len(arg1913))
    defer mbTrans1914.Close()
    _, err1915 := mbTrans1914.WriteString(arg1913)
    if err1915 != nil {
      Usage()
      return
    }
    factory1916 := thrift.NewTJSONProtocolFactory()
    jsProt1917 := factory1916.GetProtocol(mbTrans1914)
    argvalue4 := line.NewDeviceInfo()
    err1918 := argvalue4.Read(jsProt1917)
    if err1918 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    argvalue7 := flag.Arg(8)
    value7 := argvalue7
    fmt.Print(client.StartVerification(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7))
    fmt.Print("\n")
    break
  case "storeUpdateProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "StoreUpdateProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err1922 := (strconv.Atoi(flag.Arg(1)))
    if err1922 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.ProfileAttribute(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.StoreUpdateProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "syncContactBySnsIds":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SyncContactBySnsIds requires 2 args")
      flag.Usage()
    }
    tmp0, err1924 := (strconv.Atoi(flag.Arg(1)))
    if err1924 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1925 := flag.Arg(2)
    mbTrans1926 := thrift.NewTMemoryBufferLen(len(arg1925))
    defer mbTrans1926.Close()
    _, err1927 := mbTrans1926.WriteString(arg1925)
    if err1927 != nil { 
      Usage()
      return
    }
    factory1928 := thrift.NewTJSONProtocolFactory()
    jsProt1929 := factory1928.GetProtocol(mbTrans1926)
    containerStruct1 := line.NewTalkServiceSyncContactBySnsIdsArgs()
    err1930 := containerStruct1.ReadField2(jsProt1929)
    if err1930 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Modifications
    value1 := argvalue1
    fmt.Print(client.SyncContactBySnsIds(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "syncContacts":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SyncContacts requires 2 args")
      flag.Usage()
    }
    tmp0, err1931 := (strconv.Atoi(flag.Arg(1)))
    if err1931 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1932 := flag.Arg(2)
    mbTrans1933 := thrift.NewTMemoryBufferLen(len(arg1932))
    defer mbTrans1933.Close()
    _, err1934 := mbTrans1933.WriteString(arg1932)
    if err1934 != nil { 
      Usage()
      return
    }
    factory1935 := thrift.NewTJSONProtocolFactory()
    jsProt1936 := factory1935.GetProtocol(mbTrans1933)
    containerStruct1 := line.NewTalkServiceSyncContactsArgs()
    err1937 := containerStruct1.ReadField2(jsProt1936)
    if err1937 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.LocalContacts
    value1 := argvalue1
    fmt.Print(client.SyncContacts(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "trySendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "TrySendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err1938 := (strconv.Atoi(flag.Arg(1)))
    if err1938 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1939 := flag.Arg(2)
    mbTrans1940 := thrift.NewTMemoryBufferLen(len(arg1939))
    defer mbTrans1940.Close()
    _, err1941 := mbTrans1940.WriteString(arg1939)
    if err1941 != nil {
      Usage()
      return
    }
    factory1942 := thrift.NewTJSONProtocolFactory()
    jsProt1943 := factory1942.GetProtocol(mbTrans1940)
    argvalue1 := line.NewMessage()
    err1944 := argvalue1.Read(jsProt1943)
    if err1944 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.TrySendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockContact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockContact requires 2 args")
      flag.Usage()
    }
    tmp0, err1945 := (strconv.Atoi(flag.Arg(1)))
    if err1945 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockContact(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err1947 := (strconv.Atoi(flag.Arg(1)))
    if err1947 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unregisterUserAndDevice":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "UnregisterUserAndDevice requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.UnregisterUserAndDevice(context.Background()))
    fmt.Print("\n")
    break
  case "updateApnsDeviceToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateApnsDeviceToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.UpdateApnsDeviceToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateBuddySetting":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddySetting requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateBuddySetting(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateC2DMRegistrationId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateC2DMRegistrationId requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UpdateC2DMRegistrationId(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateContactSetting":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
      flag.Usage()
    }
    tmp0, err1953 := (strconv.Atoi(flag.Arg(1)))
    if err1953 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.ContactSetting(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.UpdateContactSetting(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "updateCustomModeSettings":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateCustomModeSettings requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.CustomMode(tmp0)
    value0 := argvalue0
    arg1956 := flag.Arg(2)
    mbTrans1957 := thrift.NewTMemoryBufferLen(len(arg1956))
    defer mbTrans1957.Close()
    _, err1958 := mbTrans1957.WriteString(arg1956)
    if err1958 != nil { 
      Usage()
      return
    }
    factory1959 := thrift.NewTJSONProtocolFactory()
    jsProt1960 := factory1959.GetProtocol(mbTrans1957)
    containerStruct1 := line.NewTalkServiceUpdateCustomModeSettingsArgs()
    err1961 := containerStruct1.ReadField2(jsProt1960)
    if err1961 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ParamMap
    value1 := argvalue1
    fmt.Print(client.UpdateCustomModeSettings(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateDeviceInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateDeviceInfo requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1963 := flag.Arg(2)
    mbTrans1964 := thrift.NewTMemoryBufferLen(len(arg1963))
    defer mbTrans1964.Close()
    _, err1965 := mbTrans1964.WriteString(arg1963)
    if err1965 != nil {
      Usage()
      return
    }
    factory1966 := thrift.NewTJSONProtocolFactory()
    jsProt1967 := factory1966.GetProtocol(mbTrans1964)
    argvalue1 := line.NewDeviceInfo()
    err1968 := argvalue1.Read(jsProt1967)
    if err1968 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateDeviceInfo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err1969 := (strconv.Atoi(flag.Arg(1)))
    if err1969 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1970 := flag.Arg(2)
    mbTrans1971 := thrift.NewTMemoryBufferLen(len(arg1970))
    defer mbTrans1971.Close()
    _, err1972 := mbTrans1971.WriteString(arg1970)
    if err1972 != nil {
      Usage()
      return
    }
    factory1973 := thrift.NewTJSONProtocolFactory()
    jsProt1974 := factory1973.GetProtocol(mbTrans1971)
    argvalue1 := line.NewGroup()
    err1975 := argvalue1.Read(jsProt1974)
    if err1975 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateNotificationToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotificationToken requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.NotificationType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateNotificationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateNotificationTokenWithBytes":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotificationTokenWithBytes requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.NotificationType(tmp0)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UpdateNotificationTokenWithBytes(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfile requires 2 args")
      flag.Usage()
    }
    tmp0, err1978 := (strconv.Atoi(flag.Arg(1)))
    if err1978 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1979 := flag.Arg(2)
    mbTrans1980 := thrift.NewTMemoryBufferLen(len(arg1979))
    defer mbTrans1980.Close()
    _, err1981 := mbTrans1980.WriteString(arg1979)
    if err1981 != nil {
      Usage()
      return
    }
    factory1982 := thrift.NewTJSONProtocolFactory()
    jsProt1983 := factory1982.GetProtocol(mbTrans1980)
    argvalue1 := line.NewProfile()
    err1984 := argvalue1.Read(jsProt1983)
    if err1984 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err1985 := (strconv.Atoi(flag.Arg(1)))
    if err1985 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.ProfileAttribute(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateRegion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateRegion requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UpdateRegion(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateSettings":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateSettings requires 2 args")
      flag.Usage()
    }
    tmp0, err1988 := (strconv.Atoi(flag.Arg(1)))
    if err1988 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1989 := flag.Arg(2)
    mbTrans1990 := thrift.NewTMemoryBufferLen(len(arg1989))
    defer mbTrans1990.Close()
    _, err1991 := mbTrans1990.WriteString(arg1989)
    if err1991 != nil {
      Usage()
      return
    }
    factory1992 := thrift.NewTJSONProtocolFactory()
    jsProt1993 := factory1992.GetProtocol(mbTrans1990)
    argvalue1 := line.NewSettings()
    err1994 := argvalue1.Read(jsProt1993)
    if err1994 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateSettings(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSettings2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateSettings2 requires 2 args")
      flag.Usage()
    }
    tmp0, err1995 := (strconv.Atoi(flag.Arg(1)))
    if err1995 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1996 := flag.Arg(2)
    mbTrans1997 := thrift.NewTMemoryBufferLen(len(arg1996))
    defer mbTrans1997.Close()
    _, err1998 := mbTrans1997.WriteString(arg1996)
    if err1998 != nil {
      Usage()
      return
    }
    factory1999 := thrift.NewTJSONProtocolFactory()
    jsProt2000 := factory1999.GetProtocol(mbTrans1997)
    argvalue1 := line.NewSettings()
    err2001 := argvalue1.Read(jsProt2000)
    if err2001 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateSettings2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSettingsAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSettingsAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err2002 := (strconv.Atoi(flag.Arg(1)))
    if err2002 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.SettingsAttribute(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateSettingsAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateSettingsAttributes":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSettingsAttributes requires 3 args")
      flag.Usage()
    }
    tmp0, err2004 := (strconv.Atoi(flag.Arg(1)))
    if err2004 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2005 := (strconv.Atoi(flag.Arg(2)))
    if err2005 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    arg2006 := flag.Arg(3)
    mbTrans2007 := thrift.NewTMemoryBufferLen(len(arg2006))
    defer mbTrans2007.Close()
    _, err2008 := mbTrans2007.WriteString(arg2006)
    if err2008 != nil {
      Usage()
      return
    }
    factory2009 := thrift.NewTJSONProtocolFactory()
    jsProt2010 := factory2009.GetProtocol(mbTrans2007)
    argvalue2 := line.NewSettings()
    err2011 := argvalue2.Read(jsProt2010)
    if err2011 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateSettingsAttributes(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyIdentityCredential":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "VerifyIdentityCredential requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.VerifyIdentityCredential(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyIdentityCredentialWithResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "VerifyIdentityCredentialWithResult_ requires 1 args")
      flag.Usage()
    }
    arg2014 := flag.Arg(1)
    mbTrans2015 := thrift.NewTMemoryBufferLen(len(arg2014))
    defer mbTrans2015.Close()
    _, err2016 := mbTrans2015.WriteString(arg2014)
    if err2016 != nil {
      Usage()
      return
    }
    factory2017 := thrift.NewTJSONProtocolFactory()
    jsProt2018 := factory2017.GetProtocol(mbTrans2015)
    argvalue0 := line.NewIdentityCredential()
    err2019 := argvalue0.Read(jsProt2018)
    if err2019 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.VerifyIdentityCredentialWithResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "verifyPhone":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "VerifyPhone requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.VerifyPhone(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyQrcode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyQrcode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyQrcode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
