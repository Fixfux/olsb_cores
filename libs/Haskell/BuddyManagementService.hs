{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.14.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module BuddyManagementService where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Line_Types
import qualified BuddyManagementService_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data AddBuddyMember_args = AddBuddyMember_args  { addBuddyMember_args_requestId :: LT.Text
  , addBuddyMember_args_userMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable AddBuddyMember_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` addBuddyMember_args_requestId record   `H.hashWithSalt` addBuddyMember_args_userMid record  
instance QC.Arbitrary AddBuddyMember_args where 
  arbitrary = M.liftM AddBuddyMember_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_AddBuddyMember_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_AddBuddyMember_args{addBuddyMember_args_requestId = addBuddyMember_args_requestId obj} then P.Nothing else P.Just $ default_AddBuddyMember_args{addBuddyMember_args_requestId = addBuddyMember_args_requestId obj}
    , if obj == default_AddBuddyMember_args{addBuddyMember_args_userMid = addBuddyMember_args_userMid obj} then P.Nothing else P.Just $ default_AddBuddyMember_args{addBuddyMember_args_userMid = addBuddyMember_args_userMid obj}
    ]
from_AddBuddyMember_args :: AddBuddyMember_args -> T.ThriftVal
from_AddBuddyMember_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1322 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1322))) $ addBuddyMember_args_requestId record
  , (\_v1322 -> P.Just (2, ("userMid",T.TString $ E.encodeUtf8 _v1322))) $ addBuddyMember_args_userMid record
  ]
write_AddBuddyMember_args :: T.Protocol p => p -> AddBuddyMember_args -> P.IO ()
write_AddBuddyMember_args oprot record = T.writeVal oprot $ from_AddBuddyMember_args record
encode_AddBuddyMember_args :: T.StatelessProtocol p => p -> AddBuddyMember_args -> LBS.ByteString
encode_AddBuddyMember_args oprot record = T.serializeVal oprot $ from_AddBuddyMember_args record
to_AddBuddyMember_args :: T.ThriftVal -> AddBuddyMember_args
to_AddBuddyMember_args (T.TStruct fields) = AddBuddyMember_args{
  addBuddyMember_args_requestId = P.maybe (addBuddyMember_args_requestId default_AddBuddyMember_args) (\(_,_val1324) -> (case _val1324 of {T.TString _val1325 -> E.decodeUtf8 _val1325; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  addBuddyMember_args_userMid = P.maybe (addBuddyMember_args_userMid default_AddBuddyMember_args) (\(_,_val1324) -> (case _val1324 of {T.TString _val1326 -> E.decodeUtf8 _val1326; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_AddBuddyMember_args _ = P.error "not a struct"
read_AddBuddyMember_args :: T.Protocol p => p -> P.IO AddBuddyMember_args
read_AddBuddyMember_args iprot = to_AddBuddyMember_args <$> T.readVal iprot (T.T_STRUCT typemap_AddBuddyMember_args)
decode_AddBuddyMember_args :: T.StatelessProtocol p => p -> LBS.ByteString -> AddBuddyMember_args
decode_AddBuddyMember_args iprot bs = to_AddBuddyMember_args $ T.deserializeVal iprot (T.T_STRUCT typemap_AddBuddyMember_args) bs
typemap_AddBuddyMember_args :: T.TypeMap
typemap_AddBuddyMember_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("userMid",T.T_STRING))]
default_AddBuddyMember_args :: AddBuddyMember_args
default_AddBuddyMember_args = AddBuddyMember_args{
  addBuddyMember_args_requestId = "",
  addBuddyMember_args_userMid = ""}
data AddBuddyMember_result = AddBuddyMember_result  { addBuddyMember_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable AddBuddyMember_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` addBuddyMember_result_e record  
instance QC.Arbitrary AddBuddyMember_result where 
  arbitrary = M.liftM AddBuddyMember_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_AddBuddyMember_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_AddBuddyMember_result{addBuddyMember_result_e = addBuddyMember_result_e obj} then P.Nothing else P.Just $ default_AddBuddyMember_result{addBuddyMember_result_e = addBuddyMember_result_e obj}
    ]
from_AddBuddyMember_result :: AddBuddyMember_result -> T.ThriftVal
from_AddBuddyMember_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1329 -> (1, ("e",from_TalkException _v1329))) <$> addBuddyMember_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1329 -> (1, ("e",from_TalkException _v1329))) <$> addBuddyMember_result_e record
    ]
    )
write_AddBuddyMember_result :: T.Protocol p => p -> AddBuddyMember_result -> P.IO ()
write_AddBuddyMember_result oprot record = T.writeVal oprot $ from_AddBuddyMember_result record
encode_AddBuddyMember_result :: T.StatelessProtocol p => p -> AddBuddyMember_result -> LBS.ByteString
encode_AddBuddyMember_result oprot record = T.serializeVal oprot $ from_AddBuddyMember_result record
to_AddBuddyMember_result :: T.ThriftVal -> AddBuddyMember_result
to_AddBuddyMember_result (T.TStruct fields) = AddBuddyMember_result{
  addBuddyMember_result_e = P.maybe (P.Nothing) (\(_,_val1331) -> P.Just (case _val1331 of {T.TStruct _val1332 -> (to_TalkException (T.TStruct _val1332)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_AddBuddyMember_result _ = P.error "not a struct"
read_AddBuddyMember_result :: T.Protocol p => p -> P.IO AddBuddyMember_result
read_AddBuddyMember_result iprot = to_AddBuddyMember_result <$> T.readVal iprot (T.T_STRUCT typemap_AddBuddyMember_result)
decode_AddBuddyMember_result :: T.StatelessProtocol p => p -> LBS.ByteString -> AddBuddyMember_result
decode_AddBuddyMember_result iprot bs = to_AddBuddyMember_result $ T.deserializeVal iprot (T.T_STRUCT typemap_AddBuddyMember_result) bs
typemap_AddBuddyMember_result :: T.TypeMap
typemap_AddBuddyMember_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_AddBuddyMember_result :: AddBuddyMember_result
default_AddBuddyMember_result = AddBuddyMember_result{
  addBuddyMember_result_e = P.Nothing}
data AddBuddyMembers_args = AddBuddyMembers_args  { addBuddyMembers_args_requestId :: LT.Text
  , addBuddyMembers_args_userMids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable AddBuddyMembers_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` addBuddyMembers_args_requestId record   `H.hashWithSalt` addBuddyMembers_args_userMids record  
instance QC.Arbitrary AddBuddyMembers_args where 
  arbitrary = M.liftM AddBuddyMembers_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_AddBuddyMembers_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_AddBuddyMembers_args{addBuddyMembers_args_requestId = addBuddyMembers_args_requestId obj} then P.Nothing else P.Just $ default_AddBuddyMembers_args{addBuddyMembers_args_requestId = addBuddyMembers_args_requestId obj}
    , if obj == default_AddBuddyMembers_args{addBuddyMembers_args_userMids = addBuddyMembers_args_userMids obj} then P.Nothing else P.Just $ default_AddBuddyMembers_args{addBuddyMembers_args_userMids = addBuddyMembers_args_userMids obj}
    ]
from_AddBuddyMembers_args :: AddBuddyMembers_args -> T.ThriftVal
from_AddBuddyMembers_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1335 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1335))) $ addBuddyMembers_args_requestId record
  , (\_v1335 -> P.Just (2, ("userMids",T.TList T.T_STRING $ P.map (\_v1337 -> T.TString $ E.encodeUtf8 _v1337) $ Vector.toList _v1335))) $ addBuddyMembers_args_userMids record
  ]
write_AddBuddyMembers_args :: T.Protocol p => p -> AddBuddyMembers_args -> P.IO ()
write_AddBuddyMembers_args oprot record = T.writeVal oprot $ from_AddBuddyMembers_args record
encode_AddBuddyMembers_args :: T.StatelessProtocol p => p -> AddBuddyMembers_args -> LBS.ByteString
encode_AddBuddyMembers_args oprot record = T.serializeVal oprot $ from_AddBuddyMembers_args record
to_AddBuddyMembers_args :: T.ThriftVal -> AddBuddyMembers_args
to_AddBuddyMembers_args (T.TStruct fields) = AddBuddyMembers_args{
  addBuddyMembers_args_requestId = P.maybe (addBuddyMembers_args_requestId default_AddBuddyMembers_args) (\(_,_val1339) -> (case _val1339 of {T.TString _val1340 -> E.decodeUtf8 _val1340; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  addBuddyMembers_args_userMids = P.maybe (addBuddyMembers_args_userMids default_AddBuddyMembers_args) (\(_,_val1339) -> (case _val1339 of {T.TList _ _val1341 -> (Vector.fromList $ P.map (\_v1342 -> (case _v1342 of {T.TString _val1343 -> E.decodeUtf8 _val1343; _ -> P.error "wrong type"})) _val1341); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_AddBuddyMembers_args _ = P.error "not a struct"
read_AddBuddyMembers_args :: T.Protocol p => p -> P.IO AddBuddyMembers_args
read_AddBuddyMembers_args iprot = to_AddBuddyMembers_args <$> T.readVal iprot (T.T_STRUCT typemap_AddBuddyMembers_args)
decode_AddBuddyMembers_args :: T.StatelessProtocol p => p -> LBS.ByteString -> AddBuddyMembers_args
decode_AddBuddyMembers_args iprot bs = to_AddBuddyMembers_args $ T.deserializeVal iprot (T.T_STRUCT typemap_AddBuddyMembers_args) bs
typemap_AddBuddyMembers_args :: T.TypeMap
typemap_AddBuddyMembers_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("userMids",(T.T_LIST T.T_STRING)))]
default_AddBuddyMembers_args :: AddBuddyMembers_args
default_AddBuddyMembers_args = AddBuddyMembers_args{
  addBuddyMembers_args_requestId = "",
  addBuddyMembers_args_userMids = Vector.empty}
data AddBuddyMembers_result = AddBuddyMembers_result  { addBuddyMembers_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable AddBuddyMembers_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` addBuddyMembers_result_e record  
instance QC.Arbitrary AddBuddyMembers_result where 
  arbitrary = M.liftM AddBuddyMembers_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_AddBuddyMembers_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_AddBuddyMembers_result{addBuddyMembers_result_e = addBuddyMembers_result_e obj} then P.Nothing else P.Just $ default_AddBuddyMembers_result{addBuddyMembers_result_e = addBuddyMembers_result_e obj}
    ]
from_AddBuddyMembers_result :: AddBuddyMembers_result -> T.ThriftVal
from_AddBuddyMembers_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1346 -> (1, ("e",from_TalkException _v1346))) <$> addBuddyMembers_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1346 -> (1, ("e",from_TalkException _v1346))) <$> addBuddyMembers_result_e record
    ]
    )
write_AddBuddyMembers_result :: T.Protocol p => p -> AddBuddyMembers_result -> P.IO ()
write_AddBuddyMembers_result oprot record = T.writeVal oprot $ from_AddBuddyMembers_result record
encode_AddBuddyMembers_result :: T.StatelessProtocol p => p -> AddBuddyMembers_result -> LBS.ByteString
encode_AddBuddyMembers_result oprot record = T.serializeVal oprot $ from_AddBuddyMembers_result record
to_AddBuddyMembers_result :: T.ThriftVal -> AddBuddyMembers_result
to_AddBuddyMembers_result (T.TStruct fields) = AddBuddyMembers_result{
  addBuddyMembers_result_e = P.maybe (P.Nothing) (\(_,_val1348) -> P.Just (case _val1348 of {T.TStruct _val1349 -> (to_TalkException (T.TStruct _val1349)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_AddBuddyMembers_result _ = P.error "not a struct"
read_AddBuddyMembers_result :: T.Protocol p => p -> P.IO AddBuddyMembers_result
read_AddBuddyMembers_result iprot = to_AddBuddyMembers_result <$> T.readVal iprot (T.T_STRUCT typemap_AddBuddyMembers_result)
decode_AddBuddyMembers_result :: T.StatelessProtocol p => p -> LBS.ByteString -> AddBuddyMembers_result
decode_AddBuddyMembers_result iprot bs = to_AddBuddyMembers_result $ T.deserializeVal iprot (T.T_STRUCT typemap_AddBuddyMembers_result) bs
typemap_AddBuddyMembers_result :: T.TypeMap
typemap_AddBuddyMembers_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_AddBuddyMembers_result :: AddBuddyMembers_result
default_AddBuddyMembers_result = AddBuddyMembers_result{
  addBuddyMembers_result_e = P.Nothing}
data BlockBuddyMember_args = BlockBuddyMember_args  { blockBuddyMember_args_requestId :: LT.Text
  , blockBuddyMember_args_mid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable BlockBuddyMember_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` blockBuddyMember_args_requestId record   `H.hashWithSalt` blockBuddyMember_args_mid record  
instance QC.Arbitrary BlockBuddyMember_args where 
  arbitrary = M.liftM BlockBuddyMember_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_BlockBuddyMember_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_BlockBuddyMember_args{blockBuddyMember_args_requestId = blockBuddyMember_args_requestId obj} then P.Nothing else P.Just $ default_BlockBuddyMember_args{blockBuddyMember_args_requestId = blockBuddyMember_args_requestId obj}
    , if obj == default_BlockBuddyMember_args{blockBuddyMember_args_mid = blockBuddyMember_args_mid obj} then P.Nothing else P.Just $ default_BlockBuddyMember_args{blockBuddyMember_args_mid = blockBuddyMember_args_mid obj}
    ]
from_BlockBuddyMember_args :: BlockBuddyMember_args -> T.ThriftVal
from_BlockBuddyMember_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1352 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1352))) $ blockBuddyMember_args_requestId record
  , (\_v1352 -> P.Just (2, ("mid",T.TString $ E.encodeUtf8 _v1352))) $ blockBuddyMember_args_mid record
  ]
write_BlockBuddyMember_args :: T.Protocol p => p -> BlockBuddyMember_args -> P.IO ()
write_BlockBuddyMember_args oprot record = T.writeVal oprot $ from_BlockBuddyMember_args record
encode_BlockBuddyMember_args :: T.StatelessProtocol p => p -> BlockBuddyMember_args -> LBS.ByteString
encode_BlockBuddyMember_args oprot record = T.serializeVal oprot $ from_BlockBuddyMember_args record
to_BlockBuddyMember_args :: T.ThriftVal -> BlockBuddyMember_args
to_BlockBuddyMember_args (T.TStruct fields) = BlockBuddyMember_args{
  blockBuddyMember_args_requestId = P.maybe (blockBuddyMember_args_requestId default_BlockBuddyMember_args) (\(_,_val1354) -> (case _val1354 of {T.TString _val1355 -> E.decodeUtf8 _val1355; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  blockBuddyMember_args_mid = P.maybe (blockBuddyMember_args_mid default_BlockBuddyMember_args) (\(_,_val1354) -> (case _val1354 of {T.TString _val1356 -> E.decodeUtf8 _val1356; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_BlockBuddyMember_args _ = P.error "not a struct"
read_BlockBuddyMember_args :: T.Protocol p => p -> P.IO BlockBuddyMember_args
read_BlockBuddyMember_args iprot = to_BlockBuddyMember_args <$> T.readVal iprot (T.T_STRUCT typemap_BlockBuddyMember_args)
decode_BlockBuddyMember_args :: T.StatelessProtocol p => p -> LBS.ByteString -> BlockBuddyMember_args
decode_BlockBuddyMember_args iprot bs = to_BlockBuddyMember_args $ T.deserializeVal iprot (T.T_STRUCT typemap_BlockBuddyMember_args) bs
typemap_BlockBuddyMember_args :: T.TypeMap
typemap_BlockBuddyMember_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("mid",T.T_STRING))]
default_BlockBuddyMember_args :: BlockBuddyMember_args
default_BlockBuddyMember_args = BlockBuddyMember_args{
  blockBuddyMember_args_requestId = "",
  blockBuddyMember_args_mid = ""}
data BlockBuddyMember_result = BlockBuddyMember_result  { blockBuddyMember_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable BlockBuddyMember_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` blockBuddyMember_result_e record  
instance QC.Arbitrary BlockBuddyMember_result where 
  arbitrary = M.liftM BlockBuddyMember_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_BlockBuddyMember_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_BlockBuddyMember_result{blockBuddyMember_result_e = blockBuddyMember_result_e obj} then P.Nothing else P.Just $ default_BlockBuddyMember_result{blockBuddyMember_result_e = blockBuddyMember_result_e obj}
    ]
from_BlockBuddyMember_result :: BlockBuddyMember_result -> T.ThriftVal
from_BlockBuddyMember_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1359 -> (1, ("e",from_TalkException _v1359))) <$> blockBuddyMember_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1359 -> (1, ("e",from_TalkException _v1359))) <$> blockBuddyMember_result_e record
    ]
    )
write_BlockBuddyMember_result :: T.Protocol p => p -> BlockBuddyMember_result -> P.IO ()
write_BlockBuddyMember_result oprot record = T.writeVal oprot $ from_BlockBuddyMember_result record
encode_BlockBuddyMember_result :: T.StatelessProtocol p => p -> BlockBuddyMember_result -> LBS.ByteString
encode_BlockBuddyMember_result oprot record = T.serializeVal oprot $ from_BlockBuddyMember_result record
to_BlockBuddyMember_result :: T.ThriftVal -> BlockBuddyMember_result
to_BlockBuddyMember_result (T.TStruct fields) = BlockBuddyMember_result{
  blockBuddyMember_result_e = P.maybe (P.Nothing) (\(_,_val1361) -> P.Just (case _val1361 of {T.TStruct _val1362 -> (to_TalkException (T.TStruct _val1362)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_BlockBuddyMember_result _ = P.error "not a struct"
read_BlockBuddyMember_result :: T.Protocol p => p -> P.IO BlockBuddyMember_result
read_BlockBuddyMember_result iprot = to_BlockBuddyMember_result <$> T.readVal iprot (T.T_STRUCT typemap_BlockBuddyMember_result)
decode_BlockBuddyMember_result :: T.StatelessProtocol p => p -> LBS.ByteString -> BlockBuddyMember_result
decode_BlockBuddyMember_result iprot bs = to_BlockBuddyMember_result $ T.deserializeVal iprot (T.T_STRUCT typemap_BlockBuddyMember_result) bs
typemap_BlockBuddyMember_result :: T.TypeMap
typemap_BlockBuddyMember_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_BlockBuddyMember_result :: BlockBuddyMember_result
default_BlockBuddyMember_result = BlockBuddyMember_result{
  blockBuddyMember_result_e = P.Nothing}
data CommitSendMessagesToAll_args = CommitSendMessagesToAll_args  { commitSendMessagesToAll_args_requestIdList :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable CommitSendMessagesToAll_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` commitSendMessagesToAll_args_requestIdList record  
instance QC.Arbitrary CommitSendMessagesToAll_args where 
  arbitrary = M.liftM CommitSendMessagesToAll_args (QC.arbitrary)
  shrink obj | obj == default_CommitSendMessagesToAll_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_CommitSendMessagesToAll_args{commitSendMessagesToAll_args_requestIdList = commitSendMessagesToAll_args_requestIdList obj} then P.Nothing else P.Just $ default_CommitSendMessagesToAll_args{commitSendMessagesToAll_args_requestIdList = commitSendMessagesToAll_args_requestIdList obj}
    ]
from_CommitSendMessagesToAll_args :: CommitSendMessagesToAll_args -> T.ThriftVal
from_CommitSendMessagesToAll_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1365 -> P.Just (1, ("requestIdList",T.TList T.T_STRING $ P.map (\_v1367 -> T.TString $ E.encodeUtf8 _v1367) $ Vector.toList _v1365))) $ commitSendMessagesToAll_args_requestIdList record
  ]
write_CommitSendMessagesToAll_args :: T.Protocol p => p -> CommitSendMessagesToAll_args -> P.IO ()
write_CommitSendMessagesToAll_args oprot record = T.writeVal oprot $ from_CommitSendMessagesToAll_args record
encode_CommitSendMessagesToAll_args :: T.StatelessProtocol p => p -> CommitSendMessagesToAll_args -> LBS.ByteString
encode_CommitSendMessagesToAll_args oprot record = T.serializeVal oprot $ from_CommitSendMessagesToAll_args record
to_CommitSendMessagesToAll_args :: T.ThriftVal -> CommitSendMessagesToAll_args
to_CommitSendMessagesToAll_args (T.TStruct fields) = CommitSendMessagesToAll_args{
  commitSendMessagesToAll_args_requestIdList = P.maybe (commitSendMessagesToAll_args_requestIdList default_CommitSendMessagesToAll_args) (\(_,_val1369) -> (case _val1369 of {T.TList _ _val1370 -> (Vector.fromList $ P.map (\_v1371 -> (case _v1371 of {T.TString _val1372 -> E.decodeUtf8 _val1372; _ -> P.error "wrong type"})) _val1370); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_CommitSendMessagesToAll_args _ = P.error "not a struct"
read_CommitSendMessagesToAll_args :: T.Protocol p => p -> P.IO CommitSendMessagesToAll_args
read_CommitSendMessagesToAll_args iprot = to_CommitSendMessagesToAll_args <$> T.readVal iprot (T.T_STRUCT typemap_CommitSendMessagesToAll_args)
decode_CommitSendMessagesToAll_args :: T.StatelessProtocol p => p -> LBS.ByteString -> CommitSendMessagesToAll_args
decode_CommitSendMessagesToAll_args iprot bs = to_CommitSendMessagesToAll_args $ T.deserializeVal iprot (T.T_STRUCT typemap_CommitSendMessagesToAll_args) bs
typemap_CommitSendMessagesToAll_args :: T.TypeMap
typemap_CommitSendMessagesToAll_args = Map.fromList [(1,("requestIdList",(T.T_LIST T.T_STRING)))]
default_CommitSendMessagesToAll_args :: CommitSendMessagesToAll_args
default_CommitSendMessagesToAll_args = CommitSendMessagesToAll_args{
  commitSendMessagesToAll_args_requestIdList = Vector.empty}
data CommitSendMessagesToAll_result = CommitSendMessagesToAll_result  { commitSendMessagesToAll_result_success :: (Vector.Vector SendBuddyMessageResult)
  , commitSendMessagesToAll_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable CommitSendMessagesToAll_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` commitSendMessagesToAll_result_success record   `H.hashWithSalt` commitSendMessagesToAll_result_e record  
instance QC.Arbitrary CommitSendMessagesToAll_result where 
  arbitrary = M.liftM CommitSendMessagesToAll_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_CommitSendMessagesToAll_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_CommitSendMessagesToAll_result{commitSendMessagesToAll_result_success = commitSendMessagesToAll_result_success obj} then P.Nothing else P.Just $ default_CommitSendMessagesToAll_result{commitSendMessagesToAll_result_success = commitSendMessagesToAll_result_success obj}
    , if obj == default_CommitSendMessagesToAll_result{commitSendMessagesToAll_result_e = commitSendMessagesToAll_result_e obj} then P.Nothing else P.Just $ default_CommitSendMessagesToAll_result{commitSendMessagesToAll_result_e = commitSendMessagesToAll_result_e obj}
    ]
from_CommitSendMessagesToAll_result :: CommitSendMessagesToAll_result -> T.ThriftVal
from_CommitSendMessagesToAll_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1375 -> (1, ("e",from_TalkException _v1375))) <$> commitSendMessagesToAll_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1375 -> P.Just (0, ("success",T.TList (T.T_STRUCT typemap_SendBuddyMessageResult) $ P.map (\_v1377 -> from_SendBuddyMessageResult _v1377) $ Vector.toList _v1375))) $ commitSendMessagesToAll_result_success record
    , (\_v1375 -> (1, ("e",from_TalkException _v1375))) <$> commitSendMessagesToAll_result_e record
    ]
    )
write_CommitSendMessagesToAll_result :: T.Protocol p => p -> CommitSendMessagesToAll_result -> P.IO ()
write_CommitSendMessagesToAll_result oprot record = T.writeVal oprot $ from_CommitSendMessagesToAll_result record
encode_CommitSendMessagesToAll_result :: T.StatelessProtocol p => p -> CommitSendMessagesToAll_result -> LBS.ByteString
encode_CommitSendMessagesToAll_result oprot record = T.serializeVal oprot $ from_CommitSendMessagesToAll_result record
to_CommitSendMessagesToAll_result :: T.ThriftVal -> CommitSendMessagesToAll_result
to_CommitSendMessagesToAll_result (T.TStruct fields) = CommitSendMessagesToAll_result{
  commitSendMessagesToAll_result_success = P.maybe (commitSendMessagesToAll_result_success default_CommitSendMessagesToAll_result) (\(_,_val1379) -> (case _val1379 of {T.TList _ _val1380 -> (Vector.fromList $ P.map (\_v1381 -> (case _v1381 of {T.TStruct _val1382 -> (to_SendBuddyMessageResult (T.TStruct _val1382)); _ -> P.error "wrong type"})) _val1380); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  commitSendMessagesToAll_result_e = P.maybe (P.Nothing) (\(_,_val1379) -> P.Just (case _val1379 of {T.TStruct _val1383 -> (to_TalkException (T.TStruct _val1383)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_CommitSendMessagesToAll_result _ = P.error "not a struct"
read_CommitSendMessagesToAll_result :: T.Protocol p => p -> P.IO CommitSendMessagesToAll_result
read_CommitSendMessagesToAll_result iprot = to_CommitSendMessagesToAll_result <$> T.readVal iprot (T.T_STRUCT typemap_CommitSendMessagesToAll_result)
decode_CommitSendMessagesToAll_result :: T.StatelessProtocol p => p -> LBS.ByteString -> CommitSendMessagesToAll_result
decode_CommitSendMessagesToAll_result iprot bs = to_CommitSendMessagesToAll_result $ T.deserializeVal iprot (T.T_STRUCT typemap_CommitSendMessagesToAll_result) bs
typemap_CommitSendMessagesToAll_result :: T.TypeMap
typemap_CommitSendMessagesToAll_result = Map.fromList [(0,("success",(T.T_LIST (T.T_STRUCT typemap_SendBuddyMessageResult)))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_CommitSendMessagesToAll_result :: CommitSendMessagesToAll_result
default_CommitSendMessagesToAll_result = CommitSendMessagesToAll_result{
  commitSendMessagesToAll_result_success = Vector.empty,
  commitSendMessagesToAll_result_e = P.Nothing}
data CommitSendMessagesToMids_args = CommitSendMessagesToMids_args  { commitSendMessagesToMids_args_requestIdList :: (Vector.Vector LT.Text)
  , commitSendMessagesToMids_args_mids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable CommitSendMessagesToMids_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` commitSendMessagesToMids_args_requestIdList record   `H.hashWithSalt` commitSendMessagesToMids_args_mids record  
instance QC.Arbitrary CommitSendMessagesToMids_args where 
  arbitrary = M.liftM CommitSendMessagesToMids_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_CommitSendMessagesToMids_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_CommitSendMessagesToMids_args{commitSendMessagesToMids_args_requestIdList = commitSendMessagesToMids_args_requestIdList obj} then P.Nothing else P.Just $ default_CommitSendMessagesToMids_args{commitSendMessagesToMids_args_requestIdList = commitSendMessagesToMids_args_requestIdList obj}
    , if obj == default_CommitSendMessagesToMids_args{commitSendMessagesToMids_args_mids = commitSendMessagesToMids_args_mids obj} then P.Nothing else P.Just $ default_CommitSendMessagesToMids_args{commitSendMessagesToMids_args_mids = commitSendMessagesToMids_args_mids obj}
    ]
from_CommitSendMessagesToMids_args :: CommitSendMessagesToMids_args -> T.ThriftVal
from_CommitSendMessagesToMids_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1386 -> P.Just (1, ("requestIdList",T.TList T.T_STRING $ P.map (\_v1388 -> T.TString $ E.encodeUtf8 _v1388) $ Vector.toList _v1386))) $ commitSendMessagesToMids_args_requestIdList record
  , (\_v1386 -> P.Just (2, ("mids",T.TList T.T_STRING $ P.map (\_v1390 -> T.TString $ E.encodeUtf8 _v1390) $ Vector.toList _v1386))) $ commitSendMessagesToMids_args_mids record
  ]
write_CommitSendMessagesToMids_args :: T.Protocol p => p -> CommitSendMessagesToMids_args -> P.IO ()
write_CommitSendMessagesToMids_args oprot record = T.writeVal oprot $ from_CommitSendMessagesToMids_args record
encode_CommitSendMessagesToMids_args :: T.StatelessProtocol p => p -> CommitSendMessagesToMids_args -> LBS.ByteString
encode_CommitSendMessagesToMids_args oprot record = T.serializeVal oprot $ from_CommitSendMessagesToMids_args record
to_CommitSendMessagesToMids_args :: T.ThriftVal -> CommitSendMessagesToMids_args
to_CommitSendMessagesToMids_args (T.TStruct fields) = CommitSendMessagesToMids_args{
  commitSendMessagesToMids_args_requestIdList = P.maybe (commitSendMessagesToMids_args_requestIdList default_CommitSendMessagesToMids_args) (\(_,_val1392) -> (case _val1392 of {T.TList _ _val1393 -> (Vector.fromList $ P.map (\_v1394 -> (case _v1394 of {T.TString _val1395 -> E.decodeUtf8 _val1395; _ -> P.error "wrong type"})) _val1393); _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  commitSendMessagesToMids_args_mids = P.maybe (commitSendMessagesToMids_args_mids default_CommitSendMessagesToMids_args) (\(_,_val1392) -> (case _val1392 of {T.TList _ _val1396 -> (Vector.fromList $ P.map (\_v1397 -> (case _v1397 of {T.TString _val1398 -> E.decodeUtf8 _val1398; _ -> P.error "wrong type"})) _val1396); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_CommitSendMessagesToMids_args _ = P.error "not a struct"
read_CommitSendMessagesToMids_args :: T.Protocol p => p -> P.IO CommitSendMessagesToMids_args
read_CommitSendMessagesToMids_args iprot = to_CommitSendMessagesToMids_args <$> T.readVal iprot (T.T_STRUCT typemap_CommitSendMessagesToMids_args)
decode_CommitSendMessagesToMids_args :: T.StatelessProtocol p => p -> LBS.ByteString -> CommitSendMessagesToMids_args
decode_CommitSendMessagesToMids_args iprot bs = to_CommitSendMessagesToMids_args $ T.deserializeVal iprot (T.T_STRUCT typemap_CommitSendMessagesToMids_args) bs
typemap_CommitSendMessagesToMids_args :: T.TypeMap
typemap_CommitSendMessagesToMids_args = Map.fromList [(1,("requestIdList",(T.T_LIST T.T_STRING))),(2,("mids",(T.T_LIST T.T_STRING)))]
default_CommitSendMessagesToMids_args :: CommitSendMessagesToMids_args
default_CommitSendMessagesToMids_args = CommitSendMessagesToMids_args{
  commitSendMessagesToMids_args_requestIdList = Vector.empty,
  commitSendMessagesToMids_args_mids = Vector.empty}
data CommitSendMessagesToMids_result = CommitSendMessagesToMids_result  { commitSendMessagesToMids_result_success :: (Vector.Vector SendBuddyMessageResult)
  , commitSendMessagesToMids_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable CommitSendMessagesToMids_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` commitSendMessagesToMids_result_success record   `H.hashWithSalt` commitSendMessagesToMids_result_e record  
instance QC.Arbitrary CommitSendMessagesToMids_result where 
  arbitrary = M.liftM CommitSendMessagesToMids_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_CommitSendMessagesToMids_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_CommitSendMessagesToMids_result{commitSendMessagesToMids_result_success = commitSendMessagesToMids_result_success obj} then P.Nothing else P.Just $ default_CommitSendMessagesToMids_result{commitSendMessagesToMids_result_success = commitSendMessagesToMids_result_success obj}
    , if obj == default_CommitSendMessagesToMids_result{commitSendMessagesToMids_result_e = commitSendMessagesToMids_result_e obj} then P.Nothing else P.Just $ default_CommitSendMessagesToMids_result{commitSendMessagesToMids_result_e = commitSendMessagesToMids_result_e obj}
    ]
from_CommitSendMessagesToMids_result :: CommitSendMessagesToMids_result -> T.ThriftVal
from_CommitSendMessagesToMids_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1401 -> (1, ("e",from_TalkException _v1401))) <$> commitSendMessagesToMids_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1401 -> P.Just (0, ("success",T.TList (T.T_STRUCT typemap_SendBuddyMessageResult) $ P.map (\_v1403 -> from_SendBuddyMessageResult _v1403) $ Vector.toList _v1401))) $ commitSendMessagesToMids_result_success record
    , (\_v1401 -> (1, ("e",from_TalkException _v1401))) <$> commitSendMessagesToMids_result_e record
    ]
    )
write_CommitSendMessagesToMids_result :: T.Protocol p => p -> CommitSendMessagesToMids_result -> P.IO ()
write_CommitSendMessagesToMids_result oprot record = T.writeVal oprot $ from_CommitSendMessagesToMids_result record
encode_CommitSendMessagesToMids_result :: T.StatelessProtocol p => p -> CommitSendMessagesToMids_result -> LBS.ByteString
encode_CommitSendMessagesToMids_result oprot record = T.serializeVal oprot $ from_CommitSendMessagesToMids_result record
to_CommitSendMessagesToMids_result :: T.ThriftVal -> CommitSendMessagesToMids_result
to_CommitSendMessagesToMids_result (T.TStruct fields) = CommitSendMessagesToMids_result{
  commitSendMessagesToMids_result_success = P.maybe (commitSendMessagesToMids_result_success default_CommitSendMessagesToMids_result) (\(_,_val1405) -> (case _val1405 of {T.TList _ _val1406 -> (Vector.fromList $ P.map (\_v1407 -> (case _v1407 of {T.TStruct _val1408 -> (to_SendBuddyMessageResult (T.TStruct _val1408)); _ -> P.error "wrong type"})) _val1406); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  commitSendMessagesToMids_result_e = P.maybe (P.Nothing) (\(_,_val1405) -> P.Just (case _val1405 of {T.TStruct _val1409 -> (to_TalkException (T.TStruct _val1409)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_CommitSendMessagesToMids_result _ = P.error "not a struct"
read_CommitSendMessagesToMids_result :: T.Protocol p => p -> P.IO CommitSendMessagesToMids_result
read_CommitSendMessagesToMids_result iprot = to_CommitSendMessagesToMids_result <$> T.readVal iprot (T.T_STRUCT typemap_CommitSendMessagesToMids_result)
decode_CommitSendMessagesToMids_result :: T.StatelessProtocol p => p -> LBS.ByteString -> CommitSendMessagesToMids_result
decode_CommitSendMessagesToMids_result iprot bs = to_CommitSendMessagesToMids_result $ T.deserializeVal iprot (T.T_STRUCT typemap_CommitSendMessagesToMids_result) bs
typemap_CommitSendMessagesToMids_result :: T.TypeMap
typemap_CommitSendMessagesToMids_result = Map.fromList [(0,("success",(T.T_LIST (T.T_STRUCT typemap_SendBuddyMessageResult)))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_CommitSendMessagesToMids_result :: CommitSendMessagesToMids_result
default_CommitSendMessagesToMids_result = CommitSendMessagesToMids_result{
  commitSendMessagesToMids_result_success = Vector.empty,
  commitSendMessagesToMids_result_e = P.Nothing}
data ContainsBuddyMember_args = ContainsBuddyMember_args  { containsBuddyMember_args_requestId :: LT.Text
  , containsBuddyMember_args_userMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable ContainsBuddyMember_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` containsBuddyMember_args_requestId record   `H.hashWithSalt` containsBuddyMember_args_userMid record  
instance QC.Arbitrary ContainsBuddyMember_args where 
  arbitrary = M.liftM ContainsBuddyMember_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_ContainsBuddyMember_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_ContainsBuddyMember_args{containsBuddyMember_args_requestId = containsBuddyMember_args_requestId obj} then P.Nothing else P.Just $ default_ContainsBuddyMember_args{containsBuddyMember_args_requestId = containsBuddyMember_args_requestId obj}
    , if obj == default_ContainsBuddyMember_args{containsBuddyMember_args_userMid = containsBuddyMember_args_userMid obj} then P.Nothing else P.Just $ default_ContainsBuddyMember_args{containsBuddyMember_args_userMid = containsBuddyMember_args_userMid obj}
    ]
from_ContainsBuddyMember_args :: ContainsBuddyMember_args -> T.ThriftVal
from_ContainsBuddyMember_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1412 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1412))) $ containsBuddyMember_args_requestId record
  , (\_v1412 -> P.Just (2, ("userMid",T.TString $ E.encodeUtf8 _v1412))) $ containsBuddyMember_args_userMid record
  ]
write_ContainsBuddyMember_args :: T.Protocol p => p -> ContainsBuddyMember_args -> P.IO ()
write_ContainsBuddyMember_args oprot record = T.writeVal oprot $ from_ContainsBuddyMember_args record
encode_ContainsBuddyMember_args :: T.StatelessProtocol p => p -> ContainsBuddyMember_args -> LBS.ByteString
encode_ContainsBuddyMember_args oprot record = T.serializeVal oprot $ from_ContainsBuddyMember_args record
to_ContainsBuddyMember_args :: T.ThriftVal -> ContainsBuddyMember_args
to_ContainsBuddyMember_args (T.TStruct fields) = ContainsBuddyMember_args{
  containsBuddyMember_args_requestId = P.maybe (containsBuddyMember_args_requestId default_ContainsBuddyMember_args) (\(_,_val1414) -> (case _val1414 of {T.TString _val1415 -> E.decodeUtf8 _val1415; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  containsBuddyMember_args_userMid = P.maybe (containsBuddyMember_args_userMid default_ContainsBuddyMember_args) (\(_,_val1414) -> (case _val1414 of {T.TString _val1416 -> E.decodeUtf8 _val1416; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_ContainsBuddyMember_args _ = P.error "not a struct"
read_ContainsBuddyMember_args :: T.Protocol p => p -> P.IO ContainsBuddyMember_args
read_ContainsBuddyMember_args iprot = to_ContainsBuddyMember_args <$> T.readVal iprot (T.T_STRUCT typemap_ContainsBuddyMember_args)
decode_ContainsBuddyMember_args :: T.StatelessProtocol p => p -> LBS.ByteString -> ContainsBuddyMember_args
decode_ContainsBuddyMember_args iprot bs = to_ContainsBuddyMember_args $ T.deserializeVal iprot (T.T_STRUCT typemap_ContainsBuddyMember_args) bs
typemap_ContainsBuddyMember_args :: T.TypeMap
typemap_ContainsBuddyMember_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("userMid",T.T_STRING))]
default_ContainsBuddyMember_args :: ContainsBuddyMember_args
default_ContainsBuddyMember_args = ContainsBuddyMember_args{
  containsBuddyMember_args_requestId = "",
  containsBuddyMember_args_userMid = ""}
data ContainsBuddyMember_result = ContainsBuddyMember_result  { containsBuddyMember_result_success :: P.Bool
  , containsBuddyMember_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable ContainsBuddyMember_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` containsBuddyMember_result_success record   `H.hashWithSalt` containsBuddyMember_result_e record  
instance QC.Arbitrary ContainsBuddyMember_result where 
  arbitrary = M.liftM ContainsBuddyMember_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_ContainsBuddyMember_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_ContainsBuddyMember_result{containsBuddyMember_result_success = containsBuddyMember_result_success obj} then P.Nothing else P.Just $ default_ContainsBuddyMember_result{containsBuddyMember_result_success = containsBuddyMember_result_success obj}
    , if obj == default_ContainsBuddyMember_result{containsBuddyMember_result_e = containsBuddyMember_result_e obj} then P.Nothing else P.Just $ default_ContainsBuddyMember_result{containsBuddyMember_result_e = containsBuddyMember_result_e obj}
    ]
from_ContainsBuddyMember_result :: ContainsBuddyMember_result -> T.ThriftVal
from_ContainsBuddyMember_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1419 -> (1, ("e",from_TalkException _v1419))) <$> containsBuddyMember_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1419 -> P.Just (0, ("success",T.TBool _v1419))) $ containsBuddyMember_result_success record
    , (\_v1419 -> (1, ("e",from_TalkException _v1419))) <$> containsBuddyMember_result_e record
    ]
    )
write_ContainsBuddyMember_result :: T.Protocol p => p -> ContainsBuddyMember_result -> P.IO ()
write_ContainsBuddyMember_result oprot record = T.writeVal oprot $ from_ContainsBuddyMember_result record
encode_ContainsBuddyMember_result :: T.StatelessProtocol p => p -> ContainsBuddyMember_result -> LBS.ByteString
encode_ContainsBuddyMember_result oprot record = T.serializeVal oprot $ from_ContainsBuddyMember_result record
to_ContainsBuddyMember_result :: T.ThriftVal -> ContainsBuddyMember_result
to_ContainsBuddyMember_result (T.TStruct fields) = ContainsBuddyMember_result{
  containsBuddyMember_result_success = P.maybe (containsBuddyMember_result_success default_ContainsBuddyMember_result) (\(_,_val1421) -> (case _val1421 of {T.TBool _val1422 -> _val1422; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  containsBuddyMember_result_e = P.maybe (P.Nothing) (\(_,_val1421) -> P.Just (case _val1421 of {T.TStruct _val1423 -> (to_TalkException (T.TStruct _val1423)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_ContainsBuddyMember_result _ = P.error "not a struct"
read_ContainsBuddyMember_result :: T.Protocol p => p -> P.IO ContainsBuddyMember_result
read_ContainsBuddyMember_result iprot = to_ContainsBuddyMember_result <$> T.readVal iprot (T.T_STRUCT typemap_ContainsBuddyMember_result)
decode_ContainsBuddyMember_result :: T.StatelessProtocol p => p -> LBS.ByteString -> ContainsBuddyMember_result
decode_ContainsBuddyMember_result iprot bs = to_ContainsBuddyMember_result $ T.deserializeVal iprot (T.T_STRUCT typemap_ContainsBuddyMember_result) bs
typemap_ContainsBuddyMember_result :: T.TypeMap
typemap_ContainsBuddyMember_result = Map.fromList [(0,("success",T.T_BOOL)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_ContainsBuddyMember_result :: ContainsBuddyMember_result
default_ContainsBuddyMember_result = ContainsBuddyMember_result{
  containsBuddyMember_result_success = P.False,
  containsBuddyMember_result_e = P.Nothing}
data DownloadMessageContent_args = DownloadMessageContent_args  { downloadMessageContent_args_requestId :: LT.Text
  , downloadMessageContent_args_messageId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadMessageContent_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadMessageContent_args_requestId record   `H.hashWithSalt` downloadMessageContent_args_messageId record  
instance QC.Arbitrary DownloadMessageContent_args where 
  arbitrary = M.liftM DownloadMessageContent_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_DownloadMessageContent_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadMessageContent_args{downloadMessageContent_args_requestId = downloadMessageContent_args_requestId obj} then P.Nothing else P.Just $ default_DownloadMessageContent_args{downloadMessageContent_args_requestId = downloadMessageContent_args_requestId obj}
    , if obj == default_DownloadMessageContent_args{downloadMessageContent_args_messageId = downloadMessageContent_args_messageId obj} then P.Nothing else P.Just $ default_DownloadMessageContent_args{downloadMessageContent_args_messageId = downloadMessageContent_args_messageId obj}
    ]
from_DownloadMessageContent_args :: DownloadMessageContent_args -> T.ThriftVal
from_DownloadMessageContent_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1426 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1426))) $ downloadMessageContent_args_requestId record
  , (\_v1426 -> P.Just (2, ("messageId",T.TString $ E.encodeUtf8 _v1426))) $ downloadMessageContent_args_messageId record
  ]
write_DownloadMessageContent_args :: T.Protocol p => p -> DownloadMessageContent_args -> P.IO ()
write_DownloadMessageContent_args oprot record = T.writeVal oprot $ from_DownloadMessageContent_args record
encode_DownloadMessageContent_args :: T.StatelessProtocol p => p -> DownloadMessageContent_args -> LBS.ByteString
encode_DownloadMessageContent_args oprot record = T.serializeVal oprot $ from_DownloadMessageContent_args record
to_DownloadMessageContent_args :: T.ThriftVal -> DownloadMessageContent_args
to_DownloadMessageContent_args (T.TStruct fields) = DownloadMessageContent_args{
  downloadMessageContent_args_requestId = P.maybe (downloadMessageContent_args_requestId default_DownloadMessageContent_args) (\(_,_val1428) -> (case _val1428 of {T.TString _val1429 -> E.decodeUtf8 _val1429; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  downloadMessageContent_args_messageId = P.maybe (downloadMessageContent_args_messageId default_DownloadMessageContent_args) (\(_,_val1428) -> (case _val1428 of {T.TString _val1430 -> E.decodeUtf8 _val1430; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_DownloadMessageContent_args _ = P.error "not a struct"
read_DownloadMessageContent_args :: T.Protocol p => p -> P.IO DownloadMessageContent_args
read_DownloadMessageContent_args iprot = to_DownloadMessageContent_args <$> T.readVal iprot (T.T_STRUCT typemap_DownloadMessageContent_args)
decode_DownloadMessageContent_args :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadMessageContent_args
decode_DownloadMessageContent_args iprot bs = to_DownloadMessageContent_args $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadMessageContent_args) bs
typemap_DownloadMessageContent_args :: T.TypeMap
typemap_DownloadMessageContent_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("messageId",T.T_STRING))]
default_DownloadMessageContent_args :: DownloadMessageContent_args
default_DownloadMessageContent_args = DownloadMessageContent_args{
  downloadMessageContent_args_requestId = "",
  downloadMessageContent_args_messageId = ""}
data DownloadMessageContent_result = DownloadMessageContent_result  { downloadMessageContent_result_success :: LBS.ByteString
  , downloadMessageContent_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadMessageContent_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadMessageContent_result_success record   `H.hashWithSalt` downloadMessageContent_result_e record  
instance QC.Arbitrary DownloadMessageContent_result where 
  arbitrary = M.liftM DownloadMessageContent_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_DownloadMessageContent_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadMessageContent_result{downloadMessageContent_result_success = downloadMessageContent_result_success obj} then P.Nothing else P.Just $ default_DownloadMessageContent_result{downloadMessageContent_result_success = downloadMessageContent_result_success obj}
    , if obj == default_DownloadMessageContent_result{downloadMessageContent_result_e = downloadMessageContent_result_e obj} then P.Nothing else P.Just $ default_DownloadMessageContent_result{downloadMessageContent_result_e = downloadMessageContent_result_e obj}
    ]
from_DownloadMessageContent_result :: DownloadMessageContent_result -> T.ThriftVal
from_DownloadMessageContent_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1433 -> (1, ("e",from_TalkException _v1433))) <$> downloadMessageContent_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1433 -> P.Just (0, ("success",T.TBinary _v1433))) $ downloadMessageContent_result_success record
    , (\_v1433 -> (1, ("e",from_TalkException _v1433))) <$> downloadMessageContent_result_e record
    ]
    )
write_DownloadMessageContent_result :: T.Protocol p => p -> DownloadMessageContent_result -> P.IO ()
write_DownloadMessageContent_result oprot record = T.writeVal oprot $ from_DownloadMessageContent_result record
encode_DownloadMessageContent_result :: T.StatelessProtocol p => p -> DownloadMessageContent_result -> LBS.ByteString
encode_DownloadMessageContent_result oprot record = T.serializeVal oprot $ from_DownloadMessageContent_result record
to_DownloadMessageContent_result :: T.ThriftVal -> DownloadMessageContent_result
to_DownloadMessageContent_result (T.TStruct fields) = DownloadMessageContent_result{
  downloadMessageContent_result_success = P.maybe (downloadMessageContent_result_success default_DownloadMessageContent_result) (\(_,_val1435) -> (case _val1435 of {T.TBinary _val1436 -> _val1436; T.TString _val1436 -> _val1436; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  downloadMessageContent_result_e = P.maybe (P.Nothing) (\(_,_val1435) -> P.Just (case _val1435 of {T.TStruct _val1437 -> (to_TalkException (T.TStruct _val1437)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_DownloadMessageContent_result _ = P.error "not a struct"
read_DownloadMessageContent_result :: T.Protocol p => p -> P.IO DownloadMessageContent_result
read_DownloadMessageContent_result iprot = to_DownloadMessageContent_result <$> T.readVal iprot (T.T_STRUCT typemap_DownloadMessageContent_result)
decode_DownloadMessageContent_result :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadMessageContent_result
decode_DownloadMessageContent_result iprot bs = to_DownloadMessageContent_result $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadMessageContent_result) bs
typemap_DownloadMessageContent_result :: T.TypeMap
typemap_DownloadMessageContent_result = Map.fromList [(0,("success",T.T_BINARY)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_DownloadMessageContent_result :: DownloadMessageContent_result
default_DownloadMessageContent_result = DownloadMessageContent_result{
  downloadMessageContent_result_success = "",
  downloadMessageContent_result_e = P.Nothing}
data DownloadMessageContentPreview_args = DownloadMessageContentPreview_args  { downloadMessageContentPreview_args_requestId :: LT.Text
  , downloadMessageContentPreview_args_messageId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadMessageContentPreview_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadMessageContentPreview_args_requestId record   `H.hashWithSalt` downloadMessageContentPreview_args_messageId record  
instance QC.Arbitrary DownloadMessageContentPreview_args where 
  arbitrary = M.liftM DownloadMessageContentPreview_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_DownloadMessageContentPreview_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadMessageContentPreview_args{downloadMessageContentPreview_args_requestId = downloadMessageContentPreview_args_requestId obj} then P.Nothing else P.Just $ default_DownloadMessageContentPreview_args{downloadMessageContentPreview_args_requestId = downloadMessageContentPreview_args_requestId obj}
    , if obj == default_DownloadMessageContentPreview_args{downloadMessageContentPreview_args_messageId = downloadMessageContentPreview_args_messageId obj} then P.Nothing else P.Just $ default_DownloadMessageContentPreview_args{downloadMessageContentPreview_args_messageId = downloadMessageContentPreview_args_messageId obj}
    ]
from_DownloadMessageContentPreview_args :: DownloadMessageContentPreview_args -> T.ThriftVal
from_DownloadMessageContentPreview_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1440 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1440))) $ downloadMessageContentPreview_args_requestId record
  , (\_v1440 -> P.Just (2, ("messageId",T.TString $ E.encodeUtf8 _v1440))) $ downloadMessageContentPreview_args_messageId record
  ]
write_DownloadMessageContentPreview_args :: T.Protocol p => p -> DownloadMessageContentPreview_args -> P.IO ()
write_DownloadMessageContentPreview_args oprot record = T.writeVal oprot $ from_DownloadMessageContentPreview_args record
encode_DownloadMessageContentPreview_args :: T.StatelessProtocol p => p -> DownloadMessageContentPreview_args -> LBS.ByteString
encode_DownloadMessageContentPreview_args oprot record = T.serializeVal oprot $ from_DownloadMessageContentPreview_args record
to_DownloadMessageContentPreview_args :: T.ThriftVal -> DownloadMessageContentPreview_args
to_DownloadMessageContentPreview_args (T.TStruct fields) = DownloadMessageContentPreview_args{
  downloadMessageContentPreview_args_requestId = P.maybe (downloadMessageContentPreview_args_requestId default_DownloadMessageContentPreview_args) (\(_,_val1442) -> (case _val1442 of {T.TString _val1443 -> E.decodeUtf8 _val1443; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  downloadMessageContentPreview_args_messageId = P.maybe (downloadMessageContentPreview_args_messageId default_DownloadMessageContentPreview_args) (\(_,_val1442) -> (case _val1442 of {T.TString _val1444 -> E.decodeUtf8 _val1444; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_DownloadMessageContentPreview_args _ = P.error "not a struct"
read_DownloadMessageContentPreview_args :: T.Protocol p => p -> P.IO DownloadMessageContentPreview_args
read_DownloadMessageContentPreview_args iprot = to_DownloadMessageContentPreview_args <$> T.readVal iprot (T.T_STRUCT typemap_DownloadMessageContentPreview_args)
decode_DownloadMessageContentPreview_args :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadMessageContentPreview_args
decode_DownloadMessageContentPreview_args iprot bs = to_DownloadMessageContentPreview_args $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadMessageContentPreview_args) bs
typemap_DownloadMessageContentPreview_args :: T.TypeMap
typemap_DownloadMessageContentPreview_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("messageId",T.T_STRING))]
default_DownloadMessageContentPreview_args :: DownloadMessageContentPreview_args
default_DownloadMessageContentPreview_args = DownloadMessageContentPreview_args{
  downloadMessageContentPreview_args_requestId = "",
  downloadMessageContentPreview_args_messageId = ""}
data DownloadMessageContentPreview_result = DownloadMessageContentPreview_result  { downloadMessageContentPreview_result_success :: LBS.ByteString
  , downloadMessageContentPreview_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadMessageContentPreview_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadMessageContentPreview_result_success record   `H.hashWithSalt` downloadMessageContentPreview_result_e record  
instance QC.Arbitrary DownloadMessageContentPreview_result where 
  arbitrary = M.liftM DownloadMessageContentPreview_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_DownloadMessageContentPreview_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadMessageContentPreview_result{downloadMessageContentPreview_result_success = downloadMessageContentPreview_result_success obj} then P.Nothing else P.Just $ default_DownloadMessageContentPreview_result{downloadMessageContentPreview_result_success = downloadMessageContentPreview_result_success obj}
    , if obj == default_DownloadMessageContentPreview_result{downloadMessageContentPreview_result_e = downloadMessageContentPreview_result_e obj} then P.Nothing else P.Just $ default_DownloadMessageContentPreview_result{downloadMessageContentPreview_result_e = downloadMessageContentPreview_result_e obj}
    ]
from_DownloadMessageContentPreview_result :: DownloadMessageContentPreview_result -> T.ThriftVal
from_DownloadMessageContentPreview_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1447 -> (1, ("e",from_TalkException _v1447))) <$> downloadMessageContentPreview_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1447 -> P.Just (0, ("success",T.TBinary _v1447))) $ downloadMessageContentPreview_result_success record
    , (\_v1447 -> (1, ("e",from_TalkException _v1447))) <$> downloadMessageContentPreview_result_e record
    ]
    )
write_DownloadMessageContentPreview_result :: T.Protocol p => p -> DownloadMessageContentPreview_result -> P.IO ()
write_DownloadMessageContentPreview_result oprot record = T.writeVal oprot $ from_DownloadMessageContentPreview_result record
encode_DownloadMessageContentPreview_result :: T.StatelessProtocol p => p -> DownloadMessageContentPreview_result -> LBS.ByteString
encode_DownloadMessageContentPreview_result oprot record = T.serializeVal oprot $ from_DownloadMessageContentPreview_result record
to_DownloadMessageContentPreview_result :: T.ThriftVal -> DownloadMessageContentPreview_result
to_DownloadMessageContentPreview_result (T.TStruct fields) = DownloadMessageContentPreview_result{
  downloadMessageContentPreview_result_success = P.maybe (downloadMessageContentPreview_result_success default_DownloadMessageContentPreview_result) (\(_,_val1449) -> (case _val1449 of {T.TBinary _val1450 -> _val1450; T.TString _val1450 -> _val1450; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  downloadMessageContentPreview_result_e = P.maybe (P.Nothing) (\(_,_val1449) -> P.Just (case _val1449 of {T.TStruct _val1451 -> (to_TalkException (T.TStruct _val1451)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_DownloadMessageContentPreview_result _ = P.error "not a struct"
read_DownloadMessageContentPreview_result :: T.Protocol p => p -> P.IO DownloadMessageContentPreview_result
read_DownloadMessageContentPreview_result iprot = to_DownloadMessageContentPreview_result <$> T.readVal iprot (T.T_STRUCT typemap_DownloadMessageContentPreview_result)
decode_DownloadMessageContentPreview_result :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadMessageContentPreview_result
decode_DownloadMessageContentPreview_result iprot bs = to_DownloadMessageContentPreview_result $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadMessageContentPreview_result) bs
typemap_DownloadMessageContentPreview_result :: T.TypeMap
typemap_DownloadMessageContentPreview_result = Map.fromList [(0,("success",T.T_BINARY)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_DownloadMessageContentPreview_result :: DownloadMessageContentPreview_result
default_DownloadMessageContentPreview_result = DownloadMessageContentPreview_result{
  downloadMessageContentPreview_result_success = "",
  downloadMessageContentPreview_result_e = P.Nothing}
data DownloadProfileImage_args = DownloadProfileImage_args  { downloadProfileImage_args_requestId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadProfileImage_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadProfileImage_args_requestId record  
instance QC.Arbitrary DownloadProfileImage_args where 
  arbitrary = M.liftM DownloadProfileImage_args (QC.arbitrary)
  shrink obj | obj == default_DownloadProfileImage_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadProfileImage_args{downloadProfileImage_args_requestId = downloadProfileImage_args_requestId obj} then P.Nothing else P.Just $ default_DownloadProfileImage_args{downloadProfileImage_args_requestId = downloadProfileImage_args_requestId obj}
    ]
from_DownloadProfileImage_args :: DownloadProfileImage_args -> T.ThriftVal
from_DownloadProfileImage_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1454 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1454))) $ downloadProfileImage_args_requestId record
  ]
write_DownloadProfileImage_args :: T.Protocol p => p -> DownloadProfileImage_args -> P.IO ()
write_DownloadProfileImage_args oprot record = T.writeVal oprot $ from_DownloadProfileImage_args record
encode_DownloadProfileImage_args :: T.StatelessProtocol p => p -> DownloadProfileImage_args -> LBS.ByteString
encode_DownloadProfileImage_args oprot record = T.serializeVal oprot $ from_DownloadProfileImage_args record
to_DownloadProfileImage_args :: T.ThriftVal -> DownloadProfileImage_args
to_DownloadProfileImage_args (T.TStruct fields) = DownloadProfileImage_args{
  downloadProfileImage_args_requestId = P.maybe (downloadProfileImage_args_requestId default_DownloadProfileImage_args) (\(_,_val1456) -> (case _val1456 of {T.TString _val1457 -> E.decodeUtf8 _val1457; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_DownloadProfileImage_args _ = P.error "not a struct"
read_DownloadProfileImage_args :: T.Protocol p => p -> P.IO DownloadProfileImage_args
read_DownloadProfileImage_args iprot = to_DownloadProfileImage_args <$> T.readVal iprot (T.T_STRUCT typemap_DownloadProfileImage_args)
decode_DownloadProfileImage_args :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadProfileImage_args
decode_DownloadProfileImage_args iprot bs = to_DownloadProfileImage_args $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadProfileImage_args) bs
typemap_DownloadProfileImage_args :: T.TypeMap
typemap_DownloadProfileImage_args = Map.fromList [(1,("requestId",T.T_STRING))]
default_DownloadProfileImage_args :: DownloadProfileImage_args
default_DownloadProfileImage_args = DownloadProfileImage_args{
  downloadProfileImage_args_requestId = ""}
data DownloadProfileImage_result = DownloadProfileImage_result  { downloadProfileImage_result_success :: LBS.ByteString
  , downloadProfileImage_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadProfileImage_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadProfileImage_result_success record   `H.hashWithSalt` downloadProfileImage_result_e record  
instance QC.Arbitrary DownloadProfileImage_result where 
  arbitrary = M.liftM DownloadProfileImage_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_DownloadProfileImage_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadProfileImage_result{downloadProfileImage_result_success = downloadProfileImage_result_success obj} then P.Nothing else P.Just $ default_DownloadProfileImage_result{downloadProfileImage_result_success = downloadProfileImage_result_success obj}
    , if obj == default_DownloadProfileImage_result{downloadProfileImage_result_e = downloadProfileImage_result_e obj} then P.Nothing else P.Just $ default_DownloadProfileImage_result{downloadProfileImage_result_e = downloadProfileImage_result_e obj}
    ]
from_DownloadProfileImage_result :: DownloadProfileImage_result -> T.ThriftVal
from_DownloadProfileImage_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1460 -> (1, ("e",from_TalkException _v1460))) <$> downloadProfileImage_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1460 -> P.Just (0, ("success",T.TBinary _v1460))) $ downloadProfileImage_result_success record
    , (\_v1460 -> (1, ("e",from_TalkException _v1460))) <$> downloadProfileImage_result_e record
    ]
    )
write_DownloadProfileImage_result :: T.Protocol p => p -> DownloadProfileImage_result -> P.IO ()
write_DownloadProfileImage_result oprot record = T.writeVal oprot $ from_DownloadProfileImage_result record
encode_DownloadProfileImage_result :: T.StatelessProtocol p => p -> DownloadProfileImage_result -> LBS.ByteString
encode_DownloadProfileImage_result oprot record = T.serializeVal oprot $ from_DownloadProfileImage_result record
to_DownloadProfileImage_result :: T.ThriftVal -> DownloadProfileImage_result
to_DownloadProfileImage_result (T.TStruct fields) = DownloadProfileImage_result{
  downloadProfileImage_result_success = P.maybe (downloadProfileImage_result_success default_DownloadProfileImage_result) (\(_,_val1462) -> (case _val1462 of {T.TBinary _val1463 -> _val1463; T.TString _val1463 -> _val1463; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  downloadProfileImage_result_e = P.maybe (P.Nothing) (\(_,_val1462) -> P.Just (case _val1462 of {T.TStruct _val1464 -> (to_TalkException (T.TStruct _val1464)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_DownloadProfileImage_result _ = P.error "not a struct"
read_DownloadProfileImage_result :: T.Protocol p => p -> P.IO DownloadProfileImage_result
read_DownloadProfileImage_result iprot = to_DownloadProfileImage_result <$> T.readVal iprot (T.T_STRUCT typemap_DownloadProfileImage_result)
decode_DownloadProfileImage_result :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadProfileImage_result
decode_DownloadProfileImage_result iprot bs = to_DownloadProfileImage_result $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadProfileImage_result) bs
typemap_DownloadProfileImage_result :: T.TypeMap
typemap_DownloadProfileImage_result = Map.fromList [(0,("success",T.T_BINARY)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_DownloadProfileImage_result :: DownloadProfileImage_result
default_DownloadProfileImage_result = DownloadProfileImage_result{
  downloadProfileImage_result_success = "",
  downloadProfileImage_result_e = P.Nothing}
data DownloadProfileImagePreview_args = DownloadProfileImagePreview_args  { downloadProfileImagePreview_args_requestId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadProfileImagePreview_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadProfileImagePreview_args_requestId record  
instance QC.Arbitrary DownloadProfileImagePreview_args where 
  arbitrary = M.liftM DownloadProfileImagePreview_args (QC.arbitrary)
  shrink obj | obj == default_DownloadProfileImagePreview_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadProfileImagePreview_args{downloadProfileImagePreview_args_requestId = downloadProfileImagePreview_args_requestId obj} then P.Nothing else P.Just $ default_DownloadProfileImagePreview_args{downloadProfileImagePreview_args_requestId = downloadProfileImagePreview_args_requestId obj}
    ]
from_DownloadProfileImagePreview_args :: DownloadProfileImagePreview_args -> T.ThriftVal
from_DownloadProfileImagePreview_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1467 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1467))) $ downloadProfileImagePreview_args_requestId record
  ]
write_DownloadProfileImagePreview_args :: T.Protocol p => p -> DownloadProfileImagePreview_args -> P.IO ()
write_DownloadProfileImagePreview_args oprot record = T.writeVal oprot $ from_DownloadProfileImagePreview_args record
encode_DownloadProfileImagePreview_args :: T.StatelessProtocol p => p -> DownloadProfileImagePreview_args -> LBS.ByteString
encode_DownloadProfileImagePreview_args oprot record = T.serializeVal oprot $ from_DownloadProfileImagePreview_args record
to_DownloadProfileImagePreview_args :: T.ThriftVal -> DownloadProfileImagePreview_args
to_DownloadProfileImagePreview_args (T.TStruct fields) = DownloadProfileImagePreview_args{
  downloadProfileImagePreview_args_requestId = P.maybe (downloadProfileImagePreview_args_requestId default_DownloadProfileImagePreview_args) (\(_,_val1469) -> (case _val1469 of {T.TString _val1470 -> E.decodeUtf8 _val1470; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_DownloadProfileImagePreview_args _ = P.error "not a struct"
read_DownloadProfileImagePreview_args :: T.Protocol p => p -> P.IO DownloadProfileImagePreview_args
read_DownloadProfileImagePreview_args iprot = to_DownloadProfileImagePreview_args <$> T.readVal iprot (T.T_STRUCT typemap_DownloadProfileImagePreview_args)
decode_DownloadProfileImagePreview_args :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadProfileImagePreview_args
decode_DownloadProfileImagePreview_args iprot bs = to_DownloadProfileImagePreview_args $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadProfileImagePreview_args) bs
typemap_DownloadProfileImagePreview_args :: T.TypeMap
typemap_DownloadProfileImagePreview_args = Map.fromList [(1,("requestId",T.T_STRING))]
default_DownloadProfileImagePreview_args :: DownloadProfileImagePreview_args
default_DownloadProfileImagePreview_args = DownloadProfileImagePreview_args{
  downloadProfileImagePreview_args_requestId = ""}
data DownloadProfileImagePreview_result = DownloadProfileImagePreview_result  { downloadProfileImagePreview_result_success :: LBS.ByteString
  , downloadProfileImagePreview_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DownloadProfileImagePreview_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` downloadProfileImagePreview_result_success record   `H.hashWithSalt` downloadProfileImagePreview_result_e record  
instance QC.Arbitrary DownloadProfileImagePreview_result where 
  arbitrary = M.liftM DownloadProfileImagePreview_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_DownloadProfileImagePreview_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DownloadProfileImagePreview_result{downloadProfileImagePreview_result_success = downloadProfileImagePreview_result_success obj} then P.Nothing else P.Just $ default_DownloadProfileImagePreview_result{downloadProfileImagePreview_result_success = downloadProfileImagePreview_result_success obj}
    , if obj == default_DownloadProfileImagePreview_result{downloadProfileImagePreview_result_e = downloadProfileImagePreview_result_e obj} then P.Nothing else P.Just $ default_DownloadProfileImagePreview_result{downloadProfileImagePreview_result_e = downloadProfileImagePreview_result_e obj}
    ]
from_DownloadProfileImagePreview_result :: DownloadProfileImagePreview_result -> T.ThriftVal
from_DownloadProfileImagePreview_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1473 -> (1, ("e",from_TalkException _v1473))) <$> downloadProfileImagePreview_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1473 -> P.Just (0, ("success",T.TBinary _v1473))) $ downloadProfileImagePreview_result_success record
    , (\_v1473 -> (1, ("e",from_TalkException _v1473))) <$> downloadProfileImagePreview_result_e record
    ]
    )
write_DownloadProfileImagePreview_result :: T.Protocol p => p -> DownloadProfileImagePreview_result -> P.IO ()
write_DownloadProfileImagePreview_result oprot record = T.writeVal oprot $ from_DownloadProfileImagePreview_result record
encode_DownloadProfileImagePreview_result :: T.StatelessProtocol p => p -> DownloadProfileImagePreview_result -> LBS.ByteString
encode_DownloadProfileImagePreview_result oprot record = T.serializeVal oprot $ from_DownloadProfileImagePreview_result record
to_DownloadProfileImagePreview_result :: T.ThriftVal -> DownloadProfileImagePreview_result
to_DownloadProfileImagePreview_result (T.TStruct fields) = DownloadProfileImagePreview_result{
  downloadProfileImagePreview_result_success = P.maybe (downloadProfileImagePreview_result_success default_DownloadProfileImagePreview_result) (\(_,_val1475) -> (case _val1475 of {T.TBinary _val1476 -> _val1476; T.TString _val1476 -> _val1476; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  downloadProfileImagePreview_result_e = P.maybe (P.Nothing) (\(_,_val1475) -> P.Just (case _val1475 of {T.TStruct _val1477 -> (to_TalkException (T.TStruct _val1477)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_DownloadProfileImagePreview_result _ = P.error "not a struct"
read_DownloadProfileImagePreview_result :: T.Protocol p => p -> P.IO DownloadProfileImagePreview_result
read_DownloadProfileImagePreview_result iprot = to_DownloadProfileImagePreview_result <$> T.readVal iprot (T.T_STRUCT typemap_DownloadProfileImagePreview_result)
decode_DownloadProfileImagePreview_result :: T.StatelessProtocol p => p -> LBS.ByteString -> DownloadProfileImagePreview_result
decode_DownloadProfileImagePreview_result iprot bs = to_DownloadProfileImagePreview_result $ T.deserializeVal iprot (T.T_STRUCT typemap_DownloadProfileImagePreview_result) bs
typemap_DownloadProfileImagePreview_result :: T.TypeMap
typemap_DownloadProfileImagePreview_result = Map.fromList [(0,("success",T.T_BINARY)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_DownloadProfileImagePreview_result :: DownloadProfileImagePreview_result
default_DownloadProfileImagePreview_result = DownloadProfileImagePreview_result{
  downloadProfileImagePreview_result_success = "",
  downloadProfileImagePreview_result_e = P.Nothing}
data GetActiveMemberCountByBuddyMid_args = GetActiveMemberCountByBuddyMid_args  { getActiveMemberCountByBuddyMid_args_buddyMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetActiveMemberCountByBuddyMid_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getActiveMemberCountByBuddyMid_args_buddyMid record  
instance QC.Arbitrary GetActiveMemberCountByBuddyMid_args where 
  arbitrary = M.liftM GetActiveMemberCountByBuddyMid_args (QC.arbitrary)
  shrink obj | obj == default_GetActiveMemberCountByBuddyMid_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetActiveMemberCountByBuddyMid_args{getActiveMemberCountByBuddyMid_args_buddyMid = getActiveMemberCountByBuddyMid_args_buddyMid obj} then P.Nothing else P.Just $ default_GetActiveMemberCountByBuddyMid_args{getActiveMemberCountByBuddyMid_args_buddyMid = getActiveMemberCountByBuddyMid_args_buddyMid obj}
    ]
from_GetActiveMemberCountByBuddyMid_args :: GetActiveMemberCountByBuddyMid_args -> T.ThriftVal
from_GetActiveMemberCountByBuddyMid_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1480 -> P.Just (2, ("buddyMid",T.TString $ E.encodeUtf8 _v1480))) $ getActiveMemberCountByBuddyMid_args_buddyMid record
  ]
write_GetActiveMemberCountByBuddyMid_args :: T.Protocol p => p -> GetActiveMemberCountByBuddyMid_args -> P.IO ()
write_GetActiveMemberCountByBuddyMid_args oprot record = T.writeVal oprot $ from_GetActiveMemberCountByBuddyMid_args record
encode_GetActiveMemberCountByBuddyMid_args :: T.StatelessProtocol p => p -> GetActiveMemberCountByBuddyMid_args -> LBS.ByteString
encode_GetActiveMemberCountByBuddyMid_args oprot record = T.serializeVal oprot $ from_GetActiveMemberCountByBuddyMid_args record
to_GetActiveMemberCountByBuddyMid_args :: T.ThriftVal -> GetActiveMemberCountByBuddyMid_args
to_GetActiveMemberCountByBuddyMid_args (T.TStruct fields) = GetActiveMemberCountByBuddyMid_args{
  getActiveMemberCountByBuddyMid_args_buddyMid = P.maybe (getActiveMemberCountByBuddyMid_args_buddyMid default_GetActiveMemberCountByBuddyMid_args) (\(_,_val1482) -> (case _val1482 of {T.TString _val1483 -> E.decodeUtf8 _val1483; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_GetActiveMemberCountByBuddyMid_args _ = P.error "not a struct"
read_GetActiveMemberCountByBuddyMid_args :: T.Protocol p => p -> P.IO GetActiveMemberCountByBuddyMid_args
read_GetActiveMemberCountByBuddyMid_args iprot = to_GetActiveMemberCountByBuddyMid_args <$> T.readVal iprot (T.T_STRUCT typemap_GetActiveMemberCountByBuddyMid_args)
decode_GetActiveMemberCountByBuddyMid_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetActiveMemberCountByBuddyMid_args
decode_GetActiveMemberCountByBuddyMid_args iprot bs = to_GetActiveMemberCountByBuddyMid_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetActiveMemberCountByBuddyMid_args) bs
typemap_GetActiveMemberCountByBuddyMid_args :: T.TypeMap
typemap_GetActiveMemberCountByBuddyMid_args = Map.fromList [(2,("buddyMid",T.T_STRING))]
default_GetActiveMemberCountByBuddyMid_args :: GetActiveMemberCountByBuddyMid_args
default_GetActiveMemberCountByBuddyMid_args = GetActiveMemberCountByBuddyMid_args{
  getActiveMemberCountByBuddyMid_args_buddyMid = ""}
data GetActiveMemberCountByBuddyMid_result = GetActiveMemberCountByBuddyMid_result  { getActiveMemberCountByBuddyMid_result_success :: I.Int64
  , getActiveMemberCountByBuddyMid_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetActiveMemberCountByBuddyMid_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getActiveMemberCountByBuddyMid_result_success record   `H.hashWithSalt` getActiveMemberCountByBuddyMid_result_e record  
instance QC.Arbitrary GetActiveMemberCountByBuddyMid_result where 
  arbitrary = M.liftM GetActiveMemberCountByBuddyMid_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetActiveMemberCountByBuddyMid_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetActiveMemberCountByBuddyMid_result{getActiveMemberCountByBuddyMid_result_success = getActiveMemberCountByBuddyMid_result_success obj} then P.Nothing else P.Just $ default_GetActiveMemberCountByBuddyMid_result{getActiveMemberCountByBuddyMid_result_success = getActiveMemberCountByBuddyMid_result_success obj}
    , if obj == default_GetActiveMemberCountByBuddyMid_result{getActiveMemberCountByBuddyMid_result_e = getActiveMemberCountByBuddyMid_result_e obj} then P.Nothing else P.Just $ default_GetActiveMemberCountByBuddyMid_result{getActiveMemberCountByBuddyMid_result_e = getActiveMemberCountByBuddyMid_result_e obj}
    ]
from_GetActiveMemberCountByBuddyMid_result :: GetActiveMemberCountByBuddyMid_result -> T.ThriftVal
from_GetActiveMemberCountByBuddyMid_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1486 -> (1, ("e",from_TalkException _v1486))) <$> getActiveMemberCountByBuddyMid_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1486 -> P.Just (0, ("success",T.TI64 _v1486))) $ getActiveMemberCountByBuddyMid_result_success record
    , (\_v1486 -> (1, ("e",from_TalkException _v1486))) <$> getActiveMemberCountByBuddyMid_result_e record
    ]
    )
write_GetActiveMemberCountByBuddyMid_result :: T.Protocol p => p -> GetActiveMemberCountByBuddyMid_result -> P.IO ()
write_GetActiveMemberCountByBuddyMid_result oprot record = T.writeVal oprot $ from_GetActiveMemberCountByBuddyMid_result record
encode_GetActiveMemberCountByBuddyMid_result :: T.StatelessProtocol p => p -> GetActiveMemberCountByBuddyMid_result -> LBS.ByteString
encode_GetActiveMemberCountByBuddyMid_result oprot record = T.serializeVal oprot $ from_GetActiveMemberCountByBuddyMid_result record
to_GetActiveMemberCountByBuddyMid_result :: T.ThriftVal -> GetActiveMemberCountByBuddyMid_result
to_GetActiveMemberCountByBuddyMid_result (T.TStruct fields) = GetActiveMemberCountByBuddyMid_result{
  getActiveMemberCountByBuddyMid_result_success = P.maybe (getActiveMemberCountByBuddyMid_result_success default_GetActiveMemberCountByBuddyMid_result) (\(_,_val1488) -> (case _val1488 of {T.TI64 _val1489 -> _val1489; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getActiveMemberCountByBuddyMid_result_e = P.maybe (P.Nothing) (\(_,_val1488) -> P.Just (case _val1488 of {T.TStruct _val1490 -> (to_TalkException (T.TStruct _val1490)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetActiveMemberCountByBuddyMid_result _ = P.error "not a struct"
read_GetActiveMemberCountByBuddyMid_result :: T.Protocol p => p -> P.IO GetActiveMemberCountByBuddyMid_result
read_GetActiveMemberCountByBuddyMid_result iprot = to_GetActiveMemberCountByBuddyMid_result <$> T.readVal iprot (T.T_STRUCT typemap_GetActiveMemberCountByBuddyMid_result)
decode_GetActiveMemberCountByBuddyMid_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetActiveMemberCountByBuddyMid_result
decode_GetActiveMemberCountByBuddyMid_result iprot bs = to_GetActiveMemberCountByBuddyMid_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetActiveMemberCountByBuddyMid_result) bs
typemap_GetActiveMemberCountByBuddyMid_result :: T.TypeMap
typemap_GetActiveMemberCountByBuddyMid_result = Map.fromList [(0,("success",T.T_I64)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetActiveMemberCountByBuddyMid_result :: GetActiveMemberCountByBuddyMid_result
default_GetActiveMemberCountByBuddyMid_result = GetActiveMemberCountByBuddyMid_result{
  getActiveMemberCountByBuddyMid_result_success = 0,
  getActiveMemberCountByBuddyMid_result_e = P.Nothing}
data GetActiveMemberMidsByBuddyMid_args = GetActiveMemberMidsByBuddyMid_args  { getActiveMemberMidsByBuddyMid_args_buddyMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetActiveMemberMidsByBuddyMid_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getActiveMemberMidsByBuddyMid_args_buddyMid record  
instance QC.Arbitrary GetActiveMemberMidsByBuddyMid_args where 
  arbitrary = M.liftM GetActiveMemberMidsByBuddyMid_args (QC.arbitrary)
  shrink obj | obj == default_GetActiveMemberMidsByBuddyMid_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetActiveMemberMidsByBuddyMid_args{getActiveMemberMidsByBuddyMid_args_buddyMid = getActiveMemberMidsByBuddyMid_args_buddyMid obj} then P.Nothing else P.Just $ default_GetActiveMemberMidsByBuddyMid_args{getActiveMemberMidsByBuddyMid_args_buddyMid = getActiveMemberMidsByBuddyMid_args_buddyMid obj}
    ]
from_GetActiveMemberMidsByBuddyMid_args :: GetActiveMemberMidsByBuddyMid_args -> T.ThriftVal
from_GetActiveMemberMidsByBuddyMid_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1493 -> P.Just (2, ("buddyMid",T.TString $ E.encodeUtf8 _v1493))) $ getActiveMemberMidsByBuddyMid_args_buddyMid record
  ]
write_GetActiveMemberMidsByBuddyMid_args :: T.Protocol p => p -> GetActiveMemberMidsByBuddyMid_args -> P.IO ()
write_GetActiveMemberMidsByBuddyMid_args oprot record = T.writeVal oprot $ from_GetActiveMemberMidsByBuddyMid_args record
encode_GetActiveMemberMidsByBuddyMid_args :: T.StatelessProtocol p => p -> GetActiveMemberMidsByBuddyMid_args -> LBS.ByteString
encode_GetActiveMemberMidsByBuddyMid_args oprot record = T.serializeVal oprot $ from_GetActiveMemberMidsByBuddyMid_args record
to_GetActiveMemberMidsByBuddyMid_args :: T.ThriftVal -> GetActiveMemberMidsByBuddyMid_args
to_GetActiveMemberMidsByBuddyMid_args (T.TStruct fields) = GetActiveMemberMidsByBuddyMid_args{
  getActiveMemberMidsByBuddyMid_args_buddyMid = P.maybe (getActiveMemberMidsByBuddyMid_args_buddyMid default_GetActiveMemberMidsByBuddyMid_args) (\(_,_val1495) -> (case _val1495 of {T.TString _val1496 -> E.decodeUtf8 _val1496; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_GetActiveMemberMidsByBuddyMid_args _ = P.error "not a struct"
read_GetActiveMemberMidsByBuddyMid_args :: T.Protocol p => p -> P.IO GetActiveMemberMidsByBuddyMid_args
read_GetActiveMemberMidsByBuddyMid_args iprot = to_GetActiveMemberMidsByBuddyMid_args <$> T.readVal iprot (T.T_STRUCT typemap_GetActiveMemberMidsByBuddyMid_args)
decode_GetActiveMemberMidsByBuddyMid_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetActiveMemberMidsByBuddyMid_args
decode_GetActiveMemberMidsByBuddyMid_args iprot bs = to_GetActiveMemberMidsByBuddyMid_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetActiveMemberMidsByBuddyMid_args) bs
typemap_GetActiveMemberMidsByBuddyMid_args :: T.TypeMap
typemap_GetActiveMemberMidsByBuddyMid_args = Map.fromList [(2,("buddyMid",T.T_STRING))]
default_GetActiveMemberMidsByBuddyMid_args :: GetActiveMemberMidsByBuddyMid_args
default_GetActiveMemberMidsByBuddyMid_args = GetActiveMemberMidsByBuddyMid_args{
  getActiveMemberMidsByBuddyMid_args_buddyMid = ""}
data GetActiveMemberMidsByBuddyMid_result = GetActiveMemberMidsByBuddyMid_result  { getActiveMemberMidsByBuddyMid_result_success :: (Vector.Vector LT.Text)
  , getActiveMemberMidsByBuddyMid_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetActiveMemberMidsByBuddyMid_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getActiveMemberMidsByBuddyMid_result_success record   `H.hashWithSalt` getActiveMemberMidsByBuddyMid_result_e record  
instance QC.Arbitrary GetActiveMemberMidsByBuddyMid_result where 
  arbitrary = M.liftM GetActiveMemberMidsByBuddyMid_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetActiveMemberMidsByBuddyMid_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetActiveMemberMidsByBuddyMid_result{getActiveMemberMidsByBuddyMid_result_success = getActiveMemberMidsByBuddyMid_result_success obj} then P.Nothing else P.Just $ default_GetActiveMemberMidsByBuddyMid_result{getActiveMemberMidsByBuddyMid_result_success = getActiveMemberMidsByBuddyMid_result_success obj}
    , if obj == default_GetActiveMemberMidsByBuddyMid_result{getActiveMemberMidsByBuddyMid_result_e = getActiveMemberMidsByBuddyMid_result_e obj} then P.Nothing else P.Just $ default_GetActiveMemberMidsByBuddyMid_result{getActiveMemberMidsByBuddyMid_result_e = getActiveMemberMidsByBuddyMid_result_e obj}
    ]
from_GetActiveMemberMidsByBuddyMid_result :: GetActiveMemberMidsByBuddyMid_result -> T.ThriftVal
from_GetActiveMemberMidsByBuddyMid_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1499 -> (1, ("e",from_TalkException _v1499))) <$> getActiveMemberMidsByBuddyMid_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1499 -> P.Just (0, ("success",T.TList T.T_STRING $ P.map (\_v1501 -> T.TString $ E.encodeUtf8 _v1501) $ Vector.toList _v1499))) $ getActiveMemberMidsByBuddyMid_result_success record
    , (\_v1499 -> (1, ("e",from_TalkException _v1499))) <$> getActiveMemberMidsByBuddyMid_result_e record
    ]
    )
write_GetActiveMemberMidsByBuddyMid_result :: T.Protocol p => p -> GetActiveMemberMidsByBuddyMid_result -> P.IO ()
write_GetActiveMemberMidsByBuddyMid_result oprot record = T.writeVal oprot $ from_GetActiveMemberMidsByBuddyMid_result record
encode_GetActiveMemberMidsByBuddyMid_result :: T.StatelessProtocol p => p -> GetActiveMemberMidsByBuddyMid_result -> LBS.ByteString
encode_GetActiveMemberMidsByBuddyMid_result oprot record = T.serializeVal oprot $ from_GetActiveMemberMidsByBuddyMid_result record
to_GetActiveMemberMidsByBuddyMid_result :: T.ThriftVal -> GetActiveMemberMidsByBuddyMid_result
to_GetActiveMemberMidsByBuddyMid_result (T.TStruct fields) = GetActiveMemberMidsByBuddyMid_result{
  getActiveMemberMidsByBuddyMid_result_success = P.maybe (getActiveMemberMidsByBuddyMid_result_success default_GetActiveMemberMidsByBuddyMid_result) (\(_,_val1503) -> (case _val1503 of {T.TList _ _val1504 -> (Vector.fromList $ P.map (\_v1505 -> (case _v1505 of {T.TString _val1506 -> E.decodeUtf8 _val1506; _ -> P.error "wrong type"})) _val1504); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getActiveMemberMidsByBuddyMid_result_e = P.maybe (P.Nothing) (\(_,_val1503) -> P.Just (case _val1503 of {T.TStruct _val1507 -> (to_TalkException (T.TStruct _val1507)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetActiveMemberMidsByBuddyMid_result _ = P.error "not a struct"
read_GetActiveMemberMidsByBuddyMid_result :: T.Protocol p => p -> P.IO GetActiveMemberMidsByBuddyMid_result
read_GetActiveMemberMidsByBuddyMid_result iprot = to_GetActiveMemberMidsByBuddyMid_result <$> T.readVal iprot (T.T_STRUCT typemap_GetActiveMemberMidsByBuddyMid_result)
decode_GetActiveMemberMidsByBuddyMid_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetActiveMemberMidsByBuddyMid_result
decode_GetActiveMemberMidsByBuddyMid_result iprot bs = to_GetActiveMemberMidsByBuddyMid_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetActiveMemberMidsByBuddyMid_result) bs
typemap_GetActiveMemberMidsByBuddyMid_result :: T.TypeMap
typemap_GetActiveMemberMidsByBuddyMid_result = Map.fromList [(0,("success",(T.T_LIST T.T_STRING))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetActiveMemberMidsByBuddyMid_result :: GetActiveMemberMidsByBuddyMid_result
default_GetActiveMemberMidsByBuddyMid_result = GetActiveMemberMidsByBuddyMid_result{
  getActiveMemberMidsByBuddyMid_result_success = Vector.empty,
  getActiveMemberMidsByBuddyMid_result_e = P.Nothing}
data GetAllBuddyMembers_args = GetAllBuddyMembers_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetAllBuddyMembers_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary GetAllBuddyMembers_args where 
  arbitrary = QC.elements [GetAllBuddyMembers_args]
from_GetAllBuddyMembers_args :: GetAllBuddyMembers_args -> T.ThriftVal
from_GetAllBuddyMembers_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_GetAllBuddyMembers_args :: T.Protocol p => p -> GetAllBuddyMembers_args -> P.IO ()
write_GetAllBuddyMembers_args oprot record = T.writeVal oprot $ from_GetAllBuddyMembers_args record
encode_GetAllBuddyMembers_args :: T.StatelessProtocol p => p -> GetAllBuddyMembers_args -> LBS.ByteString
encode_GetAllBuddyMembers_args oprot record = T.serializeVal oprot $ from_GetAllBuddyMembers_args record
to_GetAllBuddyMembers_args :: T.ThriftVal -> GetAllBuddyMembers_args
to_GetAllBuddyMembers_args (T.TStruct fields) = GetAllBuddyMembers_args{

  }
to_GetAllBuddyMembers_args _ = P.error "not a struct"
read_GetAllBuddyMembers_args :: T.Protocol p => p -> P.IO GetAllBuddyMembers_args
read_GetAllBuddyMembers_args iprot = to_GetAllBuddyMembers_args <$> T.readVal iprot (T.T_STRUCT typemap_GetAllBuddyMembers_args)
decode_GetAllBuddyMembers_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetAllBuddyMembers_args
decode_GetAllBuddyMembers_args iprot bs = to_GetAllBuddyMembers_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetAllBuddyMembers_args) bs
typemap_GetAllBuddyMembers_args :: T.TypeMap
typemap_GetAllBuddyMembers_args = Map.fromList []
default_GetAllBuddyMembers_args :: GetAllBuddyMembers_args
default_GetAllBuddyMembers_args = GetAllBuddyMembers_args{
}
data GetAllBuddyMembers_result = GetAllBuddyMembers_result  { getAllBuddyMembers_result_success :: (Vector.Vector LT.Text)
  , getAllBuddyMembers_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetAllBuddyMembers_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getAllBuddyMembers_result_success record   `H.hashWithSalt` getAllBuddyMembers_result_e record  
instance QC.Arbitrary GetAllBuddyMembers_result where 
  arbitrary = M.liftM GetAllBuddyMembers_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetAllBuddyMembers_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetAllBuddyMembers_result{getAllBuddyMembers_result_success = getAllBuddyMembers_result_success obj} then P.Nothing else P.Just $ default_GetAllBuddyMembers_result{getAllBuddyMembers_result_success = getAllBuddyMembers_result_success obj}
    , if obj == default_GetAllBuddyMembers_result{getAllBuddyMembers_result_e = getAllBuddyMembers_result_e obj} then P.Nothing else P.Just $ default_GetAllBuddyMembers_result{getAllBuddyMembers_result_e = getAllBuddyMembers_result_e obj}
    ]
from_GetAllBuddyMembers_result :: GetAllBuddyMembers_result -> T.ThriftVal
from_GetAllBuddyMembers_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1515 -> (1, ("e",from_TalkException _v1515))) <$> getAllBuddyMembers_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1515 -> P.Just (0, ("success",T.TList T.T_STRING $ P.map (\_v1517 -> T.TString $ E.encodeUtf8 _v1517) $ Vector.toList _v1515))) $ getAllBuddyMembers_result_success record
    , (\_v1515 -> (1, ("e",from_TalkException _v1515))) <$> getAllBuddyMembers_result_e record
    ]
    )
write_GetAllBuddyMembers_result :: T.Protocol p => p -> GetAllBuddyMembers_result -> P.IO ()
write_GetAllBuddyMembers_result oprot record = T.writeVal oprot $ from_GetAllBuddyMembers_result record
encode_GetAllBuddyMembers_result :: T.StatelessProtocol p => p -> GetAllBuddyMembers_result -> LBS.ByteString
encode_GetAllBuddyMembers_result oprot record = T.serializeVal oprot $ from_GetAllBuddyMembers_result record
to_GetAllBuddyMembers_result :: T.ThriftVal -> GetAllBuddyMembers_result
to_GetAllBuddyMembers_result (T.TStruct fields) = GetAllBuddyMembers_result{
  getAllBuddyMembers_result_success = P.maybe (getAllBuddyMembers_result_success default_GetAllBuddyMembers_result) (\(_,_val1519) -> (case _val1519 of {T.TList _ _val1520 -> (Vector.fromList $ P.map (\_v1521 -> (case _v1521 of {T.TString _val1522 -> E.decodeUtf8 _val1522; _ -> P.error "wrong type"})) _val1520); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getAllBuddyMembers_result_e = P.maybe (P.Nothing) (\(_,_val1519) -> P.Just (case _val1519 of {T.TStruct _val1523 -> (to_TalkException (T.TStruct _val1523)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetAllBuddyMembers_result _ = P.error "not a struct"
read_GetAllBuddyMembers_result :: T.Protocol p => p -> P.IO GetAllBuddyMembers_result
read_GetAllBuddyMembers_result iprot = to_GetAllBuddyMembers_result <$> T.readVal iprot (T.T_STRUCT typemap_GetAllBuddyMembers_result)
decode_GetAllBuddyMembers_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetAllBuddyMembers_result
decode_GetAllBuddyMembers_result iprot bs = to_GetAllBuddyMembers_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetAllBuddyMembers_result) bs
typemap_GetAllBuddyMembers_result :: T.TypeMap
typemap_GetAllBuddyMembers_result = Map.fromList [(0,("success",(T.T_LIST T.T_STRING))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetAllBuddyMembers_result :: GetAllBuddyMembers_result
default_GetAllBuddyMembers_result = GetAllBuddyMembers_result{
  getAllBuddyMembers_result_success = Vector.empty,
  getAllBuddyMembers_result_e = P.Nothing}
data GetBlockedBuddyMembers_args = GetBlockedBuddyMembers_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBlockedBuddyMembers_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary GetBlockedBuddyMembers_args where 
  arbitrary = QC.elements [GetBlockedBuddyMembers_args]
from_GetBlockedBuddyMembers_args :: GetBlockedBuddyMembers_args -> T.ThriftVal
from_GetBlockedBuddyMembers_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_GetBlockedBuddyMembers_args :: T.Protocol p => p -> GetBlockedBuddyMembers_args -> P.IO ()
write_GetBlockedBuddyMembers_args oprot record = T.writeVal oprot $ from_GetBlockedBuddyMembers_args record
encode_GetBlockedBuddyMembers_args :: T.StatelessProtocol p => p -> GetBlockedBuddyMembers_args -> LBS.ByteString
encode_GetBlockedBuddyMembers_args oprot record = T.serializeVal oprot $ from_GetBlockedBuddyMembers_args record
to_GetBlockedBuddyMembers_args :: T.ThriftVal -> GetBlockedBuddyMembers_args
to_GetBlockedBuddyMembers_args (T.TStruct fields) = GetBlockedBuddyMembers_args{

  }
to_GetBlockedBuddyMembers_args _ = P.error "not a struct"
read_GetBlockedBuddyMembers_args :: T.Protocol p => p -> P.IO GetBlockedBuddyMembers_args
read_GetBlockedBuddyMembers_args iprot = to_GetBlockedBuddyMembers_args <$> T.readVal iprot (T.T_STRUCT typemap_GetBlockedBuddyMembers_args)
decode_GetBlockedBuddyMembers_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBlockedBuddyMembers_args
decode_GetBlockedBuddyMembers_args iprot bs = to_GetBlockedBuddyMembers_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBlockedBuddyMembers_args) bs
typemap_GetBlockedBuddyMembers_args :: T.TypeMap
typemap_GetBlockedBuddyMembers_args = Map.fromList []
default_GetBlockedBuddyMembers_args :: GetBlockedBuddyMembers_args
default_GetBlockedBuddyMembers_args = GetBlockedBuddyMembers_args{
}
data GetBlockedBuddyMembers_result = GetBlockedBuddyMembers_result  { getBlockedBuddyMembers_result_success :: (Vector.Vector LT.Text)
  , getBlockedBuddyMembers_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBlockedBuddyMembers_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBlockedBuddyMembers_result_success record   `H.hashWithSalt` getBlockedBuddyMembers_result_e record  
instance QC.Arbitrary GetBlockedBuddyMembers_result where 
  arbitrary = M.liftM GetBlockedBuddyMembers_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetBlockedBuddyMembers_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBlockedBuddyMembers_result{getBlockedBuddyMembers_result_success = getBlockedBuddyMembers_result_success obj} then P.Nothing else P.Just $ default_GetBlockedBuddyMembers_result{getBlockedBuddyMembers_result_success = getBlockedBuddyMembers_result_success obj}
    , if obj == default_GetBlockedBuddyMembers_result{getBlockedBuddyMembers_result_e = getBlockedBuddyMembers_result_e obj} then P.Nothing else P.Just $ default_GetBlockedBuddyMembers_result{getBlockedBuddyMembers_result_e = getBlockedBuddyMembers_result_e obj}
    ]
from_GetBlockedBuddyMembers_result :: GetBlockedBuddyMembers_result -> T.ThriftVal
from_GetBlockedBuddyMembers_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1531 -> (1, ("e",from_TalkException _v1531))) <$> getBlockedBuddyMembers_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1531 -> P.Just (0, ("success",T.TList T.T_STRING $ P.map (\_v1533 -> T.TString $ E.encodeUtf8 _v1533) $ Vector.toList _v1531))) $ getBlockedBuddyMembers_result_success record
    , (\_v1531 -> (1, ("e",from_TalkException _v1531))) <$> getBlockedBuddyMembers_result_e record
    ]
    )
write_GetBlockedBuddyMembers_result :: T.Protocol p => p -> GetBlockedBuddyMembers_result -> P.IO ()
write_GetBlockedBuddyMembers_result oprot record = T.writeVal oprot $ from_GetBlockedBuddyMembers_result record
encode_GetBlockedBuddyMembers_result :: T.StatelessProtocol p => p -> GetBlockedBuddyMembers_result -> LBS.ByteString
encode_GetBlockedBuddyMembers_result oprot record = T.serializeVal oprot $ from_GetBlockedBuddyMembers_result record
to_GetBlockedBuddyMembers_result :: T.ThriftVal -> GetBlockedBuddyMembers_result
to_GetBlockedBuddyMembers_result (T.TStruct fields) = GetBlockedBuddyMembers_result{
  getBlockedBuddyMembers_result_success = P.maybe (getBlockedBuddyMembers_result_success default_GetBlockedBuddyMembers_result) (\(_,_val1535) -> (case _val1535 of {T.TList _ _val1536 -> (Vector.fromList $ P.map (\_v1537 -> (case _v1537 of {T.TString _val1538 -> E.decodeUtf8 _val1538; _ -> P.error "wrong type"})) _val1536); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getBlockedBuddyMembers_result_e = P.maybe (P.Nothing) (\(_,_val1535) -> P.Just (case _val1535 of {T.TStruct _val1539 -> (to_TalkException (T.TStruct _val1539)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetBlockedBuddyMembers_result _ = P.error "not a struct"
read_GetBlockedBuddyMembers_result :: T.Protocol p => p -> P.IO GetBlockedBuddyMembers_result
read_GetBlockedBuddyMembers_result iprot = to_GetBlockedBuddyMembers_result <$> T.readVal iprot (T.T_STRUCT typemap_GetBlockedBuddyMembers_result)
decode_GetBlockedBuddyMembers_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBlockedBuddyMembers_result
decode_GetBlockedBuddyMembers_result iprot bs = to_GetBlockedBuddyMembers_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBlockedBuddyMembers_result) bs
typemap_GetBlockedBuddyMembers_result :: T.TypeMap
typemap_GetBlockedBuddyMembers_result = Map.fromList [(0,("success",(T.T_LIST T.T_STRING))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetBlockedBuddyMembers_result :: GetBlockedBuddyMembers_result
default_GetBlockedBuddyMembers_result = GetBlockedBuddyMembers_result{
  getBlockedBuddyMembers_result_success = Vector.empty,
  getBlockedBuddyMembers_result_e = P.Nothing}
data GetBlockerCountByBuddyMid_args = GetBlockerCountByBuddyMid_args  { getBlockerCountByBuddyMid_args_buddyMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBlockerCountByBuddyMid_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBlockerCountByBuddyMid_args_buddyMid record  
instance QC.Arbitrary GetBlockerCountByBuddyMid_args where 
  arbitrary = M.liftM GetBlockerCountByBuddyMid_args (QC.arbitrary)
  shrink obj | obj == default_GetBlockerCountByBuddyMid_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBlockerCountByBuddyMid_args{getBlockerCountByBuddyMid_args_buddyMid = getBlockerCountByBuddyMid_args_buddyMid obj} then P.Nothing else P.Just $ default_GetBlockerCountByBuddyMid_args{getBlockerCountByBuddyMid_args_buddyMid = getBlockerCountByBuddyMid_args_buddyMid obj}
    ]
from_GetBlockerCountByBuddyMid_args :: GetBlockerCountByBuddyMid_args -> T.ThriftVal
from_GetBlockerCountByBuddyMid_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1542 -> P.Just (2, ("buddyMid",T.TString $ E.encodeUtf8 _v1542))) $ getBlockerCountByBuddyMid_args_buddyMid record
  ]
write_GetBlockerCountByBuddyMid_args :: T.Protocol p => p -> GetBlockerCountByBuddyMid_args -> P.IO ()
write_GetBlockerCountByBuddyMid_args oprot record = T.writeVal oprot $ from_GetBlockerCountByBuddyMid_args record
encode_GetBlockerCountByBuddyMid_args :: T.StatelessProtocol p => p -> GetBlockerCountByBuddyMid_args -> LBS.ByteString
encode_GetBlockerCountByBuddyMid_args oprot record = T.serializeVal oprot $ from_GetBlockerCountByBuddyMid_args record
to_GetBlockerCountByBuddyMid_args :: T.ThriftVal -> GetBlockerCountByBuddyMid_args
to_GetBlockerCountByBuddyMid_args (T.TStruct fields) = GetBlockerCountByBuddyMid_args{
  getBlockerCountByBuddyMid_args_buddyMid = P.maybe (getBlockerCountByBuddyMid_args_buddyMid default_GetBlockerCountByBuddyMid_args) (\(_,_val1544) -> (case _val1544 of {T.TString _val1545 -> E.decodeUtf8 _val1545; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_GetBlockerCountByBuddyMid_args _ = P.error "not a struct"
read_GetBlockerCountByBuddyMid_args :: T.Protocol p => p -> P.IO GetBlockerCountByBuddyMid_args
read_GetBlockerCountByBuddyMid_args iprot = to_GetBlockerCountByBuddyMid_args <$> T.readVal iprot (T.T_STRUCT typemap_GetBlockerCountByBuddyMid_args)
decode_GetBlockerCountByBuddyMid_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBlockerCountByBuddyMid_args
decode_GetBlockerCountByBuddyMid_args iprot bs = to_GetBlockerCountByBuddyMid_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBlockerCountByBuddyMid_args) bs
typemap_GetBlockerCountByBuddyMid_args :: T.TypeMap
typemap_GetBlockerCountByBuddyMid_args = Map.fromList [(2,("buddyMid",T.T_STRING))]
default_GetBlockerCountByBuddyMid_args :: GetBlockerCountByBuddyMid_args
default_GetBlockerCountByBuddyMid_args = GetBlockerCountByBuddyMid_args{
  getBlockerCountByBuddyMid_args_buddyMid = ""}
data GetBlockerCountByBuddyMid_result = GetBlockerCountByBuddyMid_result  { getBlockerCountByBuddyMid_result_success :: I.Int64
  , getBlockerCountByBuddyMid_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBlockerCountByBuddyMid_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBlockerCountByBuddyMid_result_success record   `H.hashWithSalt` getBlockerCountByBuddyMid_result_e record  
instance QC.Arbitrary GetBlockerCountByBuddyMid_result where 
  arbitrary = M.liftM GetBlockerCountByBuddyMid_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetBlockerCountByBuddyMid_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBlockerCountByBuddyMid_result{getBlockerCountByBuddyMid_result_success = getBlockerCountByBuddyMid_result_success obj} then P.Nothing else P.Just $ default_GetBlockerCountByBuddyMid_result{getBlockerCountByBuddyMid_result_success = getBlockerCountByBuddyMid_result_success obj}
    , if obj == default_GetBlockerCountByBuddyMid_result{getBlockerCountByBuddyMid_result_e = getBlockerCountByBuddyMid_result_e obj} then P.Nothing else P.Just $ default_GetBlockerCountByBuddyMid_result{getBlockerCountByBuddyMid_result_e = getBlockerCountByBuddyMid_result_e obj}
    ]
from_GetBlockerCountByBuddyMid_result :: GetBlockerCountByBuddyMid_result -> T.ThriftVal
from_GetBlockerCountByBuddyMid_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1548 -> (1, ("e",from_TalkException _v1548))) <$> getBlockerCountByBuddyMid_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1548 -> P.Just (0, ("success",T.TI64 _v1548))) $ getBlockerCountByBuddyMid_result_success record
    , (\_v1548 -> (1, ("e",from_TalkException _v1548))) <$> getBlockerCountByBuddyMid_result_e record
    ]
    )
write_GetBlockerCountByBuddyMid_result :: T.Protocol p => p -> GetBlockerCountByBuddyMid_result -> P.IO ()
write_GetBlockerCountByBuddyMid_result oprot record = T.writeVal oprot $ from_GetBlockerCountByBuddyMid_result record
encode_GetBlockerCountByBuddyMid_result :: T.StatelessProtocol p => p -> GetBlockerCountByBuddyMid_result -> LBS.ByteString
encode_GetBlockerCountByBuddyMid_result oprot record = T.serializeVal oprot $ from_GetBlockerCountByBuddyMid_result record
to_GetBlockerCountByBuddyMid_result :: T.ThriftVal -> GetBlockerCountByBuddyMid_result
to_GetBlockerCountByBuddyMid_result (T.TStruct fields) = GetBlockerCountByBuddyMid_result{
  getBlockerCountByBuddyMid_result_success = P.maybe (getBlockerCountByBuddyMid_result_success default_GetBlockerCountByBuddyMid_result) (\(_,_val1550) -> (case _val1550 of {T.TI64 _val1551 -> _val1551; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getBlockerCountByBuddyMid_result_e = P.maybe (P.Nothing) (\(_,_val1550) -> P.Just (case _val1550 of {T.TStruct _val1552 -> (to_TalkException (T.TStruct _val1552)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetBlockerCountByBuddyMid_result _ = P.error "not a struct"
read_GetBlockerCountByBuddyMid_result :: T.Protocol p => p -> P.IO GetBlockerCountByBuddyMid_result
read_GetBlockerCountByBuddyMid_result iprot = to_GetBlockerCountByBuddyMid_result <$> T.readVal iprot (T.T_STRUCT typemap_GetBlockerCountByBuddyMid_result)
decode_GetBlockerCountByBuddyMid_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBlockerCountByBuddyMid_result
decode_GetBlockerCountByBuddyMid_result iprot bs = to_GetBlockerCountByBuddyMid_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBlockerCountByBuddyMid_result) bs
typemap_GetBlockerCountByBuddyMid_result :: T.TypeMap
typemap_GetBlockerCountByBuddyMid_result = Map.fromList [(0,("success",T.T_I64)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetBlockerCountByBuddyMid_result :: GetBlockerCountByBuddyMid_result
default_GetBlockerCountByBuddyMid_result = GetBlockerCountByBuddyMid_result{
  getBlockerCountByBuddyMid_result_success = 0,
  getBlockerCountByBuddyMid_result_e = P.Nothing}
data GetBuddyDetailByMid_args = GetBuddyDetailByMid_args  { getBuddyDetailByMid_args_buddyMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBuddyDetailByMid_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBuddyDetailByMid_args_buddyMid record  
instance QC.Arbitrary GetBuddyDetailByMid_args where 
  arbitrary = M.liftM GetBuddyDetailByMid_args (QC.arbitrary)
  shrink obj | obj == default_GetBuddyDetailByMid_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBuddyDetailByMid_args{getBuddyDetailByMid_args_buddyMid = getBuddyDetailByMid_args_buddyMid obj} then P.Nothing else P.Just $ default_GetBuddyDetailByMid_args{getBuddyDetailByMid_args_buddyMid = getBuddyDetailByMid_args_buddyMid obj}
    ]
from_GetBuddyDetailByMid_args :: GetBuddyDetailByMid_args -> T.ThriftVal
from_GetBuddyDetailByMid_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1555 -> P.Just (2, ("buddyMid",T.TString $ E.encodeUtf8 _v1555))) $ getBuddyDetailByMid_args_buddyMid record
  ]
write_GetBuddyDetailByMid_args :: T.Protocol p => p -> GetBuddyDetailByMid_args -> P.IO ()
write_GetBuddyDetailByMid_args oprot record = T.writeVal oprot $ from_GetBuddyDetailByMid_args record
encode_GetBuddyDetailByMid_args :: T.StatelessProtocol p => p -> GetBuddyDetailByMid_args -> LBS.ByteString
encode_GetBuddyDetailByMid_args oprot record = T.serializeVal oprot $ from_GetBuddyDetailByMid_args record
to_GetBuddyDetailByMid_args :: T.ThriftVal -> GetBuddyDetailByMid_args
to_GetBuddyDetailByMid_args (T.TStruct fields) = GetBuddyDetailByMid_args{
  getBuddyDetailByMid_args_buddyMid = P.maybe (getBuddyDetailByMid_args_buddyMid default_GetBuddyDetailByMid_args) (\(_,_val1557) -> (case _val1557 of {T.TString _val1558 -> E.decodeUtf8 _val1558; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_GetBuddyDetailByMid_args _ = P.error "not a struct"
read_GetBuddyDetailByMid_args :: T.Protocol p => p -> P.IO GetBuddyDetailByMid_args
read_GetBuddyDetailByMid_args iprot = to_GetBuddyDetailByMid_args <$> T.readVal iprot (T.T_STRUCT typemap_GetBuddyDetailByMid_args)
decode_GetBuddyDetailByMid_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBuddyDetailByMid_args
decode_GetBuddyDetailByMid_args iprot bs = to_GetBuddyDetailByMid_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBuddyDetailByMid_args) bs
typemap_GetBuddyDetailByMid_args :: T.TypeMap
typemap_GetBuddyDetailByMid_args = Map.fromList [(2,("buddyMid",T.T_STRING))]
default_GetBuddyDetailByMid_args :: GetBuddyDetailByMid_args
default_GetBuddyDetailByMid_args = GetBuddyDetailByMid_args{
  getBuddyDetailByMid_args_buddyMid = ""}
data GetBuddyDetailByMid_result = GetBuddyDetailByMid_result  { getBuddyDetailByMid_result_success :: BuddyDetail
  , getBuddyDetailByMid_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBuddyDetailByMid_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBuddyDetailByMid_result_success record   `H.hashWithSalt` getBuddyDetailByMid_result_e record  
instance QC.Arbitrary GetBuddyDetailByMid_result where 
  arbitrary = M.liftM GetBuddyDetailByMid_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetBuddyDetailByMid_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBuddyDetailByMid_result{getBuddyDetailByMid_result_success = getBuddyDetailByMid_result_success obj} then P.Nothing else P.Just $ default_GetBuddyDetailByMid_result{getBuddyDetailByMid_result_success = getBuddyDetailByMid_result_success obj}
    , if obj == default_GetBuddyDetailByMid_result{getBuddyDetailByMid_result_e = getBuddyDetailByMid_result_e obj} then P.Nothing else P.Just $ default_GetBuddyDetailByMid_result{getBuddyDetailByMid_result_e = getBuddyDetailByMid_result_e obj}
    ]
from_GetBuddyDetailByMid_result :: GetBuddyDetailByMid_result -> T.ThriftVal
from_GetBuddyDetailByMid_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1561 -> (1, ("e",from_TalkException _v1561))) <$> getBuddyDetailByMid_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1561 -> P.Just (0, ("success",from_BuddyDetail _v1561))) $ getBuddyDetailByMid_result_success record
    , (\_v1561 -> (1, ("e",from_TalkException _v1561))) <$> getBuddyDetailByMid_result_e record
    ]
    )
write_GetBuddyDetailByMid_result :: T.Protocol p => p -> GetBuddyDetailByMid_result -> P.IO ()
write_GetBuddyDetailByMid_result oprot record = T.writeVal oprot $ from_GetBuddyDetailByMid_result record
encode_GetBuddyDetailByMid_result :: T.StatelessProtocol p => p -> GetBuddyDetailByMid_result -> LBS.ByteString
encode_GetBuddyDetailByMid_result oprot record = T.serializeVal oprot $ from_GetBuddyDetailByMid_result record
to_GetBuddyDetailByMid_result :: T.ThriftVal -> GetBuddyDetailByMid_result
to_GetBuddyDetailByMid_result (T.TStruct fields) = GetBuddyDetailByMid_result{
  getBuddyDetailByMid_result_success = P.maybe (getBuddyDetailByMid_result_success default_GetBuddyDetailByMid_result) (\(_,_val1563) -> (case _val1563 of {T.TStruct _val1564 -> (to_BuddyDetail (T.TStruct _val1564)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getBuddyDetailByMid_result_e = P.maybe (P.Nothing) (\(_,_val1563) -> P.Just (case _val1563 of {T.TStruct _val1565 -> (to_TalkException (T.TStruct _val1565)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetBuddyDetailByMid_result _ = P.error "not a struct"
read_GetBuddyDetailByMid_result :: T.Protocol p => p -> P.IO GetBuddyDetailByMid_result
read_GetBuddyDetailByMid_result iprot = to_GetBuddyDetailByMid_result <$> T.readVal iprot (T.T_STRUCT typemap_GetBuddyDetailByMid_result)
decode_GetBuddyDetailByMid_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBuddyDetailByMid_result
decode_GetBuddyDetailByMid_result iprot bs = to_GetBuddyDetailByMid_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBuddyDetailByMid_result) bs
typemap_GetBuddyDetailByMid_result :: T.TypeMap
typemap_GetBuddyDetailByMid_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_BuddyDetail))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetBuddyDetailByMid_result :: GetBuddyDetailByMid_result
default_GetBuddyDetailByMid_result = GetBuddyDetailByMid_result{
  getBuddyDetailByMid_result_success = default_BuddyDetail,
  getBuddyDetailByMid_result_e = P.Nothing}
data GetBuddyProfile_args = GetBuddyProfile_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBuddyProfile_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary GetBuddyProfile_args where 
  arbitrary = QC.elements [GetBuddyProfile_args]
from_GetBuddyProfile_args :: GetBuddyProfile_args -> T.ThriftVal
from_GetBuddyProfile_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_GetBuddyProfile_args :: T.Protocol p => p -> GetBuddyProfile_args -> P.IO ()
write_GetBuddyProfile_args oprot record = T.writeVal oprot $ from_GetBuddyProfile_args record
encode_GetBuddyProfile_args :: T.StatelessProtocol p => p -> GetBuddyProfile_args -> LBS.ByteString
encode_GetBuddyProfile_args oprot record = T.serializeVal oprot $ from_GetBuddyProfile_args record
to_GetBuddyProfile_args :: T.ThriftVal -> GetBuddyProfile_args
to_GetBuddyProfile_args (T.TStruct fields) = GetBuddyProfile_args{

  }
to_GetBuddyProfile_args _ = P.error "not a struct"
read_GetBuddyProfile_args :: T.Protocol p => p -> P.IO GetBuddyProfile_args
read_GetBuddyProfile_args iprot = to_GetBuddyProfile_args <$> T.readVal iprot (T.T_STRUCT typemap_GetBuddyProfile_args)
decode_GetBuddyProfile_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBuddyProfile_args
decode_GetBuddyProfile_args iprot bs = to_GetBuddyProfile_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBuddyProfile_args) bs
typemap_GetBuddyProfile_args :: T.TypeMap
typemap_GetBuddyProfile_args = Map.fromList []
default_GetBuddyProfile_args :: GetBuddyProfile_args
default_GetBuddyProfile_args = GetBuddyProfile_args{
}
data GetBuddyProfile_result = GetBuddyProfile_result  { getBuddyProfile_result_success :: BuddyProfile
  , getBuddyProfile_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetBuddyProfile_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getBuddyProfile_result_success record   `H.hashWithSalt` getBuddyProfile_result_e record  
instance QC.Arbitrary GetBuddyProfile_result where 
  arbitrary = M.liftM GetBuddyProfile_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetBuddyProfile_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetBuddyProfile_result{getBuddyProfile_result_success = getBuddyProfile_result_success obj} then P.Nothing else P.Just $ default_GetBuddyProfile_result{getBuddyProfile_result_success = getBuddyProfile_result_success obj}
    , if obj == default_GetBuddyProfile_result{getBuddyProfile_result_e = getBuddyProfile_result_e obj} then P.Nothing else P.Just $ default_GetBuddyProfile_result{getBuddyProfile_result_e = getBuddyProfile_result_e obj}
    ]
from_GetBuddyProfile_result :: GetBuddyProfile_result -> T.ThriftVal
from_GetBuddyProfile_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1573 -> (1, ("e",from_TalkException _v1573))) <$> getBuddyProfile_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1573 -> P.Just (0, ("success",from_BuddyProfile _v1573))) $ getBuddyProfile_result_success record
    , (\_v1573 -> (1, ("e",from_TalkException _v1573))) <$> getBuddyProfile_result_e record
    ]
    )
write_GetBuddyProfile_result :: T.Protocol p => p -> GetBuddyProfile_result -> P.IO ()
write_GetBuddyProfile_result oprot record = T.writeVal oprot $ from_GetBuddyProfile_result record
encode_GetBuddyProfile_result :: T.StatelessProtocol p => p -> GetBuddyProfile_result -> LBS.ByteString
encode_GetBuddyProfile_result oprot record = T.serializeVal oprot $ from_GetBuddyProfile_result record
to_GetBuddyProfile_result :: T.ThriftVal -> GetBuddyProfile_result
to_GetBuddyProfile_result (T.TStruct fields) = GetBuddyProfile_result{
  getBuddyProfile_result_success = P.maybe (getBuddyProfile_result_success default_GetBuddyProfile_result) (\(_,_val1575) -> (case _val1575 of {T.TStruct _val1576 -> (to_BuddyProfile (T.TStruct _val1576)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getBuddyProfile_result_e = P.maybe (P.Nothing) (\(_,_val1575) -> P.Just (case _val1575 of {T.TStruct _val1577 -> (to_TalkException (T.TStruct _val1577)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetBuddyProfile_result _ = P.error "not a struct"
read_GetBuddyProfile_result :: T.Protocol p => p -> P.IO GetBuddyProfile_result
read_GetBuddyProfile_result iprot = to_GetBuddyProfile_result <$> T.readVal iprot (T.T_STRUCT typemap_GetBuddyProfile_result)
decode_GetBuddyProfile_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetBuddyProfile_result
decode_GetBuddyProfile_result iprot bs = to_GetBuddyProfile_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetBuddyProfile_result) bs
typemap_GetBuddyProfile_result :: T.TypeMap
typemap_GetBuddyProfile_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_BuddyProfile))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetBuddyProfile_result :: GetBuddyProfile_result
default_GetBuddyProfile_result = GetBuddyProfile_result{
  getBuddyProfile_result_success = default_BuddyProfile,
  getBuddyProfile_result_e = P.Nothing}
data GetContactTicket_args = GetContactTicket_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetContactTicket_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary GetContactTicket_args where 
  arbitrary = QC.elements [GetContactTicket_args]
from_GetContactTicket_args :: GetContactTicket_args -> T.ThriftVal
from_GetContactTicket_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_GetContactTicket_args :: T.Protocol p => p -> GetContactTicket_args -> P.IO ()
write_GetContactTicket_args oprot record = T.writeVal oprot $ from_GetContactTicket_args record
encode_GetContactTicket_args :: T.StatelessProtocol p => p -> GetContactTicket_args -> LBS.ByteString
encode_GetContactTicket_args oprot record = T.serializeVal oprot $ from_GetContactTicket_args record
to_GetContactTicket_args :: T.ThriftVal -> GetContactTicket_args
to_GetContactTicket_args (T.TStruct fields) = GetContactTicket_args{

  }
to_GetContactTicket_args _ = P.error "not a struct"
read_GetContactTicket_args :: T.Protocol p => p -> P.IO GetContactTicket_args
read_GetContactTicket_args iprot = to_GetContactTicket_args <$> T.readVal iprot (T.T_STRUCT typemap_GetContactTicket_args)
decode_GetContactTicket_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetContactTicket_args
decode_GetContactTicket_args iprot bs = to_GetContactTicket_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetContactTicket_args) bs
typemap_GetContactTicket_args :: T.TypeMap
typemap_GetContactTicket_args = Map.fromList []
default_GetContactTicket_args :: GetContactTicket_args
default_GetContactTicket_args = GetContactTicket_args{
}
data GetContactTicket_result = GetContactTicket_result  { getContactTicket_result_success :: Ticket
  , getContactTicket_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetContactTicket_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getContactTicket_result_success record   `H.hashWithSalt` getContactTicket_result_e record  
instance QC.Arbitrary GetContactTicket_result where 
  arbitrary = M.liftM GetContactTicket_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetContactTicket_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetContactTicket_result{getContactTicket_result_success = getContactTicket_result_success obj} then P.Nothing else P.Just $ default_GetContactTicket_result{getContactTicket_result_success = getContactTicket_result_success obj}
    , if obj == default_GetContactTicket_result{getContactTicket_result_e = getContactTicket_result_e obj} then P.Nothing else P.Just $ default_GetContactTicket_result{getContactTicket_result_e = getContactTicket_result_e obj}
    ]
from_GetContactTicket_result :: GetContactTicket_result -> T.ThriftVal
from_GetContactTicket_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1585 -> (1, ("e",from_TalkException _v1585))) <$> getContactTicket_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1585 -> P.Just (0, ("success",from_Ticket _v1585))) $ getContactTicket_result_success record
    , (\_v1585 -> (1, ("e",from_TalkException _v1585))) <$> getContactTicket_result_e record
    ]
    )
write_GetContactTicket_result :: T.Protocol p => p -> GetContactTicket_result -> P.IO ()
write_GetContactTicket_result oprot record = T.writeVal oprot $ from_GetContactTicket_result record
encode_GetContactTicket_result :: T.StatelessProtocol p => p -> GetContactTicket_result -> LBS.ByteString
encode_GetContactTicket_result oprot record = T.serializeVal oprot $ from_GetContactTicket_result record
to_GetContactTicket_result :: T.ThriftVal -> GetContactTicket_result
to_GetContactTicket_result (T.TStruct fields) = GetContactTicket_result{
  getContactTicket_result_success = P.maybe (getContactTicket_result_success default_GetContactTicket_result) (\(_,_val1587) -> (case _val1587 of {T.TStruct _val1588 -> (to_Ticket (T.TStruct _val1588)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getContactTicket_result_e = P.maybe (P.Nothing) (\(_,_val1587) -> P.Just (case _val1587 of {T.TStruct _val1589 -> (to_TalkException (T.TStruct _val1589)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetContactTicket_result _ = P.error "not a struct"
read_GetContactTicket_result :: T.Protocol p => p -> P.IO GetContactTicket_result
read_GetContactTicket_result iprot = to_GetContactTicket_result <$> T.readVal iprot (T.T_STRUCT typemap_GetContactTicket_result)
decode_GetContactTicket_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetContactTicket_result
decode_GetContactTicket_result iprot bs = to_GetContactTicket_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetContactTicket_result) bs
typemap_GetContactTicket_result :: T.TypeMap
typemap_GetContactTicket_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_Ticket))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetContactTicket_result :: GetContactTicket_result
default_GetContactTicket_result = GetContactTicket_result{
  getContactTicket_result_success = default_Ticket,
  getContactTicket_result_e = P.Nothing}
data GetMemberCountByBuddyMid_args = GetMemberCountByBuddyMid_args  { getMemberCountByBuddyMid_args_buddyMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetMemberCountByBuddyMid_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getMemberCountByBuddyMid_args_buddyMid record  
instance QC.Arbitrary GetMemberCountByBuddyMid_args where 
  arbitrary = M.liftM GetMemberCountByBuddyMid_args (QC.arbitrary)
  shrink obj | obj == default_GetMemberCountByBuddyMid_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetMemberCountByBuddyMid_args{getMemberCountByBuddyMid_args_buddyMid = getMemberCountByBuddyMid_args_buddyMid obj} then P.Nothing else P.Just $ default_GetMemberCountByBuddyMid_args{getMemberCountByBuddyMid_args_buddyMid = getMemberCountByBuddyMid_args_buddyMid obj}
    ]
from_GetMemberCountByBuddyMid_args :: GetMemberCountByBuddyMid_args -> T.ThriftVal
from_GetMemberCountByBuddyMid_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1592 -> P.Just (2, ("buddyMid",T.TString $ E.encodeUtf8 _v1592))) $ getMemberCountByBuddyMid_args_buddyMid record
  ]
write_GetMemberCountByBuddyMid_args :: T.Protocol p => p -> GetMemberCountByBuddyMid_args -> P.IO ()
write_GetMemberCountByBuddyMid_args oprot record = T.writeVal oprot $ from_GetMemberCountByBuddyMid_args record
encode_GetMemberCountByBuddyMid_args :: T.StatelessProtocol p => p -> GetMemberCountByBuddyMid_args -> LBS.ByteString
encode_GetMemberCountByBuddyMid_args oprot record = T.serializeVal oprot $ from_GetMemberCountByBuddyMid_args record
to_GetMemberCountByBuddyMid_args :: T.ThriftVal -> GetMemberCountByBuddyMid_args
to_GetMemberCountByBuddyMid_args (T.TStruct fields) = GetMemberCountByBuddyMid_args{
  getMemberCountByBuddyMid_args_buddyMid = P.maybe (getMemberCountByBuddyMid_args_buddyMid default_GetMemberCountByBuddyMid_args) (\(_,_val1594) -> (case _val1594 of {T.TString _val1595 -> E.decodeUtf8 _val1595; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_GetMemberCountByBuddyMid_args _ = P.error "not a struct"
read_GetMemberCountByBuddyMid_args :: T.Protocol p => p -> P.IO GetMemberCountByBuddyMid_args
read_GetMemberCountByBuddyMid_args iprot = to_GetMemberCountByBuddyMid_args <$> T.readVal iprot (T.T_STRUCT typemap_GetMemberCountByBuddyMid_args)
decode_GetMemberCountByBuddyMid_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetMemberCountByBuddyMid_args
decode_GetMemberCountByBuddyMid_args iprot bs = to_GetMemberCountByBuddyMid_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetMemberCountByBuddyMid_args) bs
typemap_GetMemberCountByBuddyMid_args :: T.TypeMap
typemap_GetMemberCountByBuddyMid_args = Map.fromList [(2,("buddyMid",T.T_STRING))]
default_GetMemberCountByBuddyMid_args :: GetMemberCountByBuddyMid_args
default_GetMemberCountByBuddyMid_args = GetMemberCountByBuddyMid_args{
  getMemberCountByBuddyMid_args_buddyMid = ""}
data GetMemberCountByBuddyMid_result = GetMemberCountByBuddyMid_result  { getMemberCountByBuddyMid_result_success :: I.Int64
  , getMemberCountByBuddyMid_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetMemberCountByBuddyMid_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getMemberCountByBuddyMid_result_success record   `H.hashWithSalt` getMemberCountByBuddyMid_result_e record  
instance QC.Arbitrary GetMemberCountByBuddyMid_result where 
  arbitrary = M.liftM GetMemberCountByBuddyMid_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetMemberCountByBuddyMid_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetMemberCountByBuddyMid_result{getMemberCountByBuddyMid_result_success = getMemberCountByBuddyMid_result_success obj} then P.Nothing else P.Just $ default_GetMemberCountByBuddyMid_result{getMemberCountByBuddyMid_result_success = getMemberCountByBuddyMid_result_success obj}
    , if obj == default_GetMemberCountByBuddyMid_result{getMemberCountByBuddyMid_result_e = getMemberCountByBuddyMid_result_e obj} then P.Nothing else P.Just $ default_GetMemberCountByBuddyMid_result{getMemberCountByBuddyMid_result_e = getMemberCountByBuddyMid_result_e obj}
    ]
from_GetMemberCountByBuddyMid_result :: GetMemberCountByBuddyMid_result -> T.ThriftVal
from_GetMemberCountByBuddyMid_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1598 -> (1, ("e",from_TalkException _v1598))) <$> getMemberCountByBuddyMid_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1598 -> P.Just (0, ("success",T.TI64 _v1598))) $ getMemberCountByBuddyMid_result_success record
    , (\_v1598 -> (1, ("e",from_TalkException _v1598))) <$> getMemberCountByBuddyMid_result_e record
    ]
    )
write_GetMemberCountByBuddyMid_result :: T.Protocol p => p -> GetMemberCountByBuddyMid_result -> P.IO ()
write_GetMemberCountByBuddyMid_result oprot record = T.writeVal oprot $ from_GetMemberCountByBuddyMid_result record
encode_GetMemberCountByBuddyMid_result :: T.StatelessProtocol p => p -> GetMemberCountByBuddyMid_result -> LBS.ByteString
encode_GetMemberCountByBuddyMid_result oprot record = T.serializeVal oprot $ from_GetMemberCountByBuddyMid_result record
to_GetMemberCountByBuddyMid_result :: T.ThriftVal -> GetMemberCountByBuddyMid_result
to_GetMemberCountByBuddyMid_result (T.TStruct fields) = GetMemberCountByBuddyMid_result{
  getMemberCountByBuddyMid_result_success = P.maybe (getMemberCountByBuddyMid_result_success default_GetMemberCountByBuddyMid_result) (\(_,_val1600) -> (case _val1600 of {T.TI64 _val1601 -> _val1601; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getMemberCountByBuddyMid_result_e = P.maybe (P.Nothing) (\(_,_val1600) -> P.Just (case _val1600 of {T.TStruct _val1602 -> (to_TalkException (T.TStruct _val1602)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetMemberCountByBuddyMid_result _ = P.error "not a struct"
read_GetMemberCountByBuddyMid_result :: T.Protocol p => p -> P.IO GetMemberCountByBuddyMid_result
read_GetMemberCountByBuddyMid_result iprot = to_GetMemberCountByBuddyMid_result <$> T.readVal iprot (T.T_STRUCT typemap_GetMemberCountByBuddyMid_result)
decode_GetMemberCountByBuddyMid_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetMemberCountByBuddyMid_result
decode_GetMemberCountByBuddyMid_result iprot bs = to_GetMemberCountByBuddyMid_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetMemberCountByBuddyMid_result) bs
typemap_GetMemberCountByBuddyMid_result :: T.TypeMap
typemap_GetMemberCountByBuddyMid_result = Map.fromList [(0,("success",T.T_I64)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetMemberCountByBuddyMid_result :: GetMemberCountByBuddyMid_result
default_GetMemberCountByBuddyMid_result = GetMemberCountByBuddyMid_result{
  getMemberCountByBuddyMid_result_success = 0,
  getMemberCountByBuddyMid_result_e = P.Nothing}
data GetSendBuddyMessageResult_args = GetSendBuddyMessageResult_args  { getSendBuddyMessageResult_args_sendBuddyMessageRequestId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetSendBuddyMessageResult_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getSendBuddyMessageResult_args_sendBuddyMessageRequestId record  
instance QC.Arbitrary GetSendBuddyMessageResult_args where 
  arbitrary = M.liftM GetSendBuddyMessageResult_args (QC.arbitrary)
  shrink obj | obj == default_GetSendBuddyMessageResult_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetSendBuddyMessageResult_args{getSendBuddyMessageResult_args_sendBuddyMessageRequestId = getSendBuddyMessageResult_args_sendBuddyMessageRequestId obj} then P.Nothing else P.Just $ default_GetSendBuddyMessageResult_args{getSendBuddyMessageResult_args_sendBuddyMessageRequestId = getSendBuddyMessageResult_args_sendBuddyMessageRequestId obj}
    ]
from_GetSendBuddyMessageResult_args :: GetSendBuddyMessageResult_args -> T.ThriftVal
from_GetSendBuddyMessageResult_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1605 -> P.Just (1, ("sendBuddyMessageRequestId",T.TString $ E.encodeUtf8 _v1605))) $ getSendBuddyMessageResult_args_sendBuddyMessageRequestId record
  ]
write_GetSendBuddyMessageResult_args :: T.Protocol p => p -> GetSendBuddyMessageResult_args -> P.IO ()
write_GetSendBuddyMessageResult_args oprot record = T.writeVal oprot $ from_GetSendBuddyMessageResult_args record
encode_GetSendBuddyMessageResult_args :: T.StatelessProtocol p => p -> GetSendBuddyMessageResult_args -> LBS.ByteString
encode_GetSendBuddyMessageResult_args oprot record = T.serializeVal oprot $ from_GetSendBuddyMessageResult_args record
to_GetSendBuddyMessageResult_args :: T.ThriftVal -> GetSendBuddyMessageResult_args
to_GetSendBuddyMessageResult_args (T.TStruct fields) = GetSendBuddyMessageResult_args{
  getSendBuddyMessageResult_args_sendBuddyMessageRequestId = P.maybe (getSendBuddyMessageResult_args_sendBuddyMessageRequestId default_GetSendBuddyMessageResult_args) (\(_,_val1607) -> (case _val1607 of {T.TString _val1608 -> E.decodeUtf8 _val1608; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetSendBuddyMessageResult_args _ = P.error "not a struct"
read_GetSendBuddyMessageResult_args :: T.Protocol p => p -> P.IO GetSendBuddyMessageResult_args
read_GetSendBuddyMessageResult_args iprot = to_GetSendBuddyMessageResult_args <$> T.readVal iprot (T.T_STRUCT typemap_GetSendBuddyMessageResult_args)
decode_GetSendBuddyMessageResult_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetSendBuddyMessageResult_args
decode_GetSendBuddyMessageResult_args iprot bs = to_GetSendBuddyMessageResult_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetSendBuddyMessageResult_args) bs
typemap_GetSendBuddyMessageResult_args :: T.TypeMap
typemap_GetSendBuddyMessageResult_args = Map.fromList [(1,("sendBuddyMessageRequestId",T.T_STRING))]
default_GetSendBuddyMessageResult_args :: GetSendBuddyMessageResult_args
default_GetSendBuddyMessageResult_args = GetSendBuddyMessageResult_args{
  getSendBuddyMessageResult_args_sendBuddyMessageRequestId = ""}
data GetSendBuddyMessageResult_result = GetSendBuddyMessageResult_result  { getSendBuddyMessageResult_result_success :: SendBuddyMessageResult
  , getSendBuddyMessageResult_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetSendBuddyMessageResult_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getSendBuddyMessageResult_result_success record   `H.hashWithSalt` getSendBuddyMessageResult_result_e record  
instance QC.Arbitrary GetSendBuddyMessageResult_result where 
  arbitrary = M.liftM GetSendBuddyMessageResult_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetSendBuddyMessageResult_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetSendBuddyMessageResult_result{getSendBuddyMessageResult_result_success = getSendBuddyMessageResult_result_success obj} then P.Nothing else P.Just $ default_GetSendBuddyMessageResult_result{getSendBuddyMessageResult_result_success = getSendBuddyMessageResult_result_success obj}
    , if obj == default_GetSendBuddyMessageResult_result{getSendBuddyMessageResult_result_e = getSendBuddyMessageResult_result_e obj} then P.Nothing else P.Just $ default_GetSendBuddyMessageResult_result{getSendBuddyMessageResult_result_e = getSendBuddyMessageResult_result_e obj}
    ]
from_GetSendBuddyMessageResult_result :: GetSendBuddyMessageResult_result -> T.ThriftVal
from_GetSendBuddyMessageResult_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1611 -> (1, ("e",from_TalkException _v1611))) <$> getSendBuddyMessageResult_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1611 -> P.Just (0, ("success",from_SendBuddyMessageResult _v1611))) $ getSendBuddyMessageResult_result_success record
    , (\_v1611 -> (1, ("e",from_TalkException _v1611))) <$> getSendBuddyMessageResult_result_e record
    ]
    )
write_GetSendBuddyMessageResult_result :: T.Protocol p => p -> GetSendBuddyMessageResult_result -> P.IO ()
write_GetSendBuddyMessageResult_result oprot record = T.writeVal oprot $ from_GetSendBuddyMessageResult_result record
encode_GetSendBuddyMessageResult_result :: T.StatelessProtocol p => p -> GetSendBuddyMessageResult_result -> LBS.ByteString
encode_GetSendBuddyMessageResult_result oprot record = T.serializeVal oprot $ from_GetSendBuddyMessageResult_result record
to_GetSendBuddyMessageResult_result :: T.ThriftVal -> GetSendBuddyMessageResult_result
to_GetSendBuddyMessageResult_result (T.TStruct fields) = GetSendBuddyMessageResult_result{
  getSendBuddyMessageResult_result_success = P.maybe (getSendBuddyMessageResult_result_success default_GetSendBuddyMessageResult_result) (\(_,_val1613) -> (case _val1613 of {T.TStruct _val1614 -> (to_SendBuddyMessageResult (T.TStruct _val1614)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getSendBuddyMessageResult_result_e = P.maybe (P.Nothing) (\(_,_val1613) -> P.Just (case _val1613 of {T.TStruct _val1615 -> (to_TalkException (T.TStruct _val1615)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetSendBuddyMessageResult_result _ = P.error "not a struct"
read_GetSendBuddyMessageResult_result :: T.Protocol p => p -> P.IO GetSendBuddyMessageResult_result
read_GetSendBuddyMessageResult_result iprot = to_GetSendBuddyMessageResult_result <$> T.readVal iprot (T.T_STRUCT typemap_GetSendBuddyMessageResult_result)
decode_GetSendBuddyMessageResult_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetSendBuddyMessageResult_result
decode_GetSendBuddyMessageResult_result iprot bs = to_GetSendBuddyMessageResult_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetSendBuddyMessageResult_result) bs
typemap_GetSendBuddyMessageResult_result :: T.TypeMap
typemap_GetSendBuddyMessageResult_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SendBuddyMessageResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetSendBuddyMessageResult_result :: GetSendBuddyMessageResult_result
default_GetSendBuddyMessageResult_result = GetSendBuddyMessageResult_result{
  getSendBuddyMessageResult_result_success = default_SendBuddyMessageResult,
  getSendBuddyMessageResult_result_e = P.Nothing}
data GetSetBuddyOnAirResult_args = GetSetBuddyOnAirResult_args  { getSetBuddyOnAirResult_args_setBuddyOnAirRequestId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetSetBuddyOnAirResult_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getSetBuddyOnAirResult_args_setBuddyOnAirRequestId record  
instance QC.Arbitrary GetSetBuddyOnAirResult_args where 
  arbitrary = M.liftM GetSetBuddyOnAirResult_args (QC.arbitrary)
  shrink obj | obj == default_GetSetBuddyOnAirResult_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetSetBuddyOnAirResult_args{getSetBuddyOnAirResult_args_setBuddyOnAirRequestId = getSetBuddyOnAirResult_args_setBuddyOnAirRequestId obj} then P.Nothing else P.Just $ default_GetSetBuddyOnAirResult_args{getSetBuddyOnAirResult_args_setBuddyOnAirRequestId = getSetBuddyOnAirResult_args_setBuddyOnAirRequestId obj}
    ]
from_GetSetBuddyOnAirResult_args :: GetSetBuddyOnAirResult_args -> T.ThriftVal
from_GetSetBuddyOnAirResult_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1618 -> P.Just (1, ("setBuddyOnAirRequestId",T.TString $ E.encodeUtf8 _v1618))) $ getSetBuddyOnAirResult_args_setBuddyOnAirRequestId record
  ]
write_GetSetBuddyOnAirResult_args :: T.Protocol p => p -> GetSetBuddyOnAirResult_args -> P.IO ()
write_GetSetBuddyOnAirResult_args oprot record = T.writeVal oprot $ from_GetSetBuddyOnAirResult_args record
encode_GetSetBuddyOnAirResult_args :: T.StatelessProtocol p => p -> GetSetBuddyOnAirResult_args -> LBS.ByteString
encode_GetSetBuddyOnAirResult_args oprot record = T.serializeVal oprot $ from_GetSetBuddyOnAirResult_args record
to_GetSetBuddyOnAirResult_args :: T.ThriftVal -> GetSetBuddyOnAirResult_args
to_GetSetBuddyOnAirResult_args (T.TStruct fields) = GetSetBuddyOnAirResult_args{
  getSetBuddyOnAirResult_args_setBuddyOnAirRequestId = P.maybe (getSetBuddyOnAirResult_args_setBuddyOnAirRequestId default_GetSetBuddyOnAirResult_args) (\(_,_val1620) -> (case _val1620 of {T.TString _val1621 -> E.decodeUtf8 _val1621; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetSetBuddyOnAirResult_args _ = P.error "not a struct"
read_GetSetBuddyOnAirResult_args :: T.Protocol p => p -> P.IO GetSetBuddyOnAirResult_args
read_GetSetBuddyOnAirResult_args iprot = to_GetSetBuddyOnAirResult_args <$> T.readVal iprot (T.T_STRUCT typemap_GetSetBuddyOnAirResult_args)
decode_GetSetBuddyOnAirResult_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetSetBuddyOnAirResult_args
decode_GetSetBuddyOnAirResult_args iprot bs = to_GetSetBuddyOnAirResult_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetSetBuddyOnAirResult_args) bs
typemap_GetSetBuddyOnAirResult_args :: T.TypeMap
typemap_GetSetBuddyOnAirResult_args = Map.fromList [(1,("setBuddyOnAirRequestId",T.T_STRING))]
default_GetSetBuddyOnAirResult_args :: GetSetBuddyOnAirResult_args
default_GetSetBuddyOnAirResult_args = GetSetBuddyOnAirResult_args{
  getSetBuddyOnAirResult_args_setBuddyOnAirRequestId = ""}
data GetSetBuddyOnAirResult_result = GetSetBuddyOnAirResult_result  { getSetBuddyOnAirResult_result_success :: SetBuddyOnAirResult
  , getSetBuddyOnAirResult_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetSetBuddyOnAirResult_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getSetBuddyOnAirResult_result_success record   `H.hashWithSalt` getSetBuddyOnAirResult_result_e record  
instance QC.Arbitrary GetSetBuddyOnAirResult_result where 
  arbitrary = M.liftM GetSetBuddyOnAirResult_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetSetBuddyOnAirResult_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetSetBuddyOnAirResult_result{getSetBuddyOnAirResult_result_success = getSetBuddyOnAirResult_result_success obj} then P.Nothing else P.Just $ default_GetSetBuddyOnAirResult_result{getSetBuddyOnAirResult_result_success = getSetBuddyOnAirResult_result_success obj}
    , if obj == default_GetSetBuddyOnAirResult_result{getSetBuddyOnAirResult_result_e = getSetBuddyOnAirResult_result_e obj} then P.Nothing else P.Just $ default_GetSetBuddyOnAirResult_result{getSetBuddyOnAirResult_result_e = getSetBuddyOnAirResult_result_e obj}
    ]
from_GetSetBuddyOnAirResult_result :: GetSetBuddyOnAirResult_result -> T.ThriftVal
from_GetSetBuddyOnAirResult_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1624 -> (1, ("e",from_TalkException _v1624))) <$> getSetBuddyOnAirResult_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1624 -> P.Just (0, ("success",from_SetBuddyOnAirResult _v1624))) $ getSetBuddyOnAirResult_result_success record
    , (\_v1624 -> (1, ("e",from_TalkException _v1624))) <$> getSetBuddyOnAirResult_result_e record
    ]
    )
write_GetSetBuddyOnAirResult_result :: T.Protocol p => p -> GetSetBuddyOnAirResult_result -> P.IO ()
write_GetSetBuddyOnAirResult_result oprot record = T.writeVal oprot $ from_GetSetBuddyOnAirResult_result record
encode_GetSetBuddyOnAirResult_result :: T.StatelessProtocol p => p -> GetSetBuddyOnAirResult_result -> LBS.ByteString
encode_GetSetBuddyOnAirResult_result oprot record = T.serializeVal oprot $ from_GetSetBuddyOnAirResult_result record
to_GetSetBuddyOnAirResult_result :: T.ThriftVal -> GetSetBuddyOnAirResult_result
to_GetSetBuddyOnAirResult_result (T.TStruct fields) = GetSetBuddyOnAirResult_result{
  getSetBuddyOnAirResult_result_success = P.maybe (getSetBuddyOnAirResult_result_success default_GetSetBuddyOnAirResult_result) (\(_,_val1626) -> (case _val1626 of {T.TStruct _val1627 -> (to_SetBuddyOnAirResult (T.TStruct _val1627)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getSetBuddyOnAirResult_result_e = P.maybe (P.Nothing) (\(_,_val1626) -> P.Just (case _val1626 of {T.TStruct _val1628 -> (to_TalkException (T.TStruct _val1628)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetSetBuddyOnAirResult_result _ = P.error "not a struct"
read_GetSetBuddyOnAirResult_result :: T.Protocol p => p -> P.IO GetSetBuddyOnAirResult_result
read_GetSetBuddyOnAirResult_result iprot = to_GetSetBuddyOnAirResult_result <$> T.readVal iprot (T.T_STRUCT typemap_GetSetBuddyOnAirResult_result)
decode_GetSetBuddyOnAirResult_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetSetBuddyOnAirResult_result
decode_GetSetBuddyOnAirResult_result iprot bs = to_GetSetBuddyOnAirResult_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetSetBuddyOnAirResult_result) bs
typemap_GetSetBuddyOnAirResult_result :: T.TypeMap
typemap_GetSetBuddyOnAirResult_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SetBuddyOnAirResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetSetBuddyOnAirResult_result :: GetSetBuddyOnAirResult_result
default_GetSetBuddyOnAirResult_result = GetSetBuddyOnAirResult_result{
  getSetBuddyOnAirResult_result_success = default_SetBuddyOnAirResult,
  getSetBuddyOnAirResult_result_e = P.Nothing}
data GetUpdateBuddyProfileResult_args = GetUpdateBuddyProfileResult_args  { getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetUpdateBuddyProfileResult_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId record  
instance QC.Arbitrary GetUpdateBuddyProfileResult_args where 
  arbitrary = M.liftM GetUpdateBuddyProfileResult_args (QC.arbitrary)
  shrink obj | obj == default_GetUpdateBuddyProfileResult_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetUpdateBuddyProfileResult_args{getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId = getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId obj} then P.Nothing else P.Just $ default_GetUpdateBuddyProfileResult_args{getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId = getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId obj}
    ]
from_GetUpdateBuddyProfileResult_args :: GetUpdateBuddyProfileResult_args -> T.ThriftVal
from_GetUpdateBuddyProfileResult_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1631 -> P.Just (1, ("updateBuddyProfileRequestId",T.TString $ E.encodeUtf8 _v1631))) $ getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId record
  ]
write_GetUpdateBuddyProfileResult_args :: T.Protocol p => p -> GetUpdateBuddyProfileResult_args -> P.IO ()
write_GetUpdateBuddyProfileResult_args oprot record = T.writeVal oprot $ from_GetUpdateBuddyProfileResult_args record
encode_GetUpdateBuddyProfileResult_args :: T.StatelessProtocol p => p -> GetUpdateBuddyProfileResult_args -> LBS.ByteString
encode_GetUpdateBuddyProfileResult_args oprot record = T.serializeVal oprot $ from_GetUpdateBuddyProfileResult_args record
to_GetUpdateBuddyProfileResult_args :: T.ThriftVal -> GetUpdateBuddyProfileResult_args
to_GetUpdateBuddyProfileResult_args (T.TStruct fields) = GetUpdateBuddyProfileResult_args{
  getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId = P.maybe (getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId default_GetUpdateBuddyProfileResult_args) (\(_,_val1633) -> (case _val1633 of {T.TString _val1634 -> E.decodeUtf8 _val1634; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetUpdateBuddyProfileResult_args _ = P.error "not a struct"
read_GetUpdateBuddyProfileResult_args :: T.Protocol p => p -> P.IO GetUpdateBuddyProfileResult_args
read_GetUpdateBuddyProfileResult_args iprot = to_GetUpdateBuddyProfileResult_args <$> T.readVal iprot (T.T_STRUCT typemap_GetUpdateBuddyProfileResult_args)
decode_GetUpdateBuddyProfileResult_args :: T.StatelessProtocol p => p -> LBS.ByteString -> GetUpdateBuddyProfileResult_args
decode_GetUpdateBuddyProfileResult_args iprot bs = to_GetUpdateBuddyProfileResult_args $ T.deserializeVal iprot (T.T_STRUCT typemap_GetUpdateBuddyProfileResult_args) bs
typemap_GetUpdateBuddyProfileResult_args :: T.TypeMap
typemap_GetUpdateBuddyProfileResult_args = Map.fromList [(1,("updateBuddyProfileRequestId",T.T_STRING))]
default_GetUpdateBuddyProfileResult_args :: GetUpdateBuddyProfileResult_args
default_GetUpdateBuddyProfileResult_args = GetUpdateBuddyProfileResult_args{
  getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId = ""}
data GetUpdateBuddyProfileResult_result = GetUpdateBuddyProfileResult_result  { getUpdateBuddyProfileResult_result_success :: UpdateBuddyProfileResult
  , getUpdateBuddyProfileResult_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable GetUpdateBuddyProfileResult_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` getUpdateBuddyProfileResult_result_success record   `H.hashWithSalt` getUpdateBuddyProfileResult_result_e record  
instance QC.Arbitrary GetUpdateBuddyProfileResult_result where 
  arbitrary = M.liftM GetUpdateBuddyProfileResult_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_GetUpdateBuddyProfileResult_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_GetUpdateBuddyProfileResult_result{getUpdateBuddyProfileResult_result_success = getUpdateBuddyProfileResult_result_success obj} then P.Nothing else P.Just $ default_GetUpdateBuddyProfileResult_result{getUpdateBuddyProfileResult_result_success = getUpdateBuddyProfileResult_result_success obj}
    , if obj == default_GetUpdateBuddyProfileResult_result{getUpdateBuddyProfileResult_result_e = getUpdateBuddyProfileResult_result_e obj} then P.Nothing else P.Just $ default_GetUpdateBuddyProfileResult_result{getUpdateBuddyProfileResult_result_e = getUpdateBuddyProfileResult_result_e obj}
    ]
from_GetUpdateBuddyProfileResult_result :: GetUpdateBuddyProfileResult_result -> T.ThriftVal
from_GetUpdateBuddyProfileResult_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1637 -> (1, ("e",from_TalkException _v1637))) <$> getUpdateBuddyProfileResult_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1637 -> P.Just (0, ("success",from_UpdateBuddyProfileResult _v1637))) $ getUpdateBuddyProfileResult_result_success record
    , (\_v1637 -> (1, ("e",from_TalkException _v1637))) <$> getUpdateBuddyProfileResult_result_e record
    ]
    )
write_GetUpdateBuddyProfileResult_result :: T.Protocol p => p -> GetUpdateBuddyProfileResult_result -> P.IO ()
write_GetUpdateBuddyProfileResult_result oprot record = T.writeVal oprot $ from_GetUpdateBuddyProfileResult_result record
encode_GetUpdateBuddyProfileResult_result :: T.StatelessProtocol p => p -> GetUpdateBuddyProfileResult_result -> LBS.ByteString
encode_GetUpdateBuddyProfileResult_result oprot record = T.serializeVal oprot $ from_GetUpdateBuddyProfileResult_result record
to_GetUpdateBuddyProfileResult_result :: T.ThriftVal -> GetUpdateBuddyProfileResult_result
to_GetUpdateBuddyProfileResult_result (T.TStruct fields) = GetUpdateBuddyProfileResult_result{
  getUpdateBuddyProfileResult_result_success = P.maybe (getUpdateBuddyProfileResult_result_success default_GetUpdateBuddyProfileResult_result) (\(_,_val1639) -> (case _val1639 of {T.TStruct _val1640 -> (to_UpdateBuddyProfileResult (T.TStruct _val1640)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  getUpdateBuddyProfileResult_result_e = P.maybe (P.Nothing) (\(_,_val1639) -> P.Just (case _val1639 of {T.TStruct _val1641 -> (to_TalkException (T.TStruct _val1641)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_GetUpdateBuddyProfileResult_result _ = P.error "not a struct"
read_GetUpdateBuddyProfileResult_result :: T.Protocol p => p -> P.IO GetUpdateBuddyProfileResult_result
read_GetUpdateBuddyProfileResult_result iprot = to_GetUpdateBuddyProfileResult_result <$> T.readVal iprot (T.T_STRUCT typemap_GetUpdateBuddyProfileResult_result)
decode_GetUpdateBuddyProfileResult_result :: T.StatelessProtocol p => p -> LBS.ByteString -> GetUpdateBuddyProfileResult_result
decode_GetUpdateBuddyProfileResult_result iprot bs = to_GetUpdateBuddyProfileResult_result $ T.deserializeVal iprot (T.T_STRUCT typemap_GetUpdateBuddyProfileResult_result) bs
typemap_GetUpdateBuddyProfileResult_result :: T.TypeMap
typemap_GetUpdateBuddyProfileResult_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_UpdateBuddyProfileResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_GetUpdateBuddyProfileResult_result :: GetUpdateBuddyProfileResult_result
default_GetUpdateBuddyProfileResult_result = GetUpdateBuddyProfileResult_result{
  getUpdateBuddyProfileResult_result_success = default_UpdateBuddyProfileResult,
  getUpdateBuddyProfileResult_result_e = P.Nothing}
data IsBuddyOnAirByMid_args = IsBuddyOnAirByMid_args  { isBuddyOnAirByMid_args_buddyMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable IsBuddyOnAirByMid_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` isBuddyOnAirByMid_args_buddyMid record  
instance QC.Arbitrary IsBuddyOnAirByMid_args where 
  arbitrary = M.liftM IsBuddyOnAirByMid_args (QC.arbitrary)
  shrink obj | obj == default_IsBuddyOnAirByMid_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_IsBuddyOnAirByMid_args{isBuddyOnAirByMid_args_buddyMid = isBuddyOnAirByMid_args_buddyMid obj} then P.Nothing else P.Just $ default_IsBuddyOnAirByMid_args{isBuddyOnAirByMid_args_buddyMid = isBuddyOnAirByMid_args_buddyMid obj}
    ]
from_IsBuddyOnAirByMid_args :: IsBuddyOnAirByMid_args -> T.ThriftVal
from_IsBuddyOnAirByMid_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1644 -> P.Just (2, ("buddyMid",T.TString $ E.encodeUtf8 _v1644))) $ isBuddyOnAirByMid_args_buddyMid record
  ]
write_IsBuddyOnAirByMid_args :: T.Protocol p => p -> IsBuddyOnAirByMid_args -> P.IO ()
write_IsBuddyOnAirByMid_args oprot record = T.writeVal oprot $ from_IsBuddyOnAirByMid_args record
encode_IsBuddyOnAirByMid_args :: T.StatelessProtocol p => p -> IsBuddyOnAirByMid_args -> LBS.ByteString
encode_IsBuddyOnAirByMid_args oprot record = T.serializeVal oprot $ from_IsBuddyOnAirByMid_args record
to_IsBuddyOnAirByMid_args :: T.ThriftVal -> IsBuddyOnAirByMid_args
to_IsBuddyOnAirByMid_args (T.TStruct fields) = IsBuddyOnAirByMid_args{
  isBuddyOnAirByMid_args_buddyMid = P.maybe (isBuddyOnAirByMid_args_buddyMid default_IsBuddyOnAirByMid_args) (\(_,_val1646) -> (case _val1646 of {T.TString _val1647 -> E.decodeUtf8 _val1647; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_IsBuddyOnAirByMid_args _ = P.error "not a struct"
read_IsBuddyOnAirByMid_args :: T.Protocol p => p -> P.IO IsBuddyOnAirByMid_args
read_IsBuddyOnAirByMid_args iprot = to_IsBuddyOnAirByMid_args <$> T.readVal iprot (T.T_STRUCT typemap_IsBuddyOnAirByMid_args)
decode_IsBuddyOnAirByMid_args :: T.StatelessProtocol p => p -> LBS.ByteString -> IsBuddyOnAirByMid_args
decode_IsBuddyOnAirByMid_args iprot bs = to_IsBuddyOnAirByMid_args $ T.deserializeVal iprot (T.T_STRUCT typemap_IsBuddyOnAirByMid_args) bs
typemap_IsBuddyOnAirByMid_args :: T.TypeMap
typemap_IsBuddyOnAirByMid_args = Map.fromList [(2,("buddyMid",T.T_STRING))]
default_IsBuddyOnAirByMid_args :: IsBuddyOnAirByMid_args
default_IsBuddyOnAirByMid_args = IsBuddyOnAirByMid_args{
  isBuddyOnAirByMid_args_buddyMid = ""}
data IsBuddyOnAirByMid_result = IsBuddyOnAirByMid_result  { isBuddyOnAirByMid_result_success :: P.Bool
  , isBuddyOnAirByMid_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable IsBuddyOnAirByMid_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` isBuddyOnAirByMid_result_success record   `H.hashWithSalt` isBuddyOnAirByMid_result_e record  
instance QC.Arbitrary IsBuddyOnAirByMid_result where 
  arbitrary = M.liftM IsBuddyOnAirByMid_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_IsBuddyOnAirByMid_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_IsBuddyOnAirByMid_result{isBuddyOnAirByMid_result_success = isBuddyOnAirByMid_result_success obj} then P.Nothing else P.Just $ default_IsBuddyOnAirByMid_result{isBuddyOnAirByMid_result_success = isBuddyOnAirByMid_result_success obj}
    , if obj == default_IsBuddyOnAirByMid_result{isBuddyOnAirByMid_result_e = isBuddyOnAirByMid_result_e obj} then P.Nothing else P.Just $ default_IsBuddyOnAirByMid_result{isBuddyOnAirByMid_result_e = isBuddyOnAirByMid_result_e obj}
    ]
from_IsBuddyOnAirByMid_result :: IsBuddyOnAirByMid_result -> T.ThriftVal
from_IsBuddyOnAirByMid_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1650 -> (1, ("e",from_TalkException _v1650))) <$> isBuddyOnAirByMid_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1650 -> P.Just (0, ("success",T.TBool _v1650))) $ isBuddyOnAirByMid_result_success record
    , (\_v1650 -> (1, ("e",from_TalkException _v1650))) <$> isBuddyOnAirByMid_result_e record
    ]
    )
write_IsBuddyOnAirByMid_result :: T.Protocol p => p -> IsBuddyOnAirByMid_result -> P.IO ()
write_IsBuddyOnAirByMid_result oprot record = T.writeVal oprot $ from_IsBuddyOnAirByMid_result record
encode_IsBuddyOnAirByMid_result :: T.StatelessProtocol p => p -> IsBuddyOnAirByMid_result -> LBS.ByteString
encode_IsBuddyOnAirByMid_result oprot record = T.serializeVal oprot $ from_IsBuddyOnAirByMid_result record
to_IsBuddyOnAirByMid_result :: T.ThriftVal -> IsBuddyOnAirByMid_result
to_IsBuddyOnAirByMid_result (T.TStruct fields) = IsBuddyOnAirByMid_result{
  isBuddyOnAirByMid_result_success = P.maybe (isBuddyOnAirByMid_result_success default_IsBuddyOnAirByMid_result) (\(_,_val1652) -> (case _val1652 of {T.TBool _val1653 -> _val1653; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  isBuddyOnAirByMid_result_e = P.maybe (P.Nothing) (\(_,_val1652) -> P.Just (case _val1652 of {T.TStruct _val1654 -> (to_TalkException (T.TStruct _val1654)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_IsBuddyOnAirByMid_result _ = P.error "not a struct"
read_IsBuddyOnAirByMid_result :: T.Protocol p => p -> P.IO IsBuddyOnAirByMid_result
read_IsBuddyOnAirByMid_result iprot = to_IsBuddyOnAirByMid_result <$> T.readVal iprot (T.T_STRUCT typemap_IsBuddyOnAirByMid_result)
decode_IsBuddyOnAirByMid_result :: T.StatelessProtocol p => p -> LBS.ByteString -> IsBuddyOnAirByMid_result
decode_IsBuddyOnAirByMid_result iprot bs = to_IsBuddyOnAirByMid_result $ T.deserializeVal iprot (T.T_STRUCT typemap_IsBuddyOnAirByMid_result) bs
typemap_IsBuddyOnAirByMid_result :: T.TypeMap
typemap_IsBuddyOnAirByMid_result = Map.fromList [(0,("success",T.T_BOOL)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_IsBuddyOnAirByMid_result :: IsBuddyOnAirByMid_result
default_IsBuddyOnAirByMid_result = IsBuddyOnAirByMid_result{
  isBuddyOnAirByMid_result_success = P.False,
  isBuddyOnAirByMid_result_e = P.Nothing}
data LinkAndSendBuddyContentMessageToAllAsync_args = LinkAndSendBuddyContentMessageToAllAsync_args  { linkAndSendBuddyContentMessageToAllAsync_args_requestId :: LT.Text
  , linkAndSendBuddyContentMessageToAllAsync_args_msg :: Message
  , linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable LinkAndSendBuddyContentMessageToAllAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` linkAndSendBuddyContentMessageToAllAsync_args_requestId record   `H.hashWithSalt` linkAndSendBuddyContentMessageToAllAsync_args_msg record   `H.hashWithSalt` linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId record  
instance QC.Arbitrary LinkAndSendBuddyContentMessageToAllAsync_args where 
  arbitrary = M.liftM LinkAndSendBuddyContentMessageToAllAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_LinkAndSendBuddyContentMessageToAllAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_LinkAndSendBuddyContentMessageToAllAsync_args{linkAndSendBuddyContentMessageToAllAsync_args_requestId = linkAndSendBuddyContentMessageToAllAsync_args_requestId obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToAllAsync_args{linkAndSendBuddyContentMessageToAllAsync_args_requestId = linkAndSendBuddyContentMessageToAllAsync_args_requestId obj}
    , if obj == default_LinkAndSendBuddyContentMessageToAllAsync_args{linkAndSendBuddyContentMessageToAllAsync_args_msg = linkAndSendBuddyContentMessageToAllAsync_args_msg obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToAllAsync_args{linkAndSendBuddyContentMessageToAllAsync_args_msg = linkAndSendBuddyContentMessageToAllAsync_args_msg obj}
    , if obj == default_LinkAndSendBuddyContentMessageToAllAsync_args{linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId = linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToAllAsync_args{linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId = linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId obj}
    ]
from_LinkAndSendBuddyContentMessageToAllAsync_args :: LinkAndSendBuddyContentMessageToAllAsync_args -> T.ThriftVal
from_LinkAndSendBuddyContentMessageToAllAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1657 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1657))) $ linkAndSendBuddyContentMessageToAllAsync_args_requestId record
  , (\_v1657 -> P.Just (2, ("msg",from_Message _v1657))) $ linkAndSendBuddyContentMessageToAllAsync_args_msg record
  , (\_v1657 -> P.Just (3, ("sourceContentId",T.TString $ E.encodeUtf8 _v1657))) $ linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId record
  ]
write_LinkAndSendBuddyContentMessageToAllAsync_args :: T.Protocol p => p -> LinkAndSendBuddyContentMessageToAllAsync_args -> P.IO ()
write_LinkAndSendBuddyContentMessageToAllAsync_args oprot record = T.writeVal oprot $ from_LinkAndSendBuddyContentMessageToAllAsync_args record
encode_LinkAndSendBuddyContentMessageToAllAsync_args :: T.StatelessProtocol p => p -> LinkAndSendBuddyContentMessageToAllAsync_args -> LBS.ByteString
encode_LinkAndSendBuddyContentMessageToAllAsync_args oprot record = T.serializeVal oprot $ from_LinkAndSendBuddyContentMessageToAllAsync_args record
to_LinkAndSendBuddyContentMessageToAllAsync_args :: T.ThriftVal -> LinkAndSendBuddyContentMessageToAllAsync_args
to_LinkAndSendBuddyContentMessageToAllAsync_args (T.TStruct fields) = LinkAndSendBuddyContentMessageToAllAsync_args{
  linkAndSendBuddyContentMessageToAllAsync_args_requestId = P.maybe (linkAndSendBuddyContentMessageToAllAsync_args_requestId default_LinkAndSendBuddyContentMessageToAllAsync_args) (\(_,_val1659) -> (case _val1659 of {T.TString _val1660 -> E.decodeUtf8 _val1660; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  linkAndSendBuddyContentMessageToAllAsync_args_msg = P.maybe (linkAndSendBuddyContentMessageToAllAsync_args_msg default_LinkAndSendBuddyContentMessageToAllAsync_args) (\(_,_val1659) -> (case _val1659 of {T.TStruct _val1661 -> (to_Message (T.TStruct _val1661)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId = P.maybe (linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId default_LinkAndSendBuddyContentMessageToAllAsync_args) (\(_,_val1659) -> (case _val1659 of {T.TString _val1662 -> E.decodeUtf8 _val1662; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_LinkAndSendBuddyContentMessageToAllAsync_args _ = P.error "not a struct"
read_LinkAndSendBuddyContentMessageToAllAsync_args :: T.Protocol p => p -> P.IO LinkAndSendBuddyContentMessageToAllAsync_args
read_LinkAndSendBuddyContentMessageToAllAsync_args iprot = to_LinkAndSendBuddyContentMessageToAllAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToAllAsync_args)
decode_LinkAndSendBuddyContentMessageToAllAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> LinkAndSendBuddyContentMessageToAllAsync_args
decode_LinkAndSendBuddyContentMessageToAllAsync_args iprot bs = to_LinkAndSendBuddyContentMessageToAllAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToAllAsync_args) bs
typemap_LinkAndSendBuddyContentMessageToAllAsync_args :: T.TypeMap
typemap_LinkAndSendBuddyContentMessageToAllAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("sourceContentId",T.T_STRING))]
default_LinkAndSendBuddyContentMessageToAllAsync_args :: LinkAndSendBuddyContentMessageToAllAsync_args
default_LinkAndSendBuddyContentMessageToAllAsync_args = LinkAndSendBuddyContentMessageToAllAsync_args{
  linkAndSendBuddyContentMessageToAllAsync_args_requestId = "",
  linkAndSendBuddyContentMessageToAllAsync_args_msg = default_Message,
  linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId = ""}
data LinkAndSendBuddyContentMessageToAllAsync_result = LinkAndSendBuddyContentMessageToAllAsync_result  { linkAndSendBuddyContentMessageToAllAsync_result_success :: LT.Text
  , linkAndSendBuddyContentMessageToAllAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable LinkAndSendBuddyContentMessageToAllAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` linkAndSendBuddyContentMessageToAllAsync_result_success record   `H.hashWithSalt` linkAndSendBuddyContentMessageToAllAsync_result_e record  
instance QC.Arbitrary LinkAndSendBuddyContentMessageToAllAsync_result where 
  arbitrary = M.liftM LinkAndSendBuddyContentMessageToAllAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_LinkAndSendBuddyContentMessageToAllAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_LinkAndSendBuddyContentMessageToAllAsync_result{linkAndSendBuddyContentMessageToAllAsync_result_success = linkAndSendBuddyContentMessageToAllAsync_result_success obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToAllAsync_result{linkAndSendBuddyContentMessageToAllAsync_result_success = linkAndSendBuddyContentMessageToAllAsync_result_success obj}
    , if obj == default_LinkAndSendBuddyContentMessageToAllAsync_result{linkAndSendBuddyContentMessageToAllAsync_result_e = linkAndSendBuddyContentMessageToAllAsync_result_e obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToAllAsync_result{linkAndSendBuddyContentMessageToAllAsync_result_e = linkAndSendBuddyContentMessageToAllAsync_result_e obj}
    ]
from_LinkAndSendBuddyContentMessageToAllAsync_result :: LinkAndSendBuddyContentMessageToAllAsync_result -> T.ThriftVal
from_LinkAndSendBuddyContentMessageToAllAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1665 -> (1, ("e",from_TalkException _v1665))) <$> linkAndSendBuddyContentMessageToAllAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1665 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v1665))) $ linkAndSendBuddyContentMessageToAllAsync_result_success record
    , (\_v1665 -> (1, ("e",from_TalkException _v1665))) <$> linkAndSendBuddyContentMessageToAllAsync_result_e record
    ]
    )
write_LinkAndSendBuddyContentMessageToAllAsync_result :: T.Protocol p => p -> LinkAndSendBuddyContentMessageToAllAsync_result -> P.IO ()
write_LinkAndSendBuddyContentMessageToAllAsync_result oprot record = T.writeVal oprot $ from_LinkAndSendBuddyContentMessageToAllAsync_result record
encode_LinkAndSendBuddyContentMessageToAllAsync_result :: T.StatelessProtocol p => p -> LinkAndSendBuddyContentMessageToAllAsync_result -> LBS.ByteString
encode_LinkAndSendBuddyContentMessageToAllAsync_result oprot record = T.serializeVal oprot $ from_LinkAndSendBuddyContentMessageToAllAsync_result record
to_LinkAndSendBuddyContentMessageToAllAsync_result :: T.ThriftVal -> LinkAndSendBuddyContentMessageToAllAsync_result
to_LinkAndSendBuddyContentMessageToAllAsync_result (T.TStruct fields) = LinkAndSendBuddyContentMessageToAllAsync_result{
  linkAndSendBuddyContentMessageToAllAsync_result_success = P.maybe (linkAndSendBuddyContentMessageToAllAsync_result_success default_LinkAndSendBuddyContentMessageToAllAsync_result) (\(_,_val1667) -> (case _val1667 of {T.TString _val1668 -> E.decodeUtf8 _val1668; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  linkAndSendBuddyContentMessageToAllAsync_result_e = P.maybe (P.Nothing) (\(_,_val1667) -> P.Just (case _val1667 of {T.TStruct _val1669 -> (to_TalkException (T.TStruct _val1669)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_LinkAndSendBuddyContentMessageToAllAsync_result _ = P.error "not a struct"
read_LinkAndSendBuddyContentMessageToAllAsync_result :: T.Protocol p => p -> P.IO LinkAndSendBuddyContentMessageToAllAsync_result
read_LinkAndSendBuddyContentMessageToAllAsync_result iprot = to_LinkAndSendBuddyContentMessageToAllAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToAllAsync_result)
decode_LinkAndSendBuddyContentMessageToAllAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> LinkAndSendBuddyContentMessageToAllAsync_result
decode_LinkAndSendBuddyContentMessageToAllAsync_result iprot bs = to_LinkAndSendBuddyContentMessageToAllAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToAllAsync_result) bs
typemap_LinkAndSendBuddyContentMessageToAllAsync_result :: T.TypeMap
typemap_LinkAndSendBuddyContentMessageToAllAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_LinkAndSendBuddyContentMessageToAllAsync_result :: LinkAndSendBuddyContentMessageToAllAsync_result
default_LinkAndSendBuddyContentMessageToAllAsync_result = LinkAndSendBuddyContentMessageToAllAsync_result{
  linkAndSendBuddyContentMessageToAllAsync_result_success = "",
  linkAndSendBuddyContentMessageToAllAsync_result_e = P.Nothing}
data LinkAndSendBuddyContentMessageToMids_args = LinkAndSendBuddyContentMessageToMids_args  { linkAndSendBuddyContentMessageToMids_args_requestId :: LT.Text
  , linkAndSendBuddyContentMessageToMids_args_msg :: Message
  , linkAndSendBuddyContentMessageToMids_args_sourceContentId :: LT.Text
  , linkAndSendBuddyContentMessageToMids_args_mids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable LinkAndSendBuddyContentMessageToMids_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` linkAndSendBuddyContentMessageToMids_args_requestId record   `H.hashWithSalt` linkAndSendBuddyContentMessageToMids_args_msg record   `H.hashWithSalt` linkAndSendBuddyContentMessageToMids_args_sourceContentId record   `H.hashWithSalt` linkAndSendBuddyContentMessageToMids_args_mids record  
instance QC.Arbitrary LinkAndSendBuddyContentMessageToMids_args where 
  arbitrary = M.liftM LinkAndSendBuddyContentMessageToMids_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_LinkAndSendBuddyContentMessageToMids_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_requestId = linkAndSendBuddyContentMessageToMids_args_requestId obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_requestId = linkAndSendBuddyContentMessageToMids_args_requestId obj}
    , if obj == default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_msg = linkAndSendBuddyContentMessageToMids_args_msg obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_msg = linkAndSendBuddyContentMessageToMids_args_msg obj}
    , if obj == default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_sourceContentId = linkAndSendBuddyContentMessageToMids_args_sourceContentId obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_sourceContentId = linkAndSendBuddyContentMessageToMids_args_sourceContentId obj}
    , if obj == default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_mids = linkAndSendBuddyContentMessageToMids_args_mids obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToMids_args{linkAndSendBuddyContentMessageToMids_args_mids = linkAndSendBuddyContentMessageToMids_args_mids obj}
    ]
from_LinkAndSendBuddyContentMessageToMids_args :: LinkAndSendBuddyContentMessageToMids_args -> T.ThriftVal
from_LinkAndSendBuddyContentMessageToMids_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1672 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1672))) $ linkAndSendBuddyContentMessageToMids_args_requestId record
  , (\_v1672 -> P.Just (2, ("msg",from_Message _v1672))) $ linkAndSendBuddyContentMessageToMids_args_msg record
  , (\_v1672 -> P.Just (3, ("sourceContentId",T.TString $ E.encodeUtf8 _v1672))) $ linkAndSendBuddyContentMessageToMids_args_sourceContentId record
  , (\_v1672 -> P.Just (4, ("mids",T.TList T.T_STRING $ P.map (\_v1674 -> T.TString $ E.encodeUtf8 _v1674) $ Vector.toList _v1672))) $ linkAndSendBuddyContentMessageToMids_args_mids record
  ]
write_LinkAndSendBuddyContentMessageToMids_args :: T.Protocol p => p -> LinkAndSendBuddyContentMessageToMids_args -> P.IO ()
write_LinkAndSendBuddyContentMessageToMids_args oprot record = T.writeVal oprot $ from_LinkAndSendBuddyContentMessageToMids_args record
encode_LinkAndSendBuddyContentMessageToMids_args :: T.StatelessProtocol p => p -> LinkAndSendBuddyContentMessageToMids_args -> LBS.ByteString
encode_LinkAndSendBuddyContentMessageToMids_args oprot record = T.serializeVal oprot $ from_LinkAndSendBuddyContentMessageToMids_args record
to_LinkAndSendBuddyContentMessageToMids_args :: T.ThriftVal -> LinkAndSendBuddyContentMessageToMids_args
to_LinkAndSendBuddyContentMessageToMids_args (T.TStruct fields) = LinkAndSendBuddyContentMessageToMids_args{
  linkAndSendBuddyContentMessageToMids_args_requestId = P.maybe (linkAndSendBuddyContentMessageToMids_args_requestId default_LinkAndSendBuddyContentMessageToMids_args) (\(_,_val1676) -> (case _val1676 of {T.TString _val1677 -> E.decodeUtf8 _val1677; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  linkAndSendBuddyContentMessageToMids_args_msg = P.maybe (linkAndSendBuddyContentMessageToMids_args_msg default_LinkAndSendBuddyContentMessageToMids_args) (\(_,_val1676) -> (case _val1676 of {T.TStruct _val1678 -> (to_Message (T.TStruct _val1678)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  linkAndSendBuddyContentMessageToMids_args_sourceContentId = P.maybe (linkAndSendBuddyContentMessageToMids_args_sourceContentId default_LinkAndSendBuddyContentMessageToMids_args) (\(_,_val1676) -> (case _val1676 of {T.TString _val1679 -> E.decodeUtf8 _val1679; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  linkAndSendBuddyContentMessageToMids_args_mids = P.maybe (linkAndSendBuddyContentMessageToMids_args_mids default_LinkAndSendBuddyContentMessageToMids_args) (\(_,_val1676) -> (case _val1676 of {T.TList _ _val1680 -> (Vector.fromList $ P.map (\_v1681 -> (case _v1681 of {T.TString _val1682 -> E.decodeUtf8 _val1682; _ -> P.error "wrong type"})) _val1680); _ -> P.error "wrong type"})) (Map.lookup (4) fields)
  }
to_LinkAndSendBuddyContentMessageToMids_args _ = P.error "not a struct"
read_LinkAndSendBuddyContentMessageToMids_args :: T.Protocol p => p -> P.IO LinkAndSendBuddyContentMessageToMids_args
read_LinkAndSendBuddyContentMessageToMids_args iprot = to_LinkAndSendBuddyContentMessageToMids_args <$> T.readVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToMids_args)
decode_LinkAndSendBuddyContentMessageToMids_args :: T.StatelessProtocol p => p -> LBS.ByteString -> LinkAndSendBuddyContentMessageToMids_args
decode_LinkAndSendBuddyContentMessageToMids_args iprot bs = to_LinkAndSendBuddyContentMessageToMids_args $ T.deserializeVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToMids_args) bs
typemap_LinkAndSendBuddyContentMessageToMids_args :: T.TypeMap
typemap_LinkAndSendBuddyContentMessageToMids_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("sourceContentId",T.T_STRING)),(4,("mids",(T.T_LIST T.T_STRING)))]
default_LinkAndSendBuddyContentMessageToMids_args :: LinkAndSendBuddyContentMessageToMids_args
default_LinkAndSendBuddyContentMessageToMids_args = LinkAndSendBuddyContentMessageToMids_args{
  linkAndSendBuddyContentMessageToMids_args_requestId = "",
  linkAndSendBuddyContentMessageToMids_args_msg = default_Message,
  linkAndSendBuddyContentMessageToMids_args_sourceContentId = "",
  linkAndSendBuddyContentMessageToMids_args_mids = Vector.empty}
data LinkAndSendBuddyContentMessageToMids_result = LinkAndSendBuddyContentMessageToMids_result  { linkAndSendBuddyContentMessageToMids_result_success :: SendBuddyMessageResult
  , linkAndSendBuddyContentMessageToMids_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable LinkAndSendBuddyContentMessageToMids_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` linkAndSendBuddyContentMessageToMids_result_success record   `H.hashWithSalt` linkAndSendBuddyContentMessageToMids_result_e record  
instance QC.Arbitrary LinkAndSendBuddyContentMessageToMids_result where 
  arbitrary = M.liftM LinkAndSendBuddyContentMessageToMids_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_LinkAndSendBuddyContentMessageToMids_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_LinkAndSendBuddyContentMessageToMids_result{linkAndSendBuddyContentMessageToMids_result_success = linkAndSendBuddyContentMessageToMids_result_success obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToMids_result{linkAndSendBuddyContentMessageToMids_result_success = linkAndSendBuddyContentMessageToMids_result_success obj}
    , if obj == default_LinkAndSendBuddyContentMessageToMids_result{linkAndSendBuddyContentMessageToMids_result_e = linkAndSendBuddyContentMessageToMids_result_e obj} then P.Nothing else P.Just $ default_LinkAndSendBuddyContentMessageToMids_result{linkAndSendBuddyContentMessageToMids_result_e = linkAndSendBuddyContentMessageToMids_result_e obj}
    ]
from_LinkAndSendBuddyContentMessageToMids_result :: LinkAndSendBuddyContentMessageToMids_result -> T.ThriftVal
from_LinkAndSendBuddyContentMessageToMids_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1685 -> (1, ("e",from_TalkException _v1685))) <$> linkAndSendBuddyContentMessageToMids_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1685 -> P.Just (0, ("success",from_SendBuddyMessageResult _v1685))) $ linkAndSendBuddyContentMessageToMids_result_success record
    , (\_v1685 -> (1, ("e",from_TalkException _v1685))) <$> linkAndSendBuddyContentMessageToMids_result_e record
    ]
    )
write_LinkAndSendBuddyContentMessageToMids_result :: T.Protocol p => p -> LinkAndSendBuddyContentMessageToMids_result -> P.IO ()
write_LinkAndSendBuddyContentMessageToMids_result oprot record = T.writeVal oprot $ from_LinkAndSendBuddyContentMessageToMids_result record
encode_LinkAndSendBuddyContentMessageToMids_result :: T.StatelessProtocol p => p -> LinkAndSendBuddyContentMessageToMids_result -> LBS.ByteString
encode_LinkAndSendBuddyContentMessageToMids_result oprot record = T.serializeVal oprot $ from_LinkAndSendBuddyContentMessageToMids_result record
to_LinkAndSendBuddyContentMessageToMids_result :: T.ThriftVal -> LinkAndSendBuddyContentMessageToMids_result
to_LinkAndSendBuddyContentMessageToMids_result (T.TStruct fields) = LinkAndSendBuddyContentMessageToMids_result{
  linkAndSendBuddyContentMessageToMids_result_success = P.maybe (linkAndSendBuddyContentMessageToMids_result_success default_LinkAndSendBuddyContentMessageToMids_result) (\(_,_val1687) -> (case _val1687 of {T.TStruct _val1688 -> (to_SendBuddyMessageResult (T.TStruct _val1688)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  linkAndSendBuddyContentMessageToMids_result_e = P.maybe (P.Nothing) (\(_,_val1687) -> P.Just (case _val1687 of {T.TStruct _val1689 -> (to_TalkException (T.TStruct _val1689)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_LinkAndSendBuddyContentMessageToMids_result _ = P.error "not a struct"
read_LinkAndSendBuddyContentMessageToMids_result :: T.Protocol p => p -> P.IO LinkAndSendBuddyContentMessageToMids_result
read_LinkAndSendBuddyContentMessageToMids_result iprot = to_LinkAndSendBuddyContentMessageToMids_result <$> T.readVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToMids_result)
decode_LinkAndSendBuddyContentMessageToMids_result :: T.StatelessProtocol p => p -> LBS.ByteString -> LinkAndSendBuddyContentMessageToMids_result
decode_LinkAndSendBuddyContentMessageToMids_result iprot bs = to_LinkAndSendBuddyContentMessageToMids_result $ T.deserializeVal iprot (T.T_STRUCT typemap_LinkAndSendBuddyContentMessageToMids_result) bs
typemap_LinkAndSendBuddyContentMessageToMids_result :: T.TypeMap
typemap_LinkAndSendBuddyContentMessageToMids_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SendBuddyMessageResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_LinkAndSendBuddyContentMessageToMids_result :: LinkAndSendBuddyContentMessageToMids_result
default_LinkAndSendBuddyContentMessageToMids_result = LinkAndSendBuddyContentMessageToMids_result{
  linkAndSendBuddyContentMessageToMids_result_success = default_SendBuddyMessageResult,
  linkAndSendBuddyContentMessageToMids_result_e = P.Nothing}
data NotifyBuddyBlocked_args = NotifyBuddyBlocked_args  { notifyBuddyBlocked_args_buddyMid :: LT.Text
  , notifyBuddyBlocked_args_blockerMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable NotifyBuddyBlocked_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` notifyBuddyBlocked_args_buddyMid record   `H.hashWithSalt` notifyBuddyBlocked_args_blockerMid record  
instance QC.Arbitrary NotifyBuddyBlocked_args where 
  arbitrary = M.liftM NotifyBuddyBlocked_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_NotifyBuddyBlocked_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_NotifyBuddyBlocked_args{notifyBuddyBlocked_args_buddyMid = notifyBuddyBlocked_args_buddyMid obj} then P.Nothing else P.Just $ default_NotifyBuddyBlocked_args{notifyBuddyBlocked_args_buddyMid = notifyBuddyBlocked_args_buddyMid obj}
    , if obj == default_NotifyBuddyBlocked_args{notifyBuddyBlocked_args_blockerMid = notifyBuddyBlocked_args_blockerMid obj} then P.Nothing else P.Just $ default_NotifyBuddyBlocked_args{notifyBuddyBlocked_args_blockerMid = notifyBuddyBlocked_args_blockerMid obj}
    ]
from_NotifyBuddyBlocked_args :: NotifyBuddyBlocked_args -> T.ThriftVal
from_NotifyBuddyBlocked_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1692 -> P.Just (1, ("buddyMid",T.TString $ E.encodeUtf8 _v1692))) $ notifyBuddyBlocked_args_buddyMid record
  , (\_v1692 -> P.Just (2, ("blockerMid",T.TString $ E.encodeUtf8 _v1692))) $ notifyBuddyBlocked_args_blockerMid record
  ]
write_NotifyBuddyBlocked_args :: T.Protocol p => p -> NotifyBuddyBlocked_args -> P.IO ()
write_NotifyBuddyBlocked_args oprot record = T.writeVal oprot $ from_NotifyBuddyBlocked_args record
encode_NotifyBuddyBlocked_args :: T.StatelessProtocol p => p -> NotifyBuddyBlocked_args -> LBS.ByteString
encode_NotifyBuddyBlocked_args oprot record = T.serializeVal oprot $ from_NotifyBuddyBlocked_args record
to_NotifyBuddyBlocked_args :: T.ThriftVal -> NotifyBuddyBlocked_args
to_NotifyBuddyBlocked_args (T.TStruct fields) = NotifyBuddyBlocked_args{
  notifyBuddyBlocked_args_buddyMid = P.maybe (notifyBuddyBlocked_args_buddyMid default_NotifyBuddyBlocked_args) (\(_,_val1694) -> (case _val1694 of {T.TString _val1695 -> E.decodeUtf8 _val1695; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  notifyBuddyBlocked_args_blockerMid = P.maybe (notifyBuddyBlocked_args_blockerMid default_NotifyBuddyBlocked_args) (\(_,_val1694) -> (case _val1694 of {T.TString _val1696 -> E.decodeUtf8 _val1696; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_NotifyBuddyBlocked_args _ = P.error "not a struct"
read_NotifyBuddyBlocked_args :: T.Protocol p => p -> P.IO NotifyBuddyBlocked_args
read_NotifyBuddyBlocked_args iprot = to_NotifyBuddyBlocked_args <$> T.readVal iprot (T.T_STRUCT typemap_NotifyBuddyBlocked_args)
decode_NotifyBuddyBlocked_args :: T.StatelessProtocol p => p -> LBS.ByteString -> NotifyBuddyBlocked_args
decode_NotifyBuddyBlocked_args iprot bs = to_NotifyBuddyBlocked_args $ T.deserializeVal iprot (T.T_STRUCT typemap_NotifyBuddyBlocked_args) bs
typemap_NotifyBuddyBlocked_args :: T.TypeMap
typemap_NotifyBuddyBlocked_args = Map.fromList [(1,("buddyMid",T.T_STRING)),(2,("blockerMid",T.T_STRING))]
default_NotifyBuddyBlocked_args :: NotifyBuddyBlocked_args
default_NotifyBuddyBlocked_args = NotifyBuddyBlocked_args{
  notifyBuddyBlocked_args_buddyMid = "",
  notifyBuddyBlocked_args_blockerMid = ""}
data NotifyBuddyBlocked_result = NotifyBuddyBlocked_result  { notifyBuddyBlocked_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable NotifyBuddyBlocked_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` notifyBuddyBlocked_result_e record  
instance QC.Arbitrary NotifyBuddyBlocked_result where 
  arbitrary = M.liftM NotifyBuddyBlocked_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_NotifyBuddyBlocked_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_NotifyBuddyBlocked_result{notifyBuddyBlocked_result_e = notifyBuddyBlocked_result_e obj} then P.Nothing else P.Just $ default_NotifyBuddyBlocked_result{notifyBuddyBlocked_result_e = notifyBuddyBlocked_result_e obj}
    ]
from_NotifyBuddyBlocked_result :: NotifyBuddyBlocked_result -> T.ThriftVal
from_NotifyBuddyBlocked_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1699 -> (1, ("e",from_TalkException _v1699))) <$> notifyBuddyBlocked_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1699 -> (1, ("e",from_TalkException _v1699))) <$> notifyBuddyBlocked_result_e record
    ]
    )
write_NotifyBuddyBlocked_result :: T.Protocol p => p -> NotifyBuddyBlocked_result -> P.IO ()
write_NotifyBuddyBlocked_result oprot record = T.writeVal oprot $ from_NotifyBuddyBlocked_result record
encode_NotifyBuddyBlocked_result :: T.StatelessProtocol p => p -> NotifyBuddyBlocked_result -> LBS.ByteString
encode_NotifyBuddyBlocked_result oprot record = T.serializeVal oprot $ from_NotifyBuddyBlocked_result record
to_NotifyBuddyBlocked_result :: T.ThriftVal -> NotifyBuddyBlocked_result
to_NotifyBuddyBlocked_result (T.TStruct fields) = NotifyBuddyBlocked_result{
  notifyBuddyBlocked_result_e = P.maybe (P.Nothing) (\(_,_val1701) -> P.Just (case _val1701 of {T.TStruct _val1702 -> (to_TalkException (T.TStruct _val1702)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_NotifyBuddyBlocked_result _ = P.error "not a struct"
read_NotifyBuddyBlocked_result :: T.Protocol p => p -> P.IO NotifyBuddyBlocked_result
read_NotifyBuddyBlocked_result iprot = to_NotifyBuddyBlocked_result <$> T.readVal iprot (T.T_STRUCT typemap_NotifyBuddyBlocked_result)
decode_NotifyBuddyBlocked_result :: T.StatelessProtocol p => p -> LBS.ByteString -> NotifyBuddyBlocked_result
decode_NotifyBuddyBlocked_result iprot bs = to_NotifyBuddyBlocked_result $ T.deserializeVal iprot (T.T_STRUCT typemap_NotifyBuddyBlocked_result) bs
typemap_NotifyBuddyBlocked_result :: T.TypeMap
typemap_NotifyBuddyBlocked_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_NotifyBuddyBlocked_result :: NotifyBuddyBlocked_result
default_NotifyBuddyBlocked_result = NotifyBuddyBlocked_result{
  notifyBuddyBlocked_result_e = P.Nothing}
data NotifyBuddyUnblocked_args = NotifyBuddyUnblocked_args  { notifyBuddyUnblocked_args_buddyMid :: LT.Text
  , notifyBuddyUnblocked_args_blockerMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable NotifyBuddyUnblocked_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` notifyBuddyUnblocked_args_buddyMid record   `H.hashWithSalt` notifyBuddyUnblocked_args_blockerMid record  
instance QC.Arbitrary NotifyBuddyUnblocked_args where 
  arbitrary = M.liftM NotifyBuddyUnblocked_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_NotifyBuddyUnblocked_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_NotifyBuddyUnblocked_args{notifyBuddyUnblocked_args_buddyMid = notifyBuddyUnblocked_args_buddyMid obj} then P.Nothing else P.Just $ default_NotifyBuddyUnblocked_args{notifyBuddyUnblocked_args_buddyMid = notifyBuddyUnblocked_args_buddyMid obj}
    , if obj == default_NotifyBuddyUnblocked_args{notifyBuddyUnblocked_args_blockerMid = notifyBuddyUnblocked_args_blockerMid obj} then P.Nothing else P.Just $ default_NotifyBuddyUnblocked_args{notifyBuddyUnblocked_args_blockerMid = notifyBuddyUnblocked_args_blockerMid obj}
    ]
from_NotifyBuddyUnblocked_args :: NotifyBuddyUnblocked_args -> T.ThriftVal
from_NotifyBuddyUnblocked_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1705 -> P.Just (1, ("buddyMid",T.TString $ E.encodeUtf8 _v1705))) $ notifyBuddyUnblocked_args_buddyMid record
  , (\_v1705 -> P.Just (2, ("blockerMid",T.TString $ E.encodeUtf8 _v1705))) $ notifyBuddyUnblocked_args_blockerMid record
  ]
write_NotifyBuddyUnblocked_args :: T.Protocol p => p -> NotifyBuddyUnblocked_args -> P.IO ()
write_NotifyBuddyUnblocked_args oprot record = T.writeVal oprot $ from_NotifyBuddyUnblocked_args record
encode_NotifyBuddyUnblocked_args :: T.StatelessProtocol p => p -> NotifyBuddyUnblocked_args -> LBS.ByteString
encode_NotifyBuddyUnblocked_args oprot record = T.serializeVal oprot $ from_NotifyBuddyUnblocked_args record
to_NotifyBuddyUnblocked_args :: T.ThriftVal -> NotifyBuddyUnblocked_args
to_NotifyBuddyUnblocked_args (T.TStruct fields) = NotifyBuddyUnblocked_args{
  notifyBuddyUnblocked_args_buddyMid = P.maybe (notifyBuddyUnblocked_args_buddyMid default_NotifyBuddyUnblocked_args) (\(_,_val1707) -> (case _val1707 of {T.TString _val1708 -> E.decodeUtf8 _val1708; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  notifyBuddyUnblocked_args_blockerMid = P.maybe (notifyBuddyUnblocked_args_blockerMid default_NotifyBuddyUnblocked_args) (\(_,_val1707) -> (case _val1707 of {T.TString _val1709 -> E.decodeUtf8 _val1709; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_NotifyBuddyUnblocked_args _ = P.error "not a struct"
read_NotifyBuddyUnblocked_args :: T.Protocol p => p -> P.IO NotifyBuddyUnblocked_args
read_NotifyBuddyUnblocked_args iprot = to_NotifyBuddyUnblocked_args <$> T.readVal iprot (T.T_STRUCT typemap_NotifyBuddyUnblocked_args)
decode_NotifyBuddyUnblocked_args :: T.StatelessProtocol p => p -> LBS.ByteString -> NotifyBuddyUnblocked_args
decode_NotifyBuddyUnblocked_args iprot bs = to_NotifyBuddyUnblocked_args $ T.deserializeVal iprot (T.T_STRUCT typemap_NotifyBuddyUnblocked_args) bs
typemap_NotifyBuddyUnblocked_args :: T.TypeMap
typemap_NotifyBuddyUnblocked_args = Map.fromList [(1,("buddyMid",T.T_STRING)),(2,("blockerMid",T.T_STRING))]
default_NotifyBuddyUnblocked_args :: NotifyBuddyUnblocked_args
default_NotifyBuddyUnblocked_args = NotifyBuddyUnblocked_args{
  notifyBuddyUnblocked_args_buddyMid = "",
  notifyBuddyUnblocked_args_blockerMid = ""}
data NotifyBuddyUnblocked_result = NotifyBuddyUnblocked_result  { notifyBuddyUnblocked_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable NotifyBuddyUnblocked_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` notifyBuddyUnblocked_result_e record  
instance QC.Arbitrary NotifyBuddyUnblocked_result where 
  arbitrary = M.liftM NotifyBuddyUnblocked_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_NotifyBuddyUnblocked_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_NotifyBuddyUnblocked_result{notifyBuddyUnblocked_result_e = notifyBuddyUnblocked_result_e obj} then P.Nothing else P.Just $ default_NotifyBuddyUnblocked_result{notifyBuddyUnblocked_result_e = notifyBuddyUnblocked_result_e obj}
    ]
from_NotifyBuddyUnblocked_result :: NotifyBuddyUnblocked_result -> T.ThriftVal
from_NotifyBuddyUnblocked_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1712 -> (1, ("e",from_TalkException _v1712))) <$> notifyBuddyUnblocked_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1712 -> (1, ("e",from_TalkException _v1712))) <$> notifyBuddyUnblocked_result_e record
    ]
    )
write_NotifyBuddyUnblocked_result :: T.Protocol p => p -> NotifyBuddyUnblocked_result -> P.IO ()
write_NotifyBuddyUnblocked_result oprot record = T.writeVal oprot $ from_NotifyBuddyUnblocked_result record
encode_NotifyBuddyUnblocked_result :: T.StatelessProtocol p => p -> NotifyBuddyUnblocked_result -> LBS.ByteString
encode_NotifyBuddyUnblocked_result oprot record = T.serializeVal oprot $ from_NotifyBuddyUnblocked_result record
to_NotifyBuddyUnblocked_result :: T.ThriftVal -> NotifyBuddyUnblocked_result
to_NotifyBuddyUnblocked_result (T.TStruct fields) = NotifyBuddyUnblocked_result{
  notifyBuddyUnblocked_result_e = P.maybe (P.Nothing) (\(_,_val1714) -> P.Just (case _val1714 of {T.TStruct _val1715 -> (to_TalkException (T.TStruct _val1715)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_NotifyBuddyUnblocked_result _ = P.error "not a struct"
read_NotifyBuddyUnblocked_result :: T.Protocol p => p -> P.IO NotifyBuddyUnblocked_result
read_NotifyBuddyUnblocked_result iprot = to_NotifyBuddyUnblocked_result <$> T.readVal iprot (T.T_STRUCT typemap_NotifyBuddyUnblocked_result)
decode_NotifyBuddyUnblocked_result :: T.StatelessProtocol p => p -> LBS.ByteString -> NotifyBuddyUnblocked_result
decode_NotifyBuddyUnblocked_result iprot bs = to_NotifyBuddyUnblocked_result $ T.deserializeVal iprot (T.T_STRUCT typemap_NotifyBuddyUnblocked_result) bs
typemap_NotifyBuddyUnblocked_result :: T.TypeMap
typemap_NotifyBuddyUnblocked_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_NotifyBuddyUnblocked_result :: NotifyBuddyUnblocked_result
default_NotifyBuddyUnblocked_result = NotifyBuddyUnblocked_result{
  notifyBuddyUnblocked_result_e = P.Nothing}
data RegisterBuddy_args = RegisterBuddy_args  { registerBuddy_args_buddyId :: LT.Text
  , registerBuddy_args_searchId :: LT.Text
  , registerBuddy_args_displayName :: LT.Text
  , registerBuddy_args_statusMeessage :: LT.Text
  , registerBuddy_args_picture :: LBS.ByteString
  , registerBuddy_args_settings :: (Map.HashMap LT.Text LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RegisterBuddy_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` registerBuddy_args_buddyId record   `H.hashWithSalt` registerBuddy_args_searchId record   `H.hashWithSalt` registerBuddy_args_displayName record   `H.hashWithSalt` registerBuddy_args_statusMeessage record   `H.hashWithSalt` registerBuddy_args_picture record   `H.hashWithSalt` registerBuddy_args_settings record  
instance QC.Arbitrary RegisterBuddy_args where 
  arbitrary = M.liftM RegisterBuddy_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_RegisterBuddy_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RegisterBuddy_args{registerBuddy_args_buddyId = registerBuddy_args_buddyId obj} then P.Nothing else P.Just $ default_RegisterBuddy_args{registerBuddy_args_buddyId = registerBuddy_args_buddyId obj}
    , if obj == default_RegisterBuddy_args{registerBuddy_args_searchId = registerBuddy_args_searchId obj} then P.Nothing else P.Just $ default_RegisterBuddy_args{registerBuddy_args_searchId = registerBuddy_args_searchId obj}
    , if obj == default_RegisterBuddy_args{registerBuddy_args_displayName = registerBuddy_args_displayName obj} then P.Nothing else P.Just $ default_RegisterBuddy_args{registerBuddy_args_displayName = registerBuddy_args_displayName obj}
    , if obj == default_RegisterBuddy_args{registerBuddy_args_statusMeessage = registerBuddy_args_statusMeessage obj} then P.Nothing else P.Just $ default_RegisterBuddy_args{registerBuddy_args_statusMeessage = registerBuddy_args_statusMeessage obj}
    , if obj == default_RegisterBuddy_args{registerBuddy_args_picture = registerBuddy_args_picture obj} then P.Nothing else P.Just $ default_RegisterBuddy_args{registerBuddy_args_picture = registerBuddy_args_picture obj}
    , if obj == default_RegisterBuddy_args{registerBuddy_args_settings = registerBuddy_args_settings obj} then P.Nothing else P.Just $ default_RegisterBuddy_args{registerBuddy_args_settings = registerBuddy_args_settings obj}
    ]
from_RegisterBuddy_args :: RegisterBuddy_args -> T.ThriftVal
from_RegisterBuddy_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1718 -> P.Just (2, ("buddyId",T.TString $ E.encodeUtf8 _v1718))) $ registerBuddy_args_buddyId record
  , (\_v1718 -> P.Just (3, ("searchId",T.TString $ E.encodeUtf8 _v1718))) $ registerBuddy_args_searchId record
  , (\_v1718 -> P.Just (4, ("displayName",T.TString $ E.encodeUtf8 _v1718))) $ registerBuddy_args_displayName record
  , (\_v1718 -> P.Just (5, ("statusMeessage",T.TString $ E.encodeUtf8 _v1718))) $ registerBuddy_args_statusMeessage record
  , (\_v1718 -> P.Just (6, ("picture",T.TBinary _v1718))) $ registerBuddy_args_picture record
  , (\_v1718 -> P.Just (7, ("settings",T.TMap T.T_STRING T.T_STRING $ P.map (\(_k1719,_v1720) -> (T.TString $ E.encodeUtf8 _k1719, T.TString $ E.encodeUtf8 _v1720)) $ Map.toList _v1718))) $ registerBuddy_args_settings record
  ]
write_RegisterBuddy_args :: T.Protocol p => p -> RegisterBuddy_args -> P.IO ()
write_RegisterBuddy_args oprot record = T.writeVal oprot $ from_RegisterBuddy_args record
encode_RegisterBuddy_args :: T.StatelessProtocol p => p -> RegisterBuddy_args -> LBS.ByteString
encode_RegisterBuddy_args oprot record = T.serializeVal oprot $ from_RegisterBuddy_args record
to_RegisterBuddy_args :: T.ThriftVal -> RegisterBuddy_args
to_RegisterBuddy_args (T.TStruct fields) = RegisterBuddy_args{
  registerBuddy_args_buddyId = P.maybe (registerBuddy_args_buddyId default_RegisterBuddy_args) (\(_,_val1722) -> (case _val1722 of {T.TString _val1723 -> E.decodeUtf8 _val1723; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  registerBuddy_args_searchId = P.maybe (registerBuddy_args_searchId default_RegisterBuddy_args) (\(_,_val1722) -> (case _val1722 of {T.TString _val1724 -> E.decodeUtf8 _val1724; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  registerBuddy_args_displayName = P.maybe (registerBuddy_args_displayName default_RegisterBuddy_args) (\(_,_val1722) -> (case _val1722 of {T.TString _val1725 -> E.decodeUtf8 _val1725; _ -> P.error "wrong type"})) (Map.lookup (4) fields),
  registerBuddy_args_statusMeessage = P.maybe (registerBuddy_args_statusMeessage default_RegisterBuddy_args) (\(_,_val1722) -> (case _val1722 of {T.TString _val1726 -> E.decodeUtf8 _val1726; _ -> P.error "wrong type"})) (Map.lookup (5) fields),
  registerBuddy_args_picture = P.maybe (registerBuddy_args_picture default_RegisterBuddy_args) (\(_,_val1722) -> (case _val1722 of {T.TBinary _val1727 -> _val1727; T.TString _val1727 -> _val1727; _ -> P.error "wrong type"})) (Map.lookup (6) fields),
  registerBuddy_args_settings = P.maybe (registerBuddy_args_settings default_RegisterBuddy_args) (\(_,_val1722) -> (case _val1722 of {T.TMap _ _ _val1728 -> (Map.fromList $ P.map (\(_k1730,_v1729) -> ((case _k1730 of {T.TString _val1731 -> E.decodeUtf8 _val1731; _ -> P.error "wrong type"}),(case _v1729 of {T.TString _val1732 -> E.decodeUtf8 _val1732; _ -> P.error "wrong type"}))) _val1728); _ -> P.error "wrong type"})) (Map.lookup (7) fields)
  }
to_RegisterBuddy_args _ = P.error "not a struct"
read_RegisterBuddy_args :: T.Protocol p => p -> P.IO RegisterBuddy_args
read_RegisterBuddy_args iprot = to_RegisterBuddy_args <$> T.readVal iprot (T.T_STRUCT typemap_RegisterBuddy_args)
decode_RegisterBuddy_args :: T.StatelessProtocol p => p -> LBS.ByteString -> RegisterBuddy_args
decode_RegisterBuddy_args iprot bs = to_RegisterBuddy_args $ T.deserializeVal iprot (T.T_STRUCT typemap_RegisterBuddy_args) bs
typemap_RegisterBuddy_args :: T.TypeMap
typemap_RegisterBuddy_args = Map.fromList [(2,("buddyId",T.T_STRING)),(3,("searchId",T.T_STRING)),(4,("displayName",T.T_STRING)),(5,("statusMeessage",T.T_STRING)),(6,("picture",T.T_BINARY)),(7,("settings",(T.T_MAP T.T_STRING T.T_STRING)))]
default_RegisterBuddy_args :: RegisterBuddy_args
default_RegisterBuddy_args = RegisterBuddy_args{
  registerBuddy_args_buddyId = "",
  registerBuddy_args_searchId = "",
  registerBuddy_args_displayName = "",
  registerBuddy_args_statusMeessage = "",
  registerBuddy_args_picture = "",
  registerBuddy_args_settings = Map.empty}
data RegisterBuddy_result = RegisterBuddy_result  { registerBuddy_result_success :: LT.Text
  , registerBuddy_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RegisterBuddy_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` registerBuddy_result_success record   `H.hashWithSalt` registerBuddy_result_e record  
instance QC.Arbitrary RegisterBuddy_result where 
  arbitrary = M.liftM RegisterBuddy_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_RegisterBuddy_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RegisterBuddy_result{registerBuddy_result_success = registerBuddy_result_success obj} then P.Nothing else P.Just $ default_RegisterBuddy_result{registerBuddy_result_success = registerBuddy_result_success obj}
    , if obj == default_RegisterBuddy_result{registerBuddy_result_e = registerBuddy_result_e obj} then P.Nothing else P.Just $ default_RegisterBuddy_result{registerBuddy_result_e = registerBuddy_result_e obj}
    ]
from_RegisterBuddy_result :: RegisterBuddy_result -> T.ThriftVal
from_RegisterBuddy_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1735 -> (1, ("e",from_TalkException _v1735))) <$> registerBuddy_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1735 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v1735))) $ registerBuddy_result_success record
    , (\_v1735 -> (1, ("e",from_TalkException _v1735))) <$> registerBuddy_result_e record
    ]
    )
write_RegisterBuddy_result :: T.Protocol p => p -> RegisterBuddy_result -> P.IO ()
write_RegisterBuddy_result oprot record = T.writeVal oprot $ from_RegisterBuddy_result record
encode_RegisterBuddy_result :: T.StatelessProtocol p => p -> RegisterBuddy_result -> LBS.ByteString
encode_RegisterBuddy_result oprot record = T.serializeVal oprot $ from_RegisterBuddy_result record
to_RegisterBuddy_result :: T.ThriftVal -> RegisterBuddy_result
to_RegisterBuddy_result (T.TStruct fields) = RegisterBuddy_result{
  registerBuddy_result_success = P.maybe (registerBuddy_result_success default_RegisterBuddy_result) (\(_,_val1737) -> (case _val1737 of {T.TString _val1738 -> E.decodeUtf8 _val1738; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  registerBuddy_result_e = P.maybe (P.Nothing) (\(_,_val1737) -> P.Just (case _val1737 of {T.TStruct _val1739 -> (to_TalkException (T.TStruct _val1739)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_RegisterBuddy_result _ = P.error "not a struct"
read_RegisterBuddy_result :: T.Protocol p => p -> P.IO RegisterBuddy_result
read_RegisterBuddy_result iprot = to_RegisterBuddy_result <$> T.readVal iprot (T.T_STRUCT typemap_RegisterBuddy_result)
decode_RegisterBuddy_result :: T.StatelessProtocol p => p -> LBS.ByteString -> RegisterBuddy_result
decode_RegisterBuddy_result iprot bs = to_RegisterBuddy_result $ T.deserializeVal iprot (T.T_STRUCT typemap_RegisterBuddy_result) bs
typemap_RegisterBuddy_result :: T.TypeMap
typemap_RegisterBuddy_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_RegisterBuddy_result :: RegisterBuddy_result
default_RegisterBuddy_result = RegisterBuddy_result{
  registerBuddy_result_success = "",
  registerBuddy_result_e = P.Nothing}
data RegisterBuddyAdmin_args = RegisterBuddyAdmin_args  { registerBuddyAdmin_args_buddyId :: LT.Text
  , registerBuddyAdmin_args_searchId :: LT.Text
  , registerBuddyAdmin_args_displayName :: LT.Text
  , registerBuddyAdmin_args_statusMessage :: LT.Text
  , registerBuddyAdmin_args_picture :: LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RegisterBuddyAdmin_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` registerBuddyAdmin_args_buddyId record   `H.hashWithSalt` registerBuddyAdmin_args_searchId record   `H.hashWithSalt` registerBuddyAdmin_args_displayName record   `H.hashWithSalt` registerBuddyAdmin_args_statusMessage record   `H.hashWithSalt` registerBuddyAdmin_args_picture record  
instance QC.Arbitrary RegisterBuddyAdmin_args where 
  arbitrary = M.liftM RegisterBuddyAdmin_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_RegisterBuddyAdmin_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_buddyId = registerBuddyAdmin_args_buddyId obj} then P.Nothing else P.Just $ default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_buddyId = registerBuddyAdmin_args_buddyId obj}
    , if obj == default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_searchId = registerBuddyAdmin_args_searchId obj} then P.Nothing else P.Just $ default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_searchId = registerBuddyAdmin_args_searchId obj}
    , if obj == default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_displayName = registerBuddyAdmin_args_displayName obj} then P.Nothing else P.Just $ default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_displayName = registerBuddyAdmin_args_displayName obj}
    , if obj == default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_statusMessage = registerBuddyAdmin_args_statusMessage obj} then P.Nothing else P.Just $ default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_statusMessage = registerBuddyAdmin_args_statusMessage obj}
    , if obj == default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_picture = registerBuddyAdmin_args_picture obj} then P.Nothing else P.Just $ default_RegisterBuddyAdmin_args{registerBuddyAdmin_args_picture = registerBuddyAdmin_args_picture obj}
    ]
from_RegisterBuddyAdmin_args :: RegisterBuddyAdmin_args -> T.ThriftVal
from_RegisterBuddyAdmin_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1742 -> P.Just (2, ("buddyId",T.TString $ E.encodeUtf8 _v1742))) $ registerBuddyAdmin_args_buddyId record
  , (\_v1742 -> P.Just (3, ("searchId",T.TString $ E.encodeUtf8 _v1742))) $ registerBuddyAdmin_args_searchId record
  , (\_v1742 -> P.Just (4, ("displayName",T.TString $ E.encodeUtf8 _v1742))) $ registerBuddyAdmin_args_displayName record
  , (\_v1742 -> P.Just (5, ("statusMessage",T.TString $ E.encodeUtf8 _v1742))) $ registerBuddyAdmin_args_statusMessage record
  , (\_v1742 -> P.Just (6, ("picture",T.TBinary _v1742))) $ registerBuddyAdmin_args_picture record
  ]
write_RegisterBuddyAdmin_args :: T.Protocol p => p -> RegisterBuddyAdmin_args -> P.IO ()
write_RegisterBuddyAdmin_args oprot record = T.writeVal oprot $ from_RegisterBuddyAdmin_args record
encode_RegisterBuddyAdmin_args :: T.StatelessProtocol p => p -> RegisterBuddyAdmin_args -> LBS.ByteString
encode_RegisterBuddyAdmin_args oprot record = T.serializeVal oprot $ from_RegisterBuddyAdmin_args record
to_RegisterBuddyAdmin_args :: T.ThriftVal -> RegisterBuddyAdmin_args
to_RegisterBuddyAdmin_args (T.TStruct fields) = RegisterBuddyAdmin_args{
  registerBuddyAdmin_args_buddyId = P.maybe (registerBuddyAdmin_args_buddyId default_RegisterBuddyAdmin_args) (\(_,_val1744) -> (case _val1744 of {T.TString _val1745 -> E.decodeUtf8 _val1745; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  registerBuddyAdmin_args_searchId = P.maybe (registerBuddyAdmin_args_searchId default_RegisterBuddyAdmin_args) (\(_,_val1744) -> (case _val1744 of {T.TString _val1746 -> E.decodeUtf8 _val1746; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  registerBuddyAdmin_args_displayName = P.maybe (registerBuddyAdmin_args_displayName default_RegisterBuddyAdmin_args) (\(_,_val1744) -> (case _val1744 of {T.TString _val1747 -> E.decodeUtf8 _val1747; _ -> P.error "wrong type"})) (Map.lookup (4) fields),
  registerBuddyAdmin_args_statusMessage = P.maybe (registerBuddyAdmin_args_statusMessage default_RegisterBuddyAdmin_args) (\(_,_val1744) -> (case _val1744 of {T.TString _val1748 -> E.decodeUtf8 _val1748; _ -> P.error "wrong type"})) (Map.lookup (5) fields),
  registerBuddyAdmin_args_picture = P.maybe (registerBuddyAdmin_args_picture default_RegisterBuddyAdmin_args) (\(_,_val1744) -> (case _val1744 of {T.TBinary _val1749 -> _val1749; T.TString _val1749 -> _val1749; _ -> P.error "wrong type"})) (Map.lookup (6) fields)
  }
to_RegisterBuddyAdmin_args _ = P.error "not a struct"
read_RegisterBuddyAdmin_args :: T.Protocol p => p -> P.IO RegisterBuddyAdmin_args
read_RegisterBuddyAdmin_args iprot = to_RegisterBuddyAdmin_args <$> T.readVal iprot (T.T_STRUCT typemap_RegisterBuddyAdmin_args)
decode_RegisterBuddyAdmin_args :: T.StatelessProtocol p => p -> LBS.ByteString -> RegisterBuddyAdmin_args
decode_RegisterBuddyAdmin_args iprot bs = to_RegisterBuddyAdmin_args $ T.deserializeVal iprot (T.T_STRUCT typemap_RegisterBuddyAdmin_args) bs
typemap_RegisterBuddyAdmin_args :: T.TypeMap
typemap_RegisterBuddyAdmin_args = Map.fromList [(2,("buddyId",T.T_STRING)),(3,("searchId",T.T_STRING)),(4,("displayName",T.T_STRING)),(5,("statusMessage",T.T_STRING)),(6,("picture",T.T_BINARY))]
default_RegisterBuddyAdmin_args :: RegisterBuddyAdmin_args
default_RegisterBuddyAdmin_args = RegisterBuddyAdmin_args{
  registerBuddyAdmin_args_buddyId = "",
  registerBuddyAdmin_args_searchId = "",
  registerBuddyAdmin_args_displayName = "",
  registerBuddyAdmin_args_statusMessage = "",
  registerBuddyAdmin_args_picture = ""}
data RegisterBuddyAdmin_result = RegisterBuddyAdmin_result  { registerBuddyAdmin_result_success :: LT.Text
  , registerBuddyAdmin_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RegisterBuddyAdmin_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` registerBuddyAdmin_result_success record   `H.hashWithSalt` registerBuddyAdmin_result_e record  
instance QC.Arbitrary RegisterBuddyAdmin_result where 
  arbitrary = M.liftM RegisterBuddyAdmin_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_RegisterBuddyAdmin_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RegisterBuddyAdmin_result{registerBuddyAdmin_result_success = registerBuddyAdmin_result_success obj} then P.Nothing else P.Just $ default_RegisterBuddyAdmin_result{registerBuddyAdmin_result_success = registerBuddyAdmin_result_success obj}
    , if obj == default_RegisterBuddyAdmin_result{registerBuddyAdmin_result_e = registerBuddyAdmin_result_e obj} then P.Nothing else P.Just $ default_RegisterBuddyAdmin_result{registerBuddyAdmin_result_e = registerBuddyAdmin_result_e obj}
    ]
from_RegisterBuddyAdmin_result :: RegisterBuddyAdmin_result -> T.ThriftVal
from_RegisterBuddyAdmin_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1752 -> (1, ("e",from_TalkException _v1752))) <$> registerBuddyAdmin_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1752 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v1752))) $ registerBuddyAdmin_result_success record
    , (\_v1752 -> (1, ("e",from_TalkException _v1752))) <$> registerBuddyAdmin_result_e record
    ]
    )
write_RegisterBuddyAdmin_result :: T.Protocol p => p -> RegisterBuddyAdmin_result -> P.IO ()
write_RegisterBuddyAdmin_result oprot record = T.writeVal oprot $ from_RegisterBuddyAdmin_result record
encode_RegisterBuddyAdmin_result :: T.StatelessProtocol p => p -> RegisterBuddyAdmin_result -> LBS.ByteString
encode_RegisterBuddyAdmin_result oprot record = T.serializeVal oprot $ from_RegisterBuddyAdmin_result record
to_RegisterBuddyAdmin_result :: T.ThriftVal -> RegisterBuddyAdmin_result
to_RegisterBuddyAdmin_result (T.TStruct fields) = RegisterBuddyAdmin_result{
  registerBuddyAdmin_result_success = P.maybe (registerBuddyAdmin_result_success default_RegisterBuddyAdmin_result) (\(_,_val1754) -> (case _val1754 of {T.TString _val1755 -> E.decodeUtf8 _val1755; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  registerBuddyAdmin_result_e = P.maybe (P.Nothing) (\(_,_val1754) -> P.Just (case _val1754 of {T.TStruct _val1756 -> (to_TalkException (T.TStruct _val1756)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_RegisterBuddyAdmin_result _ = P.error "not a struct"
read_RegisterBuddyAdmin_result :: T.Protocol p => p -> P.IO RegisterBuddyAdmin_result
read_RegisterBuddyAdmin_result iprot = to_RegisterBuddyAdmin_result <$> T.readVal iprot (T.T_STRUCT typemap_RegisterBuddyAdmin_result)
decode_RegisterBuddyAdmin_result :: T.StatelessProtocol p => p -> LBS.ByteString -> RegisterBuddyAdmin_result
decode_RegisterBuddyAdmin_result iprot bs = to_RegisterBuddyAdmin_result $ T.deserializeVal iprot (T.T_STRUCT typemap_RegisterBuddyAdmin_result) bs
typemap_RegisterBuddyAdmin_result :: T.TypeMap
typemap_RegisterBuddyAdmin_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_RegisterBuddyAdmin_result :: RegisterBuddyAdmin_result
default_RegisterBuddyAdmin_result = RegisterBuddyAdmin_result{
  registerBuddyAdmin_result_success = "",
  registerBuddyAdmin_result_e = P.Nothing}
data ReissueContactTicket_args = ReissueContactTicket_args  { reissueContactTicket_args_expirationTime :: I.Int64
  , reissueContactTicket_args_maxUseCount :: I.Int32
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable ReissueContactTicket_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` reissueContactTicket_args_expirationTime record   `H.hashWithSalt` reissueContactTicket_args_maxUseCount record  
instance QC.Arbitrary ReissueContactTicket_args where 
  arbitrary = M.liftM ReissueContactTicket_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_ReissueContactTicket_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_ReissueContactTicket_args{reissueContactTicket_args_expirationTime = reissueContactTicket_args_expirationTime obj} then P.Nothing else P.Just $ default_ReissueContactTicket_args{reissueContactTicket_args_expirationTime = reissueContactTicket_args_expirationTime obj}
    , if obj == default_ReissueContactTicket_args{reissueContactTicket_args_maxUseCount = reissueContactTicket_args_maxUseCount obj} then P.Nothing else P.Just $ default_ReissueContactTicket_args{reissueContactTicket_args_maxUseCount = reissueContactTicket_args_maxUseCount obj}
    ]
from_ReissueContactTicket_args :: ReissueContactTicket_args -> T.ThriftVal
from_ReissueContactTicket_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1759 -> P.Just (3, ("expirationTime",T.TI64 _v1759))) $ reissueContactTicket_args_expirationTime record
  , (\_v1759 -> P.Just (4, ("maxUseCount",T.TI32 _v1759))) $ reissueContactTicket_args_maxUseCount record
  ]
write_ReissueContactTicket_args :: T.Protocol p => p -> ReissueContactTicket_args -> P.IO ()
write_ReissueContactTicket_args oprot record = T.writeVal oprot $ from_ReissueContactTicket_args record
encode_ReissueContactTicket_args :: T.StatelessProtocol p => p -> ReissueContactTicket_args -> LBS.ByteString
encode_ReissueContactTicket_args oprot record = T.serializeVal oprot $ from_ReissueContactTicket_args record
to_ReissueContactTicket_args :: T.ThriftVal -> ReissueContactTicket_args
to_ReissueContactTicket_args (T.TStruct fields) = ReissueContactTicket_args{
  reissueContactTicket_args_expirationTime = P.maybe (reissueContactTicket_args_expirationTime default_ReissueContactTicket_args) (\(_,_val1761) -> (case _val1761 of {T.TI64 _val1762 -> _val1762; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  reissueContactTicket_args_maxUseCount = P.maybe (reissueContactTicket_args_maxUseCount default_ReissueContactTicket_args) (\(_,_val1761) -> (case _val1761 of {T.TI32 _val1763 -> _val1763; _ -> P.error "wrong type"})) (Map.lookup (4) fields)
  }
to_ReissueContactTicket_args _ = P.error "not a struct"
read_ReissueContactTicket_args :: T.Protocol p => p -> P.IO ReissueContactTicket_args
read_ReissueContactTicket_args iprot = to_ReissueContactTicket_args <$> T.readVal iprot (T.T_STRUCT typemap_ReissueContactTicket_args)
decode_ReissueContactTicket_args :: T.StatelessProtocol p => p -> LBS.ByteString -> ReissueContactTicket_args
decode_ReissueContactTicket_args iprot bs = to_ReissueContactTicket_args $ T.deserializeVal iprot (T.T_STRUCT typemap_ReissueContactTicket_args) bs
typemap_ReissueContactTicket_args :: T.TypeMap
typemap_ReissueContactTicket_args = Map.fromList [(3,("expirationTime",T.T_I64)),(4,("maxUseCount",T.T_I32))]
default_ReissueContactTicket_args :: ReissueContactTicket_args
default_ReissueContactTicket_args = ReissueContactTicket_args{
  reissueContactTicket_args_expirationTime = 0,
  reissueContactTicket_args_maxUseCount = 0}
data ReissueContactTicket_result = ReissueContactTicket_result  { reissueContactTicket_result_success :: LT.Text
  , reissueContactTicket_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable ReissueContactTicket_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` reissueContactTicket_result_success record   `H.hashWithSalt` reissueContactTicket_result_e record  
instance QC.Arbitrary ReissueContactTicket_result where 
  arbitrary = M.liftM ReissueContactTicket_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_ReissueContactTicket_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_ReissueContactTicket_result{reissueContactTicket_result_success = reissueContactTicket_result_success obj} then P.Nothing else P.Just $ default_ReissueContactTicket_result{reissueContactTicket_result_success = reissueContactTicket_result_success obj}
    , if obj == default_ReissueContactTicket_result{reissueContactTicket_result_e = reissueContactTicket_result_e obj} then P.Nothing else P.Just $ default_ReissueContactTicket_result{reissueContactTicket_result_e = reissueContactTicket_result_e obj}
    ]
from_ReissueContactTicket_result :: ReissueContactTicket_result -> T.ThriftVal
from_ReissueContactTicket_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1766 -> (1, ("e",from_TalkException _v1766))) <$> reissueContactTicket_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1766 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v1766))) $ reissueContactTicket_result_success record
    , (\_v1766 -> (1, ("e",from_TalkException _v1766))) <$> reissueContactTicket_result_e record
    ]
    )
write_ReissueContactTicket_result :: T.Protocol p => p -> ReissueContactTicket_result -> P.IO ()
write_ReissueContactTicket_result oprot record = T.writeVal oprot $ from_ReissueContactTicket_result record
encode_ReissueContactTicket_result :: T.StatelessProtocol p => p -> ReissueContactTicket_result -> LBS.ByteString
encode_ReissueContactTicket_result oprot record = T.serializeVal oprot $ from_ReissueContactTicket_result record
to_ReissueContactTicket_result :: T.ThriftVal -> ReissueContactTicket_result
to_ReissueContactTicket_result (T.TStruct fields) = ReissueContactTicket_result{
  reissueContactTicket_result_success = P.maybe (reissueContactTicket_result_success default_ReissueContactTicket_result) (\(_,_val1768) -> (case _val1768 of {T.TString _val1769 -> E.decodeUtf8 _val1769; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  reissueContactTicket_result_e = P.maybe (P.Nothing) (\(_,_val1768) -> P.Just (case _val1768 of {T.TStruct _val1770 -> (to_TalkException (T.TStruct _val1770)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_ReissueContactTicket_result _ = P.error "not a struct"
read_ReissueContactTicket_result :: T.Protocol p => p -> P.IO ReissueContactTicket_result
read_ReissueContactTicket_result iprot = to_ReissueContactTicket_result <$> T.readVal iprot (T.T_STRUCT typemap_ReissueContactTicket_result)
decode_ReissueContactTicket_result :: T.StatelessProtocol p => p -> LBS.ByteString -> ReissueContactTicket_result
decode_ReissueContactTicket_result iprot bs = to_ReissueContactTicket_result $ T.deserializeVal iprot (T.T_STRUCT typemap_ReissueContactTicket_result) bs
typemap_ReissueContactTicket_result :: T.TypeMap
typemap_ReissueContactTicket_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_ReissueContactTicket_result :: ReissueContactTicket_result
default_ReissueContactTicket_result = ReissueContactTicket_result{
  reissueContactTicket_result_success = "",
  reissueContactTicket_result_e = P.Nothing}
data RemoveBuddyMember_args = RemoveBuddyMember_args  { removeBuddyMember_args_requestId :: LT.Text
  , removeBuddyMember_args_userMid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RemoveBuddyMember_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` removeBuddyMember_args_requestId record   `H.hashWithSalt` removeBuddyMember_args_userMid record  
instance QC.Arbitrary RemoveBuddyMember_args where 
  arbitrary = M.liftM RemoveBuddyMember_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_RemoveBuddyMember_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RemoveBuddyMember_args{removeBuddyMember_args_requestId = removeBuddyMember_args_requestId obj} then P.Nothing else P.Just $ default_RemoveBuddyMember_args{removeBuddyMember_args_requestId = removeBuddyMember_args_requestId obj}
    , if obj == default_RemoveBuddyMember_args{removeBuddyMember_args_userMid = removeBuddyMember_args_userMid obj} then P.Nothing else P.Just $ default_RemoveBuddyMember_args{removeBuddyMember_args_userMid = removeBuddyMember_args_userMid obj}
    ]
from_RemoveBuddyMember_args :: RemoveBuddyMember_args -> T.ThriftVal
from_RemoveBuddyMember_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1773 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1773))) $ removeBuddyMember_args_requestId record
  , (\_v1773 -> P.Just (2, ("userMid",T.TString $ E.encodeUtf8 _v1773))) $ removeBuddyMember_args_userMid record
  ]
write_RemoveBuddyMember_args :: T.Protocol p => p -> RemoveBuddyMember_args -> P.IO ()
write_RemoveBuddyMember_args oprot record = T.writeVal oprot $ from_RemoveBuddyMember_args record
encode_RemoveBuddyMember_args :: T.StatelessProtocol p => p -> RemoveBuddyMember_args -> LBS.ByteString
encode_RemoveBuddyMember_args oprot record = T.serializeVal oprot $ from_RemoveBuddyMember_args record
to_RemoveBuddyMember_args :: T.ThriftVal -> RemoveBuddyMember_args
to_RemoveBuddyMember_args (T.TStruct fields) = RemoveBuddyMember_args{
  removeBuddyMember_args_requestId = P.maybe (removeBuddyMember_args_requestId default_RemoveBuddyMember_args) (\(_,_val1775) -> (case _val1775 of {T.TString _val1776 -> E.decodeUtf8 _val1776; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  removeBuddyMember_args_userMid = P.maybe (removeBuddyMember_args_userMid default_RemoveBuddyMember_args) (\(_,_val1775) -> (case _val1775 of {T.TString _val1777 -> E.decodeUtf8 _val1777; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_RemoveBuddyMember_args _ = P.error "not a struct"
read_RemoveBuddyMember_args :: T.Protocol p => p -> P.IO RemoveBuddyMember_args
read_RemoveBuddyMember_args iprot = to_RemoveBuddyMember_args <$> T.readVal iprot (T.T_STRUCT typemap_RemoveBuddyMember_args)
decode_RemoveBuddyMember_args :: T.StatelessProtocol p => p -> LBS.ByteString -> RemoveBuddyMember_args
decode_RemoveBuddyMember_args iprot bs = to_RemoveBuddyMember_args $ T.deserializeVal iprot (T.T_STRUCT typemap_RemoveBuddyMember_args) bs
typemap_RemoveBuddyMember_args :: T.TypeMap
typemap_RemoveBuddyMember_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("userMid",T.T_STRING))]
default_RemoveBuddyMember_args :: RemoveBuddyMember_args
default_RemoveBuddyMember_args = RemoveBuddyMember_args{
  removeBuddyMember_args_requestId = "",
  removeBuddyMember_args_userMid = ""}
data RemoveBuddyMember_result = RemoveBuddyMember_result  { removeBuddyMember_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RemoveBuddyMember_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` removeBuddyMember_result_e record  
instance QC.Arbitrary RemoveBuddyMember_result where 
  arbitrary = M.liftM RemoveBuddyMember_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_RemoveBuddyMember_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RemoveBuddyMember_result{removeBuddyMember_result_e = removeBuddyMember_result_e obj} then P.Nothing else P.Just $ default_RemoveBuddyMember_result{removeBuddyMember_result_e = removeBuddyMember_result_e obj}
    ]
from_RemoveBuddyMember_result :: RemoveBuddyMember_result -> T.ThriftVal
from_RemoveBuddyMember_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1780 -> (1, ("e",from_TalkException _v1780))) <$> removeBuddyMember_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1780 -> (1, ("e",from_TalkException _v1780))) <$> removeBuddyMember_result_e record
    ]
    )
write_RemoveBuddyMember_result :: T.Protocol p => p -> RemoveBuddyMember_result -> P.IO ()
write_RemoveBuddyMember_result oprot record = T.writeVal oprot $ from_RemoveBuddyMember_result record
encode_RemoveBuddyMember_result :: T.StatelessProtocol p => p -> RemoveBuddyMember_result -> LBS.ByteString
encode_RemoveBuddyMember_result oprot record = T.serializeVal oprot $ from_RemoveBuddyMember_result record
to_RemoveBuddyMember_result :: T.ThriftVal -> RemoveBuddyMember_result
to_RemoveBuddyMember_result (T.TStruct fields) = RemoveBuddyMember_result{
  removeBuddyMember_result_e = P.maybe (P.Nothing) (\(_,_val1782) -> P.Just (case _val1782 of {T.TStruct _val1783 -> (to_TalkException (T.TStruct _val1783)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_RemoveBuddyMember_result _ = P.error "not a struct"
read_RemoveBuddyMember_result :: T.Protocol p => p -> P.IO RemoveBuddyMember_result
read_RemoveBuddyMember_result iprot = to_RemoveBuddyMember_result <$> T.readVal iprot (T.T_STRUCT typemap_RemoveBuddyMember_result)
decode_RemoveBuddyMember_result :: T.StatelessProtocol p => p -> LBS.ByteString -> RemoveBuddyMember_result
decode_RemoveBuddyMember_result iprot bs = to_RemoveBuddyMember_result $ T.deserializeVal iprot (T.T_STRUCT typemap_RemoveBuddyMember_result) bs
typemap_RemoveBuddyMember_result :: T.TypeMap
typemap_RemoveBuddyMember_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_RemoveBuddyMember_result :: RemoveBuddyMember_result
default_RemoveBuddyMember_result = RemoveBuddyMember_result{
  removeBuddyMember_result_e = P.Nothing}
data RemoveBuddyMembers_args = RemoveBuddyMembers_args  { removeBuddyMembers_args_requestId :: LT.Text
  , removeBuddyMembers_args_userMids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RemoveBuddyMembers_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` removeBuddyMembers_args_requestId record   `H.hashWithSalt` removeBuddyMembers_args_userMids record  
instance QC.Arbitrary RemoveBuddyMembers_args where 
  arbitrary = M.liftM RemoveBuddyMembers_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_RemoveBuddyMembers_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RemoveBuddyMembers_args{removeBuddyMembers_args_requestId = removeBuddyMembers_args_requestId obj} then P.Nothing else P.Just $ default_RemoveBuddyMembers_args{removeBuddyMembers_args_requestId = removeBuddyMembers_args_requestId obj}
    , if obj == default_RemoveBuddyMembers_args{removeBuddyMembers_args_userMids = removeBuddyMembers_args_userMids obj} then P.Nothing else P.Just $ default_RemoveBuddyMembers_args{removeBuddyMembers_args_userMids = removeBuddyMembers_args_userMids obj}
    ]
from_RemoveBuddyMembers_args :: RemoveBuddyMembers_args -> T.ThriftVal
from_RemoveBuddyMembers_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1786 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1786))) $ removeBuddyMembers_args_requestId record
  , (\_v1786 -> P.Just (2, ("userMids",T.TList T.T_STRING $ P.map (\_v1788 -> T.TString $ E.encodeUtf8 _v1788) $ Vector.toList _v1786))) $ removeBuddyMembers_args_userMids record
  ]
write_RemoveBuddyMembers_args :: T.Protocol p => p -> RemoveBuddyMembers_args -> P.IO ()
write_RemoveBuddyMembers_args oprot record = T.writeVal oprot $ from_RemoveBuddyMembers_args record
encode_RemoveBuddyMembers_args :: T.StatelessProtocol p => p -> RemoveBuddyMembers_args -> LBS.ByteString
encode_RemoveBuddyMembers_args oprot record = T.serializeVal oprot $ from_RemoveBuddyMembers_args record
to_RemoveBuddyMembers_args :: T.ThriftVal -> RemoveBuddyMembers_args
to_RemoveBuddyMembers_args (T.TStruct fields) = RemoveBuddyMembers_args{
  removeBuddyMembers_args_requestId = P.maybe (removeBuddyMembers_args_requestId default_RemoveBuddyMembers_args) (\(_,_val1790) -> (case _val1790 of {T.TString _val1791 -> E.decodeUtf8 _val1791; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  removeBuddyMembers_args_userMids = P.maybe (removeBuddyMembers_args_userMids default_RemoveBuddyMembers_args) (\(_,_val1790) -> (case _val1790 of {T.TList _ _val1792 -> (Vector.fromList $ P.map (\_v1793 -> (case _v1793 of {T.TString _val1794 -> E.decodeUtf8 _val1794; _ -> P.error "wrong type"})) _val1792); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_RemoveBuddyMembers_args _ = P.error "not a struct"
read_RemoveBuddyMembers_args :: T.Protocol p => p -> P.IO RemoveBuddyMembers_args
read_RemoveBuddyMembers_args iprot = to_RemoveBuddyMembers_args <$> T.readVal iprot (T.T_STRUCT typemap_RemoveBuddyMembers_args)
decode_RemoveBuddyMembers_args :: T.StatelessProtocol p => p -> LBS.ByteString -> RemoveBuddyMembers_args
decode_RemoveBuddyMembers_args iprot bs = to_RemoveBuddyMembers_args $ T.deserializeVal iprot (T.T_STRUCT typemap_RemoveBuddyMembers_args) bs
typemap_RemoveBuddyMembers_args :: T.TypeMap
typemap_RemoveBuddyMembers_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("userMids",(T.T_LIST T.T_STRING)))]
default_RemoveBuddyMembers_args :: RemoveBuddyMembers_args
default_RemoveBuddyMembers_args = RemoveBuddyMembers_args{
  removeBuddyMembers_args_requestId = "",
  removeBuddyMembers_args_userMids = Vector.empty}
data RemoveBuddyMembers_result = RemoveBuddyMembers_result  { removeBuddyMembers_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable RemoveBuddyMembers_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` removeBuddyMembers_result_e record  
instance QC.Arbitrary RemoveBuddyMembers_result where 
  arbitrary = M.liftM RemoveBuddyMembers_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_RemoveBuddyMembers_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_RemoveBuddyMembers_result{removeBuddyMembers_result_e = removeBuddyMembers_result_e obj} then P.Nothing else P.Just $ default_RemoveBuddyMembers_result{removeBuddyMembers_result_e = removeBuddyMembers_result_e obj}
    ]
from_RemoveBuddyMembers_result :: RemoveBuddyMembers_result -> T.ThriftVal
from_RemoveBuddyMembers_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1797 -> (1, ("e",from_TalkException _v1797))) <$> removeBuddyMembers_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1797 -> (1, ("e",from_TalkException _v1797))) <$> removeBuddyMembers_result_e record
    ]
    )
write_RemoveBuddyMembers_result :: T.Protocol p => p -> RemoveBuddyMembers_result -> P.IO ()
write_RemoveBuddyMembers_result oprot record = T.writeVal oprot $ from_RemoveBuddyMembers_result record
encode_RemoveBuddyMembers_result :: T.StatelessProtocol p => p -> RemoveBuddyMembers_result -> LBS.ByteString
encode_RemoveBuddyMembers_result oprot record = T.serializeVal oprot $ from_RemoveBuddyMembers_result record
to_RemoveBuddyMembers_result :: T.ThriftVal -> RemoveBuddyMembers_result
to_RemoveBuddyMembers_result (T.TStruct fields) = RemoveBuddyMembers_result{
  removeBuddyMembers_result_e = P.maybe (P.Nothing) (\(_,_val1799) -> P.Just (case _val1799 of {T.TStruct _val1800 -> (to_TalkException (T.TStruct _val1800)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_RemoveBuddyMembers_result _ = P.error "not a struct"
read_RemoveBuddyMembers_result :: T.Protocol p => p -> P.IO RemoveBuddyMembers_result
read_RemoveBuddyMembers_result iprot = to_RemoveBuddyMembers_result <$> T.readVal iprot (T.T_STRUCT typemap_RemoveBuddyMembers_result)
decode_RemoveBuddyMembers_result :: T.StatelessProtocol p => p -> LBS.ByteString -> RemoveBuddyMembers_result
decode_RemoveBuddyMembers_result iprot bs = to_RemoveBuddyMembers_result $ T.deserializeVal iprot (T.T_STRUCT typemap_RemoveBuddyMembers_result) bs
typemap_RemoveBuddyMembers_result :: T.TypeMap
typemap_RemoveBuddyMembers_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_RemoveBuddyMembers_result :: RemoveBuddyMembers_result
default_RemoveBuddyMembers_result = RemoveBuddyMembers_result{
  removeBuddyMembers_result_e = P.Nothing}
data SendBuddyContentMessageToAll_args = SendBuddyContentMessageToAll_args  { sendBuddyContentMessageToAll_args_requestId :: LT.Text
  , sendBuddyContentMessageToAll_args_msg :: Message
  , sendBuddyContentMessageToAll_args_content :: LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToAll_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToAll_args_requestId record   `H.hashWithSalt` sendBuddyContentMessageToAll_args_msg record   `H.hashWithSalt` sendBuddyContentMessageToAll_args_content record  
instance QC.Arbitrary SendBuddyContentMessageToAll_args where 
  arbitrary = M.liftM SendBuddyContentMessageToAll_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToAll_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToAll_args{sendBuddyContentMessageToAll_args_requestId = sendBuddyContentMessageToAll_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAll_args{sendBuddyContentMessageToAll_args_requestId = sendBuddyContentMessageToAll_args_requestId obj}
    , if obj == default_SendBuddyContentMessageToAll_args{sendBuddyContentMessageToAll_args_msg = sendBuddyContentMessageToAll_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAll_args{sendBuddyContentMessageToAll_args_msg = sendBuddyContentMessageToAll_args_msg obj}
    , if obj == default_SendBuddyContentMessageToAll_args{sendBuddyContentMessageToAll_args_content = sendBuddyContentMessageToAll_args_content obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAll_args{sendBuddyContentMessageToAll_args_content = sendBuddyContentMessageToAll_args_content obj}
    ]
from_SendBuddyContentMessageToAll_args :: SendBuddyContentMessageToAll_args -> T.ThriftVal
from_SendBuddyContentMessageToAll_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1803 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1803))) $ sendBuddyContentMessageToAll_args_requestId record
  , (\_v1803 -> P.Just (2, ("msg",from_Message _v1803))) $ sendBuddyContentMessageToAll_args_msg record
  , (\_v1803 -> P.Just (3, ("content",T.TBinary _v1803))) $ sendBuddyContentMessageToAll_args_content record
  ]
write_SendBuddyContentMessageToAll_args :: T.Protocol p => p -> SendBuddyContentMessageToAll_args -> P.IO ()
write_SendBuddyContentMessageToAll_args oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToAll_args record
encode_SendBuddyContentMessageToAll_args :: T.StatelessProtocol p => p -> SendBuddyContentMessageToAll_args -> LBS.ByteString
encode_SendBuddyContentMessageToAll_args oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToAll_args record
to_SendBuddyContentMessageToAll_args :: T.ThriftVal -> SendBuddyContentMessageToAll_args
to_SendBuddyContentMessageToAll_args (T.TStruct fields) = SendBuddyContentMessageToAll_args{
  sendBuddyContentMessageToAll_args_requestId = P.maybe (sendBuddyContentMessageToAll_args_requestId default_SendBuddyContentMessageToAll_args) (\(_,_val1805) -> (case _val1805 of {T.TString _val1806 -> E.decodeUtf8 _val1806; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyContentMessageToAll_args_msg = P.maybe (sendBuddyContentMessageToAll_args_msg default_SendBuddyContentMessageToAll_args) (\(_,_val1805) -> (case _val1805 of {T.TStruct _val1807 -> (to_Message (T.TStruct _val1807)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  sendBuddyContentMessageToAll_args_content = P.maybe (sendBuddyContentMessageToAll_args_content default_SendBuddyContentMessageToAll_args) (\(_,_val1805) -> (case _val1805 of {T.TBinary _val1808 -> _val1808; T.TString _val1808 -> _val1808; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_SendBuddyContentMessageToAll_args _ = P.error "not a struct"
read_SendBuddyContentMessageToAll_args :: T.Protocol p => p -> P.IO SendBuddyContentMessageToAll_args
read_SendBuddyContentMessageToAll_args iprot = to_SendBuddyContentMessageToAll_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAll_args)
decode_SendBuddyContentMessageToAll_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToAll_args
decode_SendBuddyContentMessageToAll_args iprot bs = to_SendBuddyContentMessageToAll_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAll_args) bs
typemap_SendBuddyContentMessageToAll_args :: T.TypeMap
typemap_SendBuddyContentMessageToAll_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("content",T.T_BINARY))]
default_SendBuddyContentMessageToAll_args :: SendBuddyContentMessageToAll_args
default_SendBuddyContentMessageToAll_args = SendBuddyContentMessageToAll_args{
  sendBuddyContentMessageToAll_args_requestId = "",
  sendBuddyContentMessageToAll_args_msg = default_Message,
  sendBuddyContentMessageToAll_args_content = ""}
data SendBuddyContentMessageToAll_result = SendBuddyContentMessageToAll_result  { sendBuddyContentMessageToAll_result_success :: SendBuddyMessageResult
  , sendBuddyContentMessageToAll_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToAll_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToAll_result_success record   `H.hashWithSalt` sendBuddyContentMessageToAll_result_e record  
instance QC.Arbitrary SendBuddyContentMessageToAll_result where 
  arbitrary = M.liftM SendBuddyContentMessageToAll_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToAll_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToAll_result{sendBuddyContentMessageToAll_result_success = sendBuddyContentMessageToAll_result_success obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAll_result{sendBuddyContentMessageToAll_result_success = sendBuddyContentMessageToAll_result_success obj}
    , if obj == default_SendBuddyContentMessageToAll_result{sendBuddyContentMessageToAll_result_e = sendBuddyContentMessageToAll_result_e obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAll_result{sendBuddyContentMessageToAll_result_e = sendBuddyContentMessageToAll_result_e obj}
    ]
from_SendBuddyContentMessageToAll_result :: SendBuddyContentMessageToAll_result -> T.ThriftVal
from_SendBuddyContentMessageToAll_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1811 -> (1, ("e",from_TalkException _v1811))) <$> sendBuddyContentMessageToAll_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1811 -> P.Just (0, ("success",from_SendBuddyMessageResult _v1811))) $ sendBuddyContentMessageToAll_result_success record
    , (\_v1811 -> (1, ("e",from_TalkException _v1811))) <$> sendBuddyContentMessageToAll_result_e record
    ]
    )
write_SendBuddyContentMessageToAll_result :: T.Protocol p => p -> SendBuddyContentMessageToAll_result -> P.IO ()
write_SendBuddyContentMessageToAll_result oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToAll_result record
encode_SendBuddyContentMessageToAll_result :: T.StatelessProtocol p => p -> SendBuddyContentMessageToAll_result -> LBS.ByteString
encode_SendBuddyContentMessageToAll_result oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToAll_result record
to_SendBuddyContentMessageToAll_result :: T.ThriftVal -> SendBuddyContentMessageToAll_result
to_SendBuddyContentMessageToAll_result (T.TStruct fields) = SendBuddyContentMessageToAll_result{
  sendBuddyContentMessageToAll_result_success = P.maybe (sendBuddyContentMessageToAll_result_success default_SendBuddyContentMessageToAll_result) (\(_,_val1813) -> (case _val1813 of {T.TStruct _val1814 -> (to_SendBuddyMessageResult (T.TStruct _val1814)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyContentMessageToAll_result_e = P.maybe (P.Nothing) (\(_,_val1813) -> P.Just (case _val1813 of {T.TStruct _val1815 -> (to_TalkException (T.TStruct _val1815)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyContentMessageToAll_result _ = P.error "not a struct"
read_SendBuddyContentMessageToAll_result :: T.Protocol p => p -> P.IO SendBuddyContentMessageToAll_result
read_SendBuddyContentMessageToAll_result iprot = to_SendBuddyContentMessageToAll_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAll_result)
decode_SendBuddyContentMessageToAll_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToAll_result
decode_SendBuddyContentMessageToAll_result iprot bs = to_SendBuddyContentMessageToAll_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAll_result) bs
typemap_SendBuddyContentMessageToAll_result :: T.TypeMap
typemap_SendBuddyContentMessageToAll_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SendBuddyMessageResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyContentMessageToAll_result :: SendBuddyContentMessageToAll_result
default_SendBuddyContentMessageToAll_result = SendBuddyContentMessageToAll_result{
  sendBuddyContentMessageToAll_result_success = default_SendBuddyMessageResult,
  sendBuddyContentMessageToAll_result_e = P.Nothing}
data SendBuddyContentMessageToAllAsync_args = SendBuddyContentMessageToAllAsync_args  { sendBuddyContentMessageToAllAsync_args_requestId :: LT.Text
  , sendBuddyContentMessageToAllAsync_args_msg :: Message
  , sendBuddyContentMessageToAllAsync_args_content :: LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToAllAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToAllAsync_args_requestId record   `H.hashWithSalt` sendBuddyContentMessageToAllAsync_args_msg record   `H.hashWithSalt` sendBuddyContentMessageToAllAsync_args_content record  
instance QC.Arbitrary SendBuddyContentMessageToAllAsync_args where 
  arbitrary = M.liftM SendBuddyContentMessageToAllAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToAllAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToAllAsync_args{sendBuddyContentMessageToAllAsync_args_requestId = sendBuddyContentMessageToAllAsync_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAllAsync_args{sendBuddyContentMessageToAllAsync_args_requestId = sendBuddyContentMessageToAllAsync_args_requestId obj}
    , if obj == default_SendBuddyContentMessageToAllAsync_args{sendBuddyContentMessageToAllAsync_args_msg = sendBuddyContentMessageToAllAsync_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAllAsync_args{sendBuddyContentMessageToAllAsync_args_msg = sendBuddyContentMessageToAllAsync_args_msg obj}
    , if obj == default_SendBuddyContentMessageToAllAsync_args{sendBuddyContentMessageToAllAsync_args_content = sendBuddyContentMessageToAllAsync_args_content obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAllAsync_args{sendBuddyContentMessageToAllAsync_args_content = sendBuddyContentMessageToAllAsync_args_content obj}
    ]
from_SendBuddyContentMessageToAllAsync_args :: SendBuddyContentMessageToAllAsync_args -> T.ThriftVal
from_SendBuddyContentMessageToAllAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1818 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1818))) $ sendBuddyContentMessageToAllAsync_args_requestId record
  , (\_v1818 -> P.Just (2, ("msg",from_Message _v1818))) $ sendBuddyContentMessageToAllAsync_args_msg record
  , (\_v1818 -> P.Just (3, ("content",T.TBinary _v1818))) $ sendBuddyContentMessageToAllAsync_args_content record
  ]
write_SendBuddyContentMessageToAllAsync_args :: T.Protocol p => p -> SendBuddyContentMessageToAllAsync_args -> P.IO ()
write_SendBuddyContentMessageToAllAsync_args oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToAllAsync_args record
encode_SendBuddyContentMessageToAllAsync_args :: T.StatelessProtocol p => p -> SendBuddyContentMessageToAllAsync_args -> LBS.ByteString
encode_SendBuddyContentMessageToAllAsync_args oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToAllAsync_args record
to_SendBuddyContentMessageToAllAsync_args :: T.ThriftVal -> SendBuddyContentMessageToAllAsync_args
to_SendBuddyContentMessageToAllAsync_args (T.TStruct fields) = SendBuddyContentMessageToAllAsync_args{
  sendBuddyContentMessageToAllAsync_args_requestId = P.maybe (sendBuddyContentMessageToAllAsync_args_requestId default_SendBuddyContentMessageToAllAsync_args) (\(_,_val1820) -> (case _val1820 of {T.TString _val1821 -> E.decodeUtf8 _val1821; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyContentMessageToAllAsync_args_msg = P.maybe (sendBuddyContentMessageToAllAsync_args_msg default_SendBuddyContentMessageToAllAsync_args) (\(_,_val1820) -> (case _val1820 of {T.TStruct _val1822 -> (to_Message (T.TStruct _val1822)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  sendBuddyContentMessageToAllAsync_args_content = P.maybe (sendBuddyContentMessageToAllAsync_args_content default_SendBuddyContentMessageToAllAsync_args) (\(_,_val1820) -> (case _val1820 of {T.TBinary _val1823 -> _val1823; T.TString _val1823 -> _val1823; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_SendBuddyContentMessageToAllAsync_args _ = P.error "not a struct"
read_SendBuddyContentMessageToAllAsync_args :: T.Protocol p => p -> P.IO SendBuddyContentMessageToAllAsync_args
read_SendBuddyContentMessageToAllAsync_args iprot = to_SendBuddyContentMessageToAllAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAllAsync_args)
decode_SendBuddyContentMessageToAllAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToAllAsync_args
decode_SendBuddyContentMessageToAllAsync_args iprot bs = to_SendBuddyContentMessageToAllAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAllAsync_args) bs
typemap_SendBuddyContentMessageToAllAsync_args :: T.TypeMap
typemap_SendBuddyContentMessageToAllAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("content",T.T_BINARY))]
default_SendBuddyContentMessageToAllAsync_args :: SendBuddyContentMessageToAllAsync_args
default_SendBuddyContentMessageToAllAsync_args = SendBuddyContentMessageToAllAsync_args{
  sendBuddyContentMessageToAllAsync_args_requestId = "",
  sendBuddyContentMessageToAllAsync_args_msg = default_Message,
  sendBuddyContentMessageToAllAsync_args_content = ""}
data SendBuddyContentMessageToAllAsync_result = SendBuddyContentMessageToAllAsync_result  { sendBuddyContentMessageToAllAsync_result_success :: LT.Text
  , sendBuddyContentMessageToAllAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToAllAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToAllAsync_result_success record   `H.hashWithSalt` sendBuddyContentMessageToAllAsync_result_e record  
instance QC.Arbitrary SendBuddyContentMessageToAllAsync_result where 
  arbitrary = M.liftM SendBuddyContentMessageToAllAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToAllAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToAllAsync_result{sendBuddyContentMessageToAllAsync_result_success = sendBuddyContentMessageToAllAsync_result_success obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAllAsync_result{sendBuddyContentMessageToAllAsync_result_success = sendBuddyContentMessageToAllAsync_result_success obj}
    , if obj == default_SendBuddyContentMessageToAllAsync_result{sendBuddyContentMessageToAllAsync_result_e = sendBuddyContentMessageToAllAsync_result_e obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToAllAsync_result{sendBuddyContentMessageToAllAsync_result_e = sendBuddyContentMessageToAllAsync_result_e obj}
    ]
from_SendBuddyContentMessageToAllAsync_result :: SendBuddyContentMessageToAllAsync_result -> T.ThriftVal
from_SendBuddyContentMessageToAllAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1826 -> (1, ("e",from_TalkException _v1826))) <$> sendBuddyContentMessageToAllAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1826 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v1826))) $ sendBuddyContentMessageToAllAsync_result_success record
    , (\_v1826 -> (1, ("e",from_TalkException _v1826))) <$> sendBuddyContentMessageToAllAsync_result_e record
    ]
    )
write_SendBuddyContentMessageToAllAsync_result :: T.Protocol p => p -> SendBuddyContentMessageToAllAsync_result -> P.IO ()
write_SendBuddyContentMessageToAllAsync_result oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToAllAsync_result record
encode_SendBuddyContentMessageToAllAsync_result :: T.StatelessProtocol p => p -> SendBuddyContentMessageToAllAsync_result -> LBS.ByteString
encode_SendBuddyContentMessageToAllAsync_result oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToAllAsync_result record
to_SendBuddyContentMessageToAllAsync_result :: T.ThriftVal -> SendBuddyContentMessageToAllAsync_result
to_SendBuddyContentMessageToAllAsync_result (T.TStruct fields) = SendBuddyContentMessageToAllAsync_result{
  sendBuddyContentMessageToAllAsync_result_success = P.maybe (sendBuddyContentMessageToAllAsync_result_success default_SendBuddyContentMessageToAllAsync_result) (\(_,_val1828) -> (case _val1828 of {T.TString _val1829 -> E.decodeUtf8 _val1829; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyContentMessageToAllAsync_result_e = P.maybe (P.Nothing) (\(_,_val1828) -> P.Just (case _val1828 of {T.TStruct _val1830 -> (to_TalkException (T.TStruct _val1830)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyContentMessageToAllAsync_result _ = P.error "not a struct"
read_SendBuddyContentMessageToAllAsync_result :: T.Protocol p => p -> P.IO SendBuddyContentMessageToAllAsync_result
read_SendBuddyContentMessageToAllAsync_result iprot = to_SendBuddyContentMessageToAllAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAllAsync_result)
decode_SendBuddyContentMessageToAllAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToAllAsync_result
decode_SendBuddyContentMessageToAllAsync_result iprot bs = to_SendBuddyContentMessageToAllAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToAllAsync_result) bs
typemap_SendBuddyContentMessageToAllAsync_result :: T.TypeMap
typemap_SendBuddyContentMessageToAllAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyContentMessageToAllAsync_result :: SendBuddyContentMessageToAllAsync_result
default_SendBuddyContentMessageToAllAsync_result = SendBuddyContentMessageToAllAsync_result{
  sendBuddyContentMessageToAllAsync_result_success = "",
  sendBuddyContentMessageToAllAsync_result_e = P.Nothing}
data SendBuddyContentMessageToMids_args = SendBuddyContentMessageToMids_args  { sendBuddyContentMessageToMids_args_requestId :: LT.Text
  , sendBuddyContentMessageToMids_args_msg :: Message
  , sendBuddyContentMessageToMids_args_content :: LBS.ByteString
  , sendBuddyContentMessageToMids_args_mids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToMids_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToMids_args_requestId record   `H.hashWithSalt` sendBuddyContentMessageToMids_args_msg record   `H.hashWithSalt` sendBuddyContentMessageToMids_args_content record   `H.hashWithSalt` sendBuddyContentMessageToMids_args_mids record  
instance QC.Arbitrary SendBuddyContentMessageToMids_args where 
  arbitrary = M.liftM SendBuddyContentMessageToMids_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToMids_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_requestId = sendBuddyContentMessageToMids_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_requestId = sendBuddyContentMessageToMids_args_requestId obj}
    , if obj == default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_msg = sendBuddyContentMessageToMids_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_msg = sendBuddyContentMessageToMids_args_msg obj}
    , if obj == default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_content = sendBuddyContentMessageToMids_args_content obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_content = sendBuddyContentMessageToMids_args_content obj}
    , if obj == default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_mids = sendBuddyContentMessageToMids_args_mids obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMids_args{sendBuddyContentMessageToMids_args_mids = sendBuddyContentMessageToMids_args_mids obj}
    ]
from_SendBuddyContentMessageToMids_args :: SendBuddyContentMessageToMids_args -> T.ThriftVal
from_SendBuddyContentMessageToMids_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1833 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1833))) $ sendBuddyContentMessageToMids_args_requestId record
  , (\_v1833 -> P.Just (2, ("msg",from_Message _v1833))) $ sendBuddyContentMessageToMids_args_msg record
  , (\_v1833 -> P.Just (3, ("content",T.TBinary _v1833))) $ sendBuddyContentMessageToMids_args_content record
  , (\_v1833 -> P.Just (4, ("mids",T.TList T.T_STRING $ P.map (\_v1835 -> T.TString $ E.encodeUtf8 _v1835) $ Vector.toList _v1833))) $ sendBuddyContentMessageToMids_args_mids record
  ]
write_SendBuddyContentMessageToMids_args :: T.Protocol p => p -> SendBuddyContentMessageToMids_args -> P.IO ()
write_SendBuddyContentMessageToMids_args oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToMids_args record
encode_SendBuddyContentMessageToMids_args :: T.StatelessProtocol p => p -> SendBuddyContentMessageToMids_args -> LBS.ByteString
encode_SendBuddyContentMessageToMids_args oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToMids_args record
to_SendBuddyContentMessageToMids_args :: T.ThriftVal -> SendBuddyContentMessageToMids_args
to_SendBuddyContentMessageToMids_args (T.TStruct fields) = SendBuddyContentMessageToMids_args{
  sendBuddyContentMessageToMids_args_requestId = P.maybe (sendBuddyContentMessageToMids_args_requestId default_SendBuddyContentMessageToMids_args) (\(_,_val1837) -> (case _val1837 of {T.TString _val1838 -> E.decodeUtf8 _val1838; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyContentMessageToMids_args_msg = P.maybe (sendBuddyContentMessageToMids_args_msg default_SendBuddyContentMessageToMids_args) (\(_,_val1837) -> (case _val1837 of {T.TStruct _val1839 -> (to_Message (T.TStruct _val1839)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  sendBuddyContentMessageToMids_args_content = P.maybe (sendBuddyContentMessageToMids_args_content default_SendBuddyContentMessageToMids_args) (\(_,_val1837) -> (case _val1837 of {T.TBinary _val1840 -> _val1840; T.TString _val1840 -> _val1840; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  sendBuddyContentMessageToMids_args_mids = P.maybe (sendBuddyContentMessageToMids_args_mids default_SendBuddyContentMessageToMids_args) (\(_,_val1837) -> (case _val1837 of {T.TList _ _val1841 -> (Vector.fromList $ P.map (\_v1842 -> (case _v1842 of {T.TString _val1843 -> E.decodeUtf8 _val1843; _ -> P.error "wrong type"})) _val1841); _ -> P.error "wrong type"})) (Map.lookup (4) fields)
  }
to_SendBuddyContentMessageToMids_args _ = P.error "not a struct"
read_SendBuddyContentMessageToMids_args :: T.Protocol p => p -> P.IO SendBuddyContentMessageToMids_args
read_SendBuddyContentMessageToMids_args iprot = to_SendBuddyContentMessageToMids_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMids_args)
decode_SendBuddyContentMessageToMids_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToMids_args
decode_SendBuddyContentMessageToMids_args iprot bs = to_SendBuddyContentMessageToMids_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMids_args) bs
typemap_SendBuddyContentMessageToMids_args :: T.TypeMap
typemap_SendBuddyContentMessageToMids_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("content",T.T_BINARY)),(4,("mids",(T.T_LIST T.T_STRING)))]
default_SendBuddyContentMessageToMids_args :: SendBuddyContentMessageToMids_args
default_SendBuddyContentMessageToMids_args = SendBuddyContentMessageToMids_args{
  sendBuddyContentMessageToMids_args_requestId = "",
  sendBuddyContentMessageToMids_args_msg = default_Message,
  sendBuddyContentMessageToMids_args_content = "",
  sendBuddyContentMessageToMids_args_mids = Vector.empty}
data SendBuddyContentMessageToMids_result = SendBuddyContentMessageToMids_result  { sendBuddyContentMessageToMids_result_success :: SendBuddyMessageResult
  , sendBuddyContentMessageToMids_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToMids_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToMids_result_success record   `H.hashWithSalt` sendBuddyContentMessageToMids_result_e record  
instance QC.Arbitrary SendBuddyContentMessageToMids_result where 
  arbitrary = M.liftM SendBuddyContentMessageToMids_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToMids_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToMids_result{sendBuddyContentMessageToMids_result_success = sendBuddyContentMessageToMids_result_success obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMids_result{sendBuddyContentMessageToMids_result_success = sendBuddyContentMessageToMids_result_success obj}
    , if obj == default_SendBuddyContentMessageToMids_result{sendBuddyContentMessageToMids_result_e = sendBuddyContentMessageToMids_result_e obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMids_result{sendBuddyContentMessageToMids_result_e = sendBuddyContentMessageToMids_result_e obj}
    ]
from_SendBuddyContentMessageToMids_result :: SendBuddyContentMessageToMids_result -> T.ThriftVal
from_SendBuddyContentMessageToMids_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1846 -> (1, ("e",from_TalkException _v1846))) <$> sendBuddyContentMessageToMids_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1846 -> P.Just (0, ("success",from_SendBuddyMessageResult _v1846))) $ sendBuddyContentMessageToMids_result_success record
    , (\_v1846 -> (1, ("e",from_TalkException _v1846))) <$> sendBuddyContentMessageToMids_result_e record
    ]
    )
write_SendBuddyContentMessageToMids_result :: T.Protocol p => p -> SendBuddyContentMessageToMids_result -> P.IO ()
write_SendBuddyContentMessageToMids_result oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToMids_result record
encode_SendBuddyContentMessageToMids_result :: T.StatelessProtocol p => p -> SendBuddyContentMessageToMids_result -> LBS.ByteString
encode_SendBuddyContentMessageToMids_result oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToMids_result record
to_SendBuddyContentMessageToMids_result :: T.ThriftVal -> SendBuddyContentMessageToMids_result
to_SendBuddyContentMessageToMids_result (T.TStruct fields) = SendBuddyContentMessageToMids_result{
  sendBuddyContentMessageToMids_result_success = P.maybe (sendBuddyContentMessageToMids_result_success default_SendBuddyContentMessageToMids_result) (\(_,_val1848) -> (case _val1848 of {T.TStruct _val1849 -> (to_SendBuddyMessageResult (T.TStruct _val1849)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyContentMessageToMids_result_e = P.maybe (P.Nothing) (\(_,_val1848) -> P.Just (case _val1848 of {T.TStruct _val1850 -> (to_TalkException (T.TStruct _val1850)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyContentMessageToMids_result _ = P.error "not a struct"
read_SendBuddyContentMessageToMids_result :: T.Protocol p => p -> P.IO SendBuddyContentMessageToMids_result
read_SendBuddyContentMessageToMids_result iprot = to_SendBuddyContentMessageToMids_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMids_result)
decode_SendBuddyContentMessageToMids_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToMids_result
decode_SendBuddyContentMessageToMids_result iprot bs = to_SendBuddyContentMessageToMids_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMids_result) bs
typemap_SendBuddyContentMessageToMids_result :: T.TypeMap
typemap_SendBuddyContentMessageToMids_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SendBuddyMessageResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyContentMessageToMids_result :: SendBuddyContentMessageToMids_result
default_SendBuddyContentMessageToMids_result = SendBuddyContentMessageToMids_result{
  sendBuddyContentMessageToMids_result_success = default_SendBuddyMessageResult,
  sendBuddyContentMessageToMids_result_e = P.Nothing}
data SendBuddyContentMessageToMidsAsync_args = SendBuddyContentMessageToMidsAsync_args  { sendBuddyContentMessageToMidsAsync_args_requestId :: LT.Text
  , sendBuddyContentMessageToMidsAsync_args_msg :: Message
  , sendBuddyContentMessageToMidsAsync_args_content :: LBS.ByteString
  , sendBuddyContentMessageToMidsAsync_args_mids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToMidsAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToMidsAsync_args_requestId record   `H.hashWithSalt` sendBuddyContentMessageToMidsAsync_args_msg record   `H.hashWithSalt` sendBuddyContentMessageToMidsAsync_args_content record   `H.hashWithSalt` sendBuddyContentMessageToMidsAsync_args_mids record  
instance QC.Arbitrary SendBuddyContentMessageToMidsAsync_args where 
  arbitrary = M.liftM SendBuddyContentMessageToMidsAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToMidsAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_requestId = sendBuddyContentMessageToMidsAsync_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_requestId = sendBuddyContentMessageToMidsAsync_args_requestId obj}
    , if obj == default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_msg = sendBuddyContentMessageToMidsAsync_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_msg = sendBuddyContentMessageToMidsAsync_args_msg obj}
    , if obj == default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_content = sendBuddyContentMessageToMidsAsync_args_content obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_content = sendBuddyContentMessageToMidsAsync_args_content obj}
    , if obj == default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_mids = sendBuddyContentMessageToMidsAsync_args_mids obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMidsAsync_args{sendBuddyContentMessageToMidsAsync_args_mids = sendBuddyContentMessageToMidsAsync_args_mids obj}
    ]
from_SendBuddyContentMessageToMidsAsync_args :: SendBuddyContentMessageToMidsAsync_args -> T.ThriftVal
from_SendBuddyContentMessageToMidsAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1853 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1853))) $ sendBuddyContentMessageToMidsAsync_args_requestId record
  , (\_v1853 -> P.Just (2, ("msg",from_Message _v1853))) $ sendBuddyContentMessageToMidsAsync_args_msg record
  , (\_v1853 -> P.Just (3, ("content",T.TBinary _v1853))) $ sendBuddyContentMessageToMidsAsync_args_content record
  , (\_v1853 -> P.Just (4, ("mids",T.TList T.T_STRING $ P.map (\_v1855 -> T.TString $ E.encodeUtf8 _v1855) $ Vector.toList _v1853))) $ sendBuddyContentMessageToMidsAsync_args_mids record
  ]
write_SendBuddyContentMessageToMidsAsync_args :: T.Protocol p => p -> SendBuddyContentMessageToMidsAsync_args -> P.IO ()
write_SendBuddyContentMessageToMidsAsync_args oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToMidsAsync_args record
encode_SendBuddyContentMessageToMidsAsync_args :: T.StatelessProtocol p => p -> SendBuddyContentMessageToMidsAsync_args -> LBS.ByteString
encode_SendBuddyContentMessageToMidsAsync_args oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToMidsAsync_args record
to_SendBuddyContentMessageToMidsAsync_args :: T.ThriftVal -> SendBuddyContentMessageToMidsAsync_args
to_SendBuddyContentMessageToMidsAsync_args (T.TStruct fields) = SendBuddyContentMessageToMidsAsync_args{
  sendBuddyContentMessageToMidsAsync_args_requestId = P.maybe (sendBuddyContentMessageToMidsAsync_args_requestId default_SendBuddyContentMessageToMidsAsync_args) (\(_,_val1857) -> (case _val1857 of {T.TString _val1858 -> E.decodeUtf8 _val1858; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyContentMessageToMidsAsync_args_msg = P.maybe (sendBuddyContentMessageToMidsAsync_args_msg default_SendBuddyContentMessageToMidsAsync_args) (\(_,_val1857) -> (case _val1857 of {T.TStruct _val1859 -> (to_Message (T.TStruct _val1859)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  sendBuddyContentMessageToMidsAsync_args_content = P.maybe (sendBuddyContentMessageToMidsAsync_args_content default_SendBuddyContentMessageToMidsAsync_args) (\(_,_val1857) -> (case _val1857 of {T.TBinary _val1860 -> _val1860; T.TString _val1860 -> _val1860; _ -> P.error "wrong type"})) (Map.lookup (3) fields),
  sendBuddyContentMessageToMidsAsync_args_mids = P.maybe (sendBuddyContentMessageToMidsAsync_args_mids default_SendBuddyContentMessageToMidsAsync_args) (\(_,_val1857) -> (case _val1857 of {T.TList _ _val1861 -> (Vector.fromList $ P.map (\_v1862 -> (case _v1862 of {T.TString _val1863 -> E.decodeUtf8 _val1863; _ -> P.error "wrong type"})) _val1861); _ -> P.error "wrong type"})) (Map.lookup (4) fields)
  }
to_SendBuddyContentMessageToMidsAsync_args _ = P.error "not a struct"
read_SendBuddyContentMessageToMidsAsync_args :: T.Protocol p => p -> P.IO SendBuddyContentMessageToMidsAsync_args
read_SendBuddyContentMessageToMidsAsync_args iprot = to_SendBuddyContentMessageToMidsAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMidsAsync_args)
decode_SendBuddyContentMessageToMidsAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToMidsAsync_args
decode_SendBuddyContentMessageToMidsAsync_args iprot bs = to_SendBuddyContentMessageToMidsAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMidsAsync_args) bs
typemap_SendBuddyContentMessageToMidsAsync_args :: T.TypeMap
typemap_SendBuddyContentMessageToMidsAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("content",T.T_BINARY)),(4,("mids",(T.T_LIST T.T_STRING)))]
default_SendBuddyContentMessageToMidsAsync_args :: SendBuddyContentMessageToMidsAsync_args
default_SendBuddyContentMessageToMidsAsync_args = SendBuddyContentMessageToMidsAsync_args{
  sendBuddyContentMessageToMidsAsync_args_requestId = "",
  sendBuddyContentMessageToMidsAsync_args_msg = default_Message,
  sendBuddyContentMessageToMidsAsync_args_content = "",
  sendBuddyContentMessageToMidsAsync_args_mids = Vector.empty}
data SendBuddyContentMessageToMidsAsync_result = SendBuddyContentMessageToMidsAsync_result  { sendBuddyContentMessageToMidsAsync_result_success :: LT.Text
  , sendBuddyContentMessageToMidsAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyContentMessageToMidsAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyContentMessageToMidsAsync_result_success record   `H.hashWithSalt` sendBuddyContentMessageToMidsAsync_result_e record  
instance QC.Arbitrary SendBuddyContentMessageToMidsAsync_result where 
  arbitrary = M.liftM SendBuddyContentMessageToMidsAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyContentMessageToMidsAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyContentMessageToMidsAsync_result{sendBuddyContentMessageToMidsAsync_result_success = sendBuddyContentMessageToMidsAsync_result_success obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMidsAsync_result{sendBuddyContentMessageToMidsAsync_result_success = sendBuddyContentMessageToMidsAsync_result_success obj}
    , if obj == default_SendBuddyContentMessageToMidsAsync_result{sendBuddyContentMessageToMidsAsync_result_e = sendBuddyContentMessageToMidsAsync_result_e obj} then P.Nothing else P.Just $ default_SendBuddyContentMessageToMidsAsync_result{sendBuddyContentMessageToMidsAsync_result_e = sendBuddyContentMessageToMidsAsync_result_e obj}
    ]
from_SendBuddyContentMessageToMidsAsync_result :: SendBuddyContentMessageToMidsAsync_result -> T.ThriftVal
from_SendBuddyContentMessageToMidsAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1866 -> (1, ("e",from_TalkException _v1866))) <$> sendBuddyContentMessageToMidsAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1866 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v1866))) $ sendBuddyContentMessageToMidsAsync_result_success record
    , (\_v1866 -> (1, ("e",from_TalkException _v1866))) <$> sendBuddyContentMessageToMidsAsync_result_e record
    ]
    )
write_SendBuddyContentMessageToMidsAsync_result :: T.Protocol p => p -> SendBuddyContentMessageToMidsAsync_result -> P.IO ()
write_SendBuddyContentMessageToMidsAsync_result oprot record = T.writeVal oprot $ from_SendBuddyContentMessageToMidsAsync_result record
encode_SendBuddyContentMessageToMidsAsync_result :: T.StatelessProtocol p => p -> SendBuddyContentMessageToMidsAsync_result -> LBS.ByteString
encode_SendBuddyContentMessageToMidsAsync_result oprot record = T.serializeVal oprot $ from_SendBuddyContentMessageToMidsAsync_result record
to_SendBuddyContentMessageToMidsAsync_result :: T.ThriftVal -> SendBuddyContentMessageToMidsAsync_result
to_SendBuddyContentMessageToMidsAsync_result (T.TStruct fields) = SendBuddyContentMessageToMidsAsync_result{
  sendBuddyContentMessageToMidsAsync_result_success = P.maybe (sendBuddyContentMessageToMidsAsync_result_success default_SendBuddyContentMessageToMidsAsync_result) (\(_,_val1868) -> (case _val1868 of {T.TString _val1869 -> E.decodeUtf8 _val1869; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyContentMessageToMidsAsync_result_e = P.maybe (P.Nothing) (\(_,_val1868) -> P.Just (case _val1868 of {T.TStruct _val1870 -> (to_TalkException (T.TStruct _val1870)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyContentMessageToMidsAsync_result _ = P.error "not a struct"
read_SendBuddyContentMessageToMidsAsync_result :: T.Protocol p => p -> P.IO SendBuddyContentMessageToMidsAsync_result
read_SendBuddyContentMessageToMidsAsync_result iprot = to_SendBuddyContentMessageToMidsAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMidsAsync_result)
decode_SendBuddyContentMessageToMidsAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyContentMessageToMidsAsync_result
decode_SendBuddyContentMessageToMidsAsync_result iprot bs = to_SendBuddyContentMessageToMidsAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyContentMessageToMidsAsync_result) bs
typemap_SendBuddyContentMessageToMidsAsync_result :: T.TypeMap
typemap_SendBuddyContentMessageToMidsAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyContentMessageToMidsAsync_result :: SendBuddyContentMessageToMidsAsync_result
default_SendBuddyContentMessageToMidsAsync_result = SendBuddyContentMessageToMidsAsync_result{
  sendBuddyContentMessageToMidsAsync_result_success = "",
  sendBuddyContentMessageToMidsAsync_result_e = P.Nothing}
data SendBuddyMessageToAll_args = SendBuddyMessageToAll_args  { sendBuddyMessageToAll_args_requestId :: LT.Text
  , sendBuddyMessageToAll_args_msg :: Message
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToAll_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToAll_args_requestId record   `H.hashWithSalt` sendBuddyMessageToAll_args_msg record  
instance QC.Arbitrary SendBuddyMessageToAll_args where 
  arbitrary = M.liftM SendBuddyMessageToAll_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToAll_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToAll_args{sendBuddyMessageToAll_args_requestId = sendBuddyMessageToAll_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAll_args{sendBuddyMessageToAll_args_requestId = sendBuddyMessageToAll_args_requestId obj}
    , if obj == default_SendBuddyMessageToAll_args{sendBuddyMessageToAll_args_msg = sendBuddyMessageToAll_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAll_args{sendBuddyMessageToAll_args_msg = sendBuddyMessageToAll_args_msg obj}
    ]
from_SendBuddyMessageToAll_args :: SendBuddyMessageToAll_args -> T.ThriftVal
from_SendBuddyMessageToAll_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1873 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1873))) $ sendBuddyMessageToAll_args_requestId record
  , (\_v1873 -> P.Just (2, ("msg",from_Message _v1873))) $ sendBuddyMessageToAll_args_msg record
  ]
write_SendBuddyMessageToAll_args :: T.Protocol p => p -> SendBuddyMessageToAll_args -> P.IO ()
write_SendBuddyMessageToAll_args oprot record = T.writeVal oprot $ from_SendBuddyMessageToAll_args record
encode_SendBuddyMessageToAll_args :: T.StatelessProtocol p => p -> SendBuddyMessageToAll_args -> LBS.ByteString
encode_SendBuddyMessageToAll_args oprot record = T.serializeVal oprot $ from_SendBuddyMessageToAll_args record
to_SendBuddyMessageToAll_args :: T.ThriftVal -> SendBuddyMessageToAll_args
to_SendBuddyMessageToAll_args (T.TStruct fields) = SendBuddyMessageToAll_args{
  sendBuddyMessageToAll_args_requestId = P.maybe (sendBuddyMessageToAll_args_requestId default_SendBuddyMessageToAll_args) (\(_,_val1875) -> (case _val1875 of {T.TString _val1876 -> E.decodeUtf8 _val1876; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyMessageToAll_args_msg = P.maybe (sendBuddyMessageToAll_args_msg default_SendBuddyMessageToAll_args) (\(_,_val1875) -> (case _val1875 of {T.TStruct _val1877 -> (to_Message (T.TStruct _val1877)); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_SendBuddyMessageToAll_args _ = P.error "not a struct"
read_SendBuddyMessageToAll_args :: T.Protocol p => p -> P.IO SendBuddyMessageToAll_args
read_SendBuddyMessageToAll_args iprot = to_SendBuddyMessageToAll_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAll_args)
decode_SendBuddyMessageToAll_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToAll_args
decode_SendBuddyMessageToAll_args iprot bs = to_SendBuddyMessageToAll_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAll_args) bs
typemap_SendBuddyMessageToAll_args :: T.TypeMap
typemap_SendBuddyMessageToAll_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message)))]
default_SendBuddyMessageToAll_args :: SendBuddyMessageToAll_args
default_SendBuddyMessageToAll_args = SendBuddyMessageToAll_args{
  sendBuddyMessageToAll_args_requestId = "",
  sendBuddyMessageToAll_args_msg = default_Message}
data SendBuddyMessageToAll_result = SendBuddyMessageToAll_result  { sendBuddyMessageToAll_result_success :: SendBuddyMessageResult
  , sendBuddyMessageToAll_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToAll_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToAll_result_success record   `H.hashWithSalt` sendBuddyMessageToAll_result_e record  
instance QC.Arbitrary SendBuddyMessageToAll_result where 
  arbitrary = M.liftM SendBuddyMessageToAll_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToAll_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToAll_result{sendBuddyMessageToAll_result_success = sendBuddyMessageToAll_result_success obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAll_result{sendBuddyMessageToAll_result_success = sendBuddyMessageToAll_result_success obj}
    , if obj == default_SendBuddyMessageToAll_result{sendBuddyMessageToAll_result_e = sendBuddyMessageToAll_result_e obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAll_result{sendBuddyMessageToAll_result_e = sendBuddyMessageToAll_result_e obj}
    ]
from_SendBuddyMessageToAll_result :: SendBuddyMessageToAll_result -> T.ThriftVal
from_SendBuddyMessageToAll_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1880 -> (1, ("e",from_TalkException _v1880))) <$> sendBuddyMessageToAll_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1880 -> P.Just (0, ("success",from_SendBuddyMessageResult _v1880))) $ sendBuddyMessageToAll_result_success record
    , (\_v1880 -> (1, ("e",from_TalkException _v1880))) <$> sendBuddyMessageToAll_result_e record
    ]
    )
write_SendBuddyMessageToAll_result :: T.Protocol p => p -> SendBuddyMessageToAll_result -> P.IO ()
write_SendBuddyMessageToAll_result oprot record = T.writeVal oprot $ from_SendBuddyMessageToAll_result record
encode_SendBuddyMessageToAll_result :: T.StatelessProtocol p => p -> SendBuddyMessageToAll_result -> LBS.ByteString
encode_SendBuddyMessageToAll_result oprot record = T.serializeVal oprot $ from_SendBuddyMessageToAll_result record
to_SendBuddyMessageToAll_result :: T.ThriftVal -> SendBuddyMessageToAll_result
to_SendBuddyMessageToAll_result (T.TStruct fields) = SendBuddyMessageToAll_result{
  sendBuddyMessageToAll_result_success = P.maybe (sendBuddyMessageToAll_result_success default_SendBuddyMessageToAll_result) (\(_,_val1882) -> (case _val1882 of {T.TStruct _val1883 -> (to_SendBuddyMessageResult (T.TStruct _val1883)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyMessageToAll_result_e = P.maybe (P.Nothing) (\(_,_val1882) -> P.Just (case _val1882 of {T.TStruct _val1884 -> (to_TalkException (T.TStruct _val1884)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyMessageToAll_result _ = P.error "not a struct"
read_SendBuddyMessageToAll_result :: T.Protocol p => p -> P.IO SendBuddyMessageToAll_result
read_SendBuddyMessageToAll_result iprot = to_SendBuddyMessageToAll_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAll_result)
decode_SendBuddyMessageToAll_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToAll_result
decode_SendBuddyMessageToAll_result iprot bs = to_SendBuddyMessageToAll_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAll_result) bs
typemap_SendBuddyMessageToAll_result :: T.TypeMap
typemap_SendBuddyMessageToAll_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SendBuddyMessageResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyMessageToAll_result :: SendBuddyMessageToAll_result
default_SendBuddyMessageToAll_result = SendBuddyMessageToAll_result{
  sendBuddyMessageToAll_result_success = default_SendBuddyMessageResult,
  sendBuddyMessageToAll_result_e = P.Nothing}
data SendBuddyMessageToAllAsync_args = SendBuddyMessageToAllAsync_args  { sendBuddyMessageToAllAsync_args_requestId :: LT.Text
  , sendBuddyMessageToAllAsync_args_msg :: Message
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToAllAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToAllAsync_args_requestId record   `H.hashWithSalt` sendBuddyMessageToAllAsync_args_msg record  
instance QC.Arbitrary SendBuddyMessageToAllAsync_args where 
  arbitrary = M.liftM SendBuddyMessageToAllAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToAllAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToAllAsync_args{sendBuddyMessageToAllAsync_args_requestId = sendBuddyMessageToAllAsync_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAllAsync_args{sendBuddyMessageToAllAsync_args_requestId = sendBuddyMessageToAllAsync_args_requestId obj}
    , if obj == default_SendBuddyMessageToAllAsync_args{sendBuddyMessageToAllAsync_args_msg = sendBuddyMessageToAllAsync_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAllAsync_args{sendBuddyMessageToAllAsync_args_msg = sendBuddyMessageToAllAsync_args_msg obj}
    ]
from_SendBuddyMessageToAllAsync_args :: SendBuddyMessageToAllAsync_args -> T.ThriftVal
from_SendBuddyMessageToAllAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1887 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1887))) $ sendBuddyMessageToAllAsync_args_requestId record
  , (\_v1887 -> P.Just (2, ("msg",from_Message _v1887))) $ sendBuddyMessageToAllAsync_args_msg record
  ]
write_SendBuddyMessageToAllAsync_args :: T.Protocol p => p -> SendBuddyMessageToAllAsync_args -> P.IO ()
write_SendBuddyMessageToAllAsync_args oprot record = T.writeVal oprot $ from_SendBuddyMessageToAllAsync_args record
encode_SendBuddyMessageToAllAsync_args :: T.StatelessProtocol p => p -> SendBuddyMessageToAllAsync_args -> LBS.ByteString
encode_SendBuddyMessageToAllAsync_args oprot record = T.serializeVal oprot $ from_SendBuddyMessageToAllAsync_args record
to_SendBuddyMessageToAllAsync_args :: T.ThriftVal -> SendBuddyMessageToAllAsync_args
to_SendBuddyMessageToAllAsync_args (T.TStruct fields) = SendBuddyMessageToAllAsync_args{
  sendBuddyMessageToAllAsync_args_requestId = P.maybe (sendBuddyMessageToAllAsync_args_requestId default_SendBuddyMessageToAllAsync_args) (\(_,_val1889) -> (case _val1889 of {T.TString _val1890 -> E.decodeUtf8 _val1890; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyMessageToAllAsync_args_msg = P.maybe (sendBuddyMessageToAllAsync_args_msg default_SendBuddyMessageToAllAsync_args) (\(_,_val1889) -> (case _val1889 of {T.TStruct _val1891 -> (to_Message (T.TStruct _val1891)); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_SendBuddyMessageToAllAsync_args _ = P.error "not a struct"
read_SendBuddyMessageToAllAsync_args :: T.Protocol p => p -> P.IO SendBuddyMessageToAllAsync_args
read_SendBuddyMessageToAllAsync_args iprot = to_SendBuddyMessageToAllAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAllAsync_args)
decode_SendBuddyMessageToAllAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToAllAsync_args
decode_SendBuddyMessageToAllAsync_args iprot bs = to_SendBuddyMessageToAllAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAllAsync_args) bs
typemap_SendBuddyMessageToAllAsync_args :: T.TypeMap
typemap_SendBuddyMessageToAllAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message)))]
default_SendBuddyMessageToAllAsync_args :: SendBuddyMessageToAllAsync_args
default_SendBuddyMessageToAllAsync_args = SendBuddyMessageToAllAsync_args{
  sendBuddyMessageToAllAsync_args_requestId = "",
  sendBuddyMessageToAllAsync_args_msg = default_Message}
data SendBuddyMessageToAllAsync_result = SendBuddyMessageToAllAsync_result  { sendBuddyMessageToAllAsync_result_success :: LT.Text
  , sendBuddyMessageToAllAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToAllAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToAllAsync_result_success record   `H.hashWithSalt` sendBuddyMessageToAllAsync_result_e record  
instance QC.Arbitrary SendBuddyMessageToAllAsync_result where 
  arbitrary = M.liftM SendBuddyMessageToAllAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToAllAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToAllAsync_result{sendBuddyMessageToAllAsync_result_success = sendBuddyMessageToAllAsync_result_success obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAllAsync_result{sendBuddyMessageToAllAsync_result_success = sendBuddyMessageToAllAsync_result_success obj}
    , if obj == default_SendBuddyMessageToAllAsync_result{sendBuddyMessageToAllAsync_result_e = sendBuddyMessageToAllAsync_result_e obj} then P.Nothing else P.Just $ default_SendBuddyMessageToAllAsync_result{sendBuddyMessageToAllAsync_result_e = sendBuddyMessageToAllAsync_result_e obj}
    ]
from_SendBuddyMessageToAllAsync_result :: SendBuddyMessageToAllAsync_result -> T.ThriftVal
from_SendBuddyMessageToAllAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1894 -> (1, ("e",from_TalkException _v1894))) <$> sendBuddyMessageToAllAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1894 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v1894))) $ sendBuddyMessageToAllAsync_result_success record
    , (\_v1894 -> (1, ("e",from_TalkException _v1894))) <$> sendBuddyMessageToAllAsync_result_e record
    ]
    )
write_SendBuddyMessageToAllAsync_result :: T.Protocol p => p -> SendBuddyMessageToAllAsync_result -> P.IO ()
write_SendBuddyMessageToAllAsync_result oprot record = T.writeVal oprot $ from_SendBuddyMessageToAllAsync_result record
encode_SendBuddyMessageToAllAsync_result :: T.StatelessProtocol p => p -> SendBuddyMessageToAllAsync_result -> LBS.ByteString
encode_SendBuddyMessageToAllAsync_result oprot record = T.serializeVal oprot $ from_SendBuddyMessageToAllAsync_result record
to_SendBuddyMessageToAllAsync_result :: T.ThriftVal -> SendBuddyMessageToAllAsync_result
to_SendBuddyMessageToAllAsync_result (T.TStruct fields) = SendBuddyMessageToAllAsync_result{
  sendBuddyMessageToAllAsync_result_success = P.maybe (sendBuddyMessageToAllAsync_result_success default_SendBuddyMessageToAllAsync_result) (\(_,_val1896) -> (case _val1896 of {T.TString _val1897 -> E.decodeUtf8 _val1897; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyMessageToAllAsync_result_e = P.maybe (P.Nothing) (\(_,_val1896) -> P.Just (case _val1896 of {T.TStruct _val1898 -> (to_TalkException (T.TStruct _val1898)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyMessageToAllAsync_result _ = P.error "not a struct"
read_SendBuddyMessageToAllAsync_result :: T.Protocol p => p -> P.IO SendBuddyMessageToAllAsync_result
read_SendBuddyMessageToAllAsync_result iprot = to_SendBuddyMessageToAllAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAllAsync_result)
decode_SendBuddyMessageToAllAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToAllAsync_result
decode_SendBuddyMessageToAllAsync_result iprot bs = to_SendBuddyMessageToAllAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToAllAsync_result) bs
typemap_SendBuddyMessageToAllAsync_result :: T.TypeMap
typemap_SendBuddyMessageToAllAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyMessageToAllAsync_result :: SendBuddyMessageToAllAsync_result
default_SendBuddyMessageToAllAsync_result = SendBuddyMessageToAllAsync_result{
  sendBuddyMessageToAllAsync_result_success = "",
  sendBuddyMessageToAllAsync_result_e = P.Nothing}
data SendBuddyMessageToMids_args = SendBuddyMessageToMids_args  { sendBuddyMessageToMids_args_requestId :: LT.Text
  , sendBuddyMessageToMids_args_msg :: Message
  , sendBuddyMessageToMids_args_mids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToMids_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToMids_args_requestId record   `H.hashWithSalt` sendBuddyMessageToMids_args_msg record   `H.hashWithSalt` sendBuddyMessageToMids_args_mids record  
instance QC.Arbitrary SendBuddyMessageToMids_args where 
  arbitrary = M.liftM SendBuddyMessageToMids_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToMids_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToMids_args{sendBuddyMessageToMids_args_requestId = sendBuddyMessageToMids_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMids_args{sendBuddyMessageToMids_args_requestId = sendBuddyMessageToMids_args_requestId obj}
    , if obj == default_SendBuddyMessageToMids_args{sendBuddyMessageToMids_args_msg = sendBuddyMessageToMids_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMids_args{sendBuddyMessageToMids_args_msg = sendBuddyMessageToMids_args_msg obj}
    , if obj == default_SendBuddyMessageToMids_args{sendBuddyMessageToMids_args_mids = sendBuddyMessageToMids_args_mids obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMids_args{sendBuddyMessageToMids_args_mids = sendBuddyMessageToMids_args_mids obj}
    ]
from_SendBuddyMessageToMids_args :: SendBuddyMessageToMids_args -> T.ThriftVal
from_SendBuddyMessageToMids_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1901 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1901))) $ sendBuddyMessageToMids_args_requestId record
  , (\_v1901 -> P.Just (2, ("msg",from_Message _v1901))) $ sendBuddyMessageToMids_args_msg record
  , (\_v1901 -> P.Just (3, ("mids",T.TList T.T_STRING $ P.map (\_v1903 -> T.TString $ E.encodeUtf8 _v1903) $ Vector.toList _v1901))) $ sendBuddyMessageToMids_args_mids record
  ]
write_SendBuddyMessageToMids_args :: T.Protocol p => p -> SendBuddyMessageToMids_args -> P.IO ()
write_SendBuddyMessageToMids_args oprot record = T.writeVal oprot $ from_SendBuddyMessageToMids_args record
encode_SendBuddyMessageToMids_args :: T.StatelessProtocol p => p -> SendBuddyMessageToMids_args -> LBS.ByteString
encode_SendBuddyMessageToMids_args oprot record = T.serializeVal oprot $ from_SendBuddyMessageToMids_args record
to_SendBuddyMessageToMids_args :: T.ThriftVal -> SendBuddyMessageToMids_args
to_SendBuddyMessageToMids_args (T.TStruct fields) = SendBuddyMessageToMids_args{
  sendBuddyMessageToMids_args_requestId = P.maybe (sendBuddyMessageToMids_args_requestId default_SendBuddyMessageToMids_args) (\(_,_val1905) -> (case _val1905 of {T.TString _val1906 -> E.decodeUtf8 _val1906; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyMessageToMids_args_msg = P.maybe (sendBuddyMessageToMids_args_msg default_SendBuddyMessageToMids_args) (\(_,_val1905) -> (case _val1905 of {T.TStruct _val1907 -> (to_Message (T.TStruct _val1907)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  sendBuddyMessageToMids_args_mids = P.maybe (sendBuddyMessageToMids_args_mids default_SendBuddyMessageToMids_args) (\(_,_val1905) -> (case _val1905 of {T.TList _ _val1908 -> (Vector.fromList $ P.map (\_v1909 -> (case _v1909 of {T.TString _val1910 -> E.decodeUtf8 _val1910; _ -> P.error "wrong type"})) _val1908); _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_SendBuddyMessageToMids_args _ = P.error "not a struct"
read_SendBuddyMessageToMids_args :: T.Protocol p => p -> P.IO SendBuddyMessageToMids_args
read_SendBuddyMessageToMids_args iprot = to_SendBuddyMessageToMids_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMids_args)
decode_SendBuddyMessageToMids_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToMids_args
decode_SendBuddyMessageToMids_args iprot bs = to_SendBuddyMessageToMids_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMids_args) bs
typemap_SendBuddyMessageToMids_args :: T.TypeMap
typemap_SendBuddyMessageToMids_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("mids",(T.T_LIST T.T_STRING)))]
default_SendBuddyMessageToMids_args :: SendBuddyMessageToMids_args
default_SendBuddyMessageToMids_args = SendBuddyMessageToMids_args{
  sendBuddyMessageToMids_args_requestId = "",
  sendBuddyMessageToMids_args_msg = default_Message,
  sendBuddyMessageToMids_args_mids = Vector.empty}
data SendBuddyMessageToMids_result = SendBuddyMessageToMids_result  { sendBuddyMessageToMids_result_success :: SendBuddyMessageResult
  , sendBuddyMessageToMids_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToMids_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToMids_result_success record   `H.hashWithSalt` sendBuddyMessageToMids_result_e record  
instance QC.Arbitrary SendBuddyMessageToMids_result where 
  arbitrary = M.liftM SendBuddyMessageToMids_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToMids_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToMids_result{sendBuddyMessageToMids_result_success = sendBuddyMessageToMids_result_success obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMids_result{sendBuddyMessageToMids_result_success = sendBuddyMessageToMids_result_success obj}
    , if obj == default_SendBuddyMessageToMids_result{sendBuddyMessageToMids_result_e = sendBuddyMessageToMids_result_e obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMids_result{sendBuddyMessageToMids_result_e = sendBuddyMessageToMids_result_e obj}
    ]
from_SendBuddyMessageToMids_result :: SendBuddyMessageToMids_result -> T.ThriftVal
from_SendBuddyMessageToMids_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1913 -> (1, ("e",from_TalkException _v1913))) <$> sendBuddyMessageToMids_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1913 -> P.Just (0, ("success",from_SendBuddyMessageResult _v1913))) $ sendBuddyMessageToMids_result_success record
    , (\_v1913 -> (1, ("e",from_TalkException _v1913))) <$> sendBuddyMessageToMids_result_e record
    ]
    )
write_SendBuddyMessageToMids_result :: T.Protocol p => p -> SendBuddyMessageToMids_result -> P.IO ()
write_SendBuddyMessageToMids_result oprot record = T.writeVal oprot $ from_SendBuddyMessageToMids_result record
encode_SendBuddyMessageToMids_result :: T.StatelessProtocol p => p -> SendBuddyMessageToMids_result -> LBS.ByteString
encode_SendBuddyMessageToMids_result oprot record = T.serializeVal oprot $ from_SendBuddyMessageToMids_result record
to_SendBuddyMessageToMids_result :: T.ThriftVal -> SendBuddyMessageToMids_result
to_SendBuddyMessageToMids_result (T.TStruct fields) = SendBuddyMessageToMids_result{
  sendBuddyMessageToMids_result_success = P.maybe (sendBuddyMessageToMids_result_success default_SendBuddyMessageToMids_result) (\(_,_val1915) -> (case _val1915 of {T.TStruct _val1916 -> (to_SendBuddyMessageResult (T.TStruct _val1916)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyMessageToMids_result_e = P.maybe (P.Nothing) (\(_,_val1915) -> P.Just (case _val1915 of {T.TStruct _val1917 -> (to_TalkException (T.TStruct _val1917)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyMessageToMids_result _ = P.error "not a struct"
read_SendBuddyMessageToMids_result :: T.Protocol p => p -> P.IO SendBuddyMessageToMids_result
read_SendBuddyMessageToMids_result iprot = to_SendBuddyMessageToMids_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMids_result)
decode_SendBuddyMessageToMids_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToMids_result
decode_SendBuddyMessageToMids_result iprot bs = to_SendBuddyMessageToMids_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMids_result) bs
typemap_SendBuddyMessageToMids_result :: T.TypeMap
typemap_SendBuddyMessageToMids_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SendBuddyMessageResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyMessageToMids_result :: SendBuddyMessageToMids_result
default_SendBuddyMessageToMids_result = SendBuddyMessageToMids_result{
  sendBuddyMessageToMids_result_success = default_SendBuddyMessageResult,
  sendBuddyMessageToMids_result_e = P.Nothing}
data SendBuddyMessageToMidsAsync_args = SendBuddyMessageToMidsAsync_args  { sendBuddyMessageToMidsAsync_args_requestId :: LT.Text
  , sendBuddyMessageToMidsAsync_args_msg :: Message
  , sendBuddyMessageToMidsAsync_args_mids :: (Vector.Vector LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToMidsAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToMidsAsync_args_requestId record   `H.hashWithSalt` sendBuddyMessageToMidsAsync_args_msg record   `H.hashWithSalt` sendBuddyMessageToMidsAsync_args_mids record  
instance QC.Arbitrary SendBuddyMessageToMidsAsync_args where 
  arbitrary = M.liftM SendBuddyMessageToMidsAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToMidsAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToMidsAsync_args{sendBuddyMessageToMidsAsync_args_requestId = sendBuddyMessageToMidsAsync_args_requestId obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMidsAsync_args{sendBuddyMessageToMidsAsync_args_requestId = sendBuddyMessageToMidsAsync_args_requestId obj}
    , if obj == default_SendBuddyMessageToMidsAsync_args{sendBuddyMessageToMidsAsync_args_msg = sendBuddyMessageToMidsAsync_args_msg obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMidsAsync_args{sendBuddyMessageToMidsAsync_args_msg = sendBuddyMessageToMidsAsync_args_msg obj}
    , if obj == default_SendBuddyMessageToMidsAsync_args{sendBuddyMessageToMidsAsync_args_mids = sendBuddyMessageToMidsAsync_args_mids obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMidsAsync_args{sendBuddyMessageToMidsAsync_args_mids = sendBuddyMessageToMidsAsync_args_mids obj}
    ]
from_SendBuddyMessageToMidsAsync_args :: SendBuddyMessageToMidsAsync_args -> T.ThriftVal
from_SendBuddyMessageToMidsAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1920 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1920))) $ sendBuddyMessageToMidsAsync_args_requestId record
  , (\_v1920 -> P.Just (2, ("msg",from_Message _v1920))) $ sendBuddyMessageToMidsAsync_args_msg record
  , (\_v1920 -> P.Just (3, ("mids",T.TList T.T_STRING $ P.map (\_v1922 -> T.TString $ E.encodeUtf8 _v1922) $ Vector.toList _v1920))) $ sendBuddyMessageToMidsAsync_args_mids record
  ]
write_SendBuddyMessageToMidsAsync_args :: T.Protocol p => p -> SendBuddyMessageToMidsAsync_args -> P.IO ()
write_SendBuddyMessageToMidsAsync_args oprot record = T.writeVal oprot $ from_SendBuddyMessageToMidsAsync_args record
encode_SendBuddyMessageToMidsAsync_args :: T.StatelessProtocol p => p -> SendBuddyMessageToMidsAsync_args -> LBS.ByteString
encode_SendBuddyMessageToMidsAsync_args oprot record = T.serializeVal oprot $ from_SendBuddyMessageToMidsAsync_args record
to_SendBuddyMessageToMidsAsync_args :: T.ThriftVal -> SendBuddyMessageToMidsAsync_args
to_SendBuddyMessageToMidsAsync_args (T.TStruct fields) = SendBuddyMessageToMidsAsync_args{
  sendBuddyMessageToMidsAsync_args_requestId = P.maybe (sendBuddyMessageToMidsAsync_args_requestId default_SendBuddyMessageToMidsAsync_args) (\(_,_val1924) -> (case _val1924 of {T.TString _val1925 -> E.decodeUtf8 _val1925; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendBuddyMessageToMidsAsync_args_msg = P.maybe (sendBuddyMessageToMidsAsync_args_msg default_SendBuddyMessageToMidsAsync_args) (\(_,_val1924) -> (case _val1924 of {T.TStruct _val1926 -> (to_Message (T.TStruct _val1926)); _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  sendBuddyMessageToMidsAsync_args_mids = P.maybe (sendBuddyMessageToMidsAsync_args_mids default_SendBuddyMessageToMidsAsync_args) (\(_,_val1924) -> (case _val1924 of {T.TList _ _val1927 -> (Vector.fromList $ P.map (\_v1928 -> (case _v1928 of {T.TString _val1929 -> E.decodeUtf8 _val1929; _ -> P.error "wrong type"})) _val1927); _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_SendBuddyMessageToMidsAsync_args _ = P.error "not a struct"
read_SendBuddyMessageToMidsAsync_args :: T.Protocol p => p -> P.IO SendBuddyMessageToMidsAsync_args
read_SendBuddyMessageToMidsAsync_args iprot = to_SendBuddyMessageToMidsAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMidsAsync_args)
decode_SendBuddyMessageToMidsAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToMidsAsync_args
decode_SendBuddyMessageToMidsAsync_args iprot bs = to_SendBuddyMessageToMidsAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMidsAsync_args) bs
typemap_SendBuddyMessageToMidsAsync_args :: T.TypeMap
typemap_SendBuddyMessageToMidsAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("msg",(T.T_STRUCT typemap_Message))),(3,("mids",(T.T_LIST T.T_STRING)))]
default_SendBuddyMessageToMidsAsync_args :: SendBuddyMessageToMidsAsync_args
default_SendBuddyMessageToMidsAsync_args = SendBuddyMessageToMidsAsync_args{
  sendBuddyMessageToMidsAsync_args_requestId = "",
  sendBuddyMessageToMidsAsync_args_msg = default_Message,
  sendBuddyMessageToMidsAsync_args_mids = Vector.empty}
data SendBuddyMessageToMidsAsync_result = SendBuddyMessageToMidsAsync_result  { sendBuddyMessageToMidsAsync_result_success :: LT.Text
  , sendBuddyMessageToMidsAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendBuddyMessageToMidsAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendBuddyMessageToMidsAsync_result_success record   `H.hashWithSalt` sendBuddyMessageToMidsAsync_result_e record  
instance QC.Arbitrary SendBuddyMessageToMidsAsync_result where 
  arbitrary = M.liftM SendBuddyMessageToMidsAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendBuddyMessageToMidsAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendBuddyMessageToMidsAsync_result{sendBuddyMessageToMidsAsync_result_success = sendBuddyMessageToMidsAsync_result_success obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMidsAsync_result{sendBuddyMessageToMidsAsync_result_success = sendBuddyMessageToMidsAsync_result_success obj}
    , if obj == default_SendBuddyMessageToMidsAsync_result{sendBuddyMessageToMidsAsync_result_e = sendBuddyMessageToMidsAsync_result_e obj} then P.Nothing else P.Just $ default_SendBuddyMessageToMidsAsync_result{sendBuddyMessageToMidsAsync_result_e = sendBuddyMessageToMidsAsync_result_e obj}
    ]
from_SendBuddyMessageToMidsAsync_result :: SendBuddyMessageToMidsAsync_result -> T.ThriftVal
from_SendBuddyMessageToMidsAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1932 -> (1, ("e",from_TalkException _v1932))) <$> sendBuddyMessageToMidsAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1932 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v1932))) $ sendBuddyMessageToMidsAsync_result_success record
    , (\_v1932 -> (1, ("e",from_TalkException _v1932))) <$> sendBuddyMessageToMidsAsync_result_e record
    ]
    )
write_SendBuddyMessageToMidsAsync_result :: T.Protocol p => p -> SendBuddyMessageToMidsAsync_result -> P.IO ()
write_SendBuddyMessageToMidsAsync_result oprot record = T.writeVal oprot $ from_SendBuddyMessageToMidsAsync_result record
encode_SendBuddyMessageToMidsAsync_result :: T.StatelessProtocol p => p -> SendBuddyMessageToMidsAsync_result -> LBS.ByteString
encode_SendBuddyMessageToMidsAsync_result oprot record = T.serializeVal oprot $ from_SendBuddyMessageToMidsAsync_result record
to_SendBuddyMessageToMidsAsync_result :: T.ThriftVal -> SendBuddyMessageToMidsAsync_result
to_SendBuddyMessageToMidsAsync_result (T.TStruct fields) = SendBuddyMessageToMidsAsync_result{
  sendBuddyMessageToMidsAsync_result_success = P.maybe (sendBuddyMessageToMidsAsync_result_success default_SendBuddyMessageToMidsAsync_result) (\(_,_val1934) -> (case _val1934 of {T.TString _val1935 -> E.decodeUtf8 _val1935; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  sendBuddyMessageToMidsAsync_result_e = P.maybe (P.Nothing) (\(_,_val1934) -> P.Just (case _val1934 of {T.TStruct _val1936 -> (to_TalkException (T.TStruct _val1936)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendBuddyMessageToMidsAsync_result _ = P.error "not a struct"
read_SendBuddyMessageToMidsAsync_result :: T.Protocol p => p -> P.IO SendBuddyMessageToMidsAsync_result
read_SendBuddyMessageToMidsAsync_result iprot = to_SendBuddyMessageToMidsAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMidsAsync_result)
decode_SendBuddyMessageToMidsAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendBuddyMessageToMidsAsync_result
decode_SendBuddyMessageToMidsAsync_result iprot bs = to_SendBuddyMessageToMidsAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendBuddyMessageToMidsAsync_result) bs
typemap_SendBuddyMessageToMidsAsync_result :: T.TypeMap
typemap_SendBuddyMessageToMidsAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendBuddyMessageToMidsAsync_result :: SendBuddyMessageToMidsAsync_result
default_SendBuddyMessageToMidsAsync_result = SendBuddyMessageToMidsAsync_result{
  sendBuddyMessageToMidsAsync_result_success = "",
  sendBuddyMessageToMidsAsync_result_e = P.Nothing}
data SendIndividualEventToAllAsync_args = SendIndividualEventToAllAsync_args  { sendIndividualEventToAllAsync_args_requestId :: LT.Text
  , sendIndividualEventToAllAsync_args_buddyMid :: LT.Text
  , sendIndividualEventToAllAsync_args_notificationStatus :: NotificationStatus
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendIndividualEventToAllAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendIndividualEventToAllAsync_args_requestId record   `H.hashWithSalt` sendIndividualEventToAllAsync_args_buddyMid record   `H.hashWithSalt` sendIndividualEventToAllAsync_args_notificationStatus record  
instance QC.Arbitrary SendIndividualEventToAllAsync_args where 
  arbitrary = M.liftM SendIndividualEventToAllAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SendIndividualEventToAllAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendIndividualEventToAllAsync_args{sendIndividualEventToAllAsync_args_requestId = sendIndividualEventToAllAsync_args_requestId obj} then P.Nothing else P.Just $ default_SendIndividualEventToAllAsync_args{sendIndividualEventToAllAsync_args_requestId = sendIndividualEventToAllAsync_args_requestId obj}
    , if obj == default_SendIndividualEventToAllAsync_args{sendIndividualEventToAllAsync_args_buddyMid = sendIndividualEventToAllAsync_args_buddyMid obj} then P.Nothing else P.Just $ default_SendIndividualEventToAllAsync_args{sendIndividualEventToAllAsync_args_buddyMid = sendIndividualEventToAllAsync_args_buddyMid obj}
    , if obj == default_SendIndividualEventToAllAsync_args{sendIndividualEventToAllAsync_args_notificationStatus = sendIndividualEventToAllAsync_args_notificationStatus obj} then P.Nothing else P.Just $ default_SendIndividualEventToAllAsync_args{sendIndividualEventToAllAsync_args_notificationStatus = sendIndividualEventToAllAsync_args_notificationStatus obj}
    ]
from_SendIndividualEventToAllAsync_args :: SendIndividualEventToAllAsync_args -> T.ThriftVal
from_SendIndividualEventToAllAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1939 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1939))) $ sendIndividualEventToAllAsync_args_requestId record
  , (\_v1939 -> P.Just (2, ("buddyMid",T.TString $ E.encodeUtf8 _v1939))) $ sendIndividualEventToAllAsync_args_buddyMid record
  , (\_v1939 -> P.Just (3, ("notificationStatus",T.TI32 $ P.fromIntegral $ P.fromEnum _v1939))) $ sendIndividualEventToAllAsync_args_notificationStatus record
  ]
write_SendIndividualEventToAllAsync_args :: T.Protocol p => p -> SendIndividualEventToAllAsync_args -> P.IO ()
write_SendIndividualEventToAllAsync_args oprot record = T.writeVal oprot $ from_SendIndividualEventToAllAsync_args record
encode_SendIndividualEventToAllAsync_args :: T.StatelessProtocol p => p -> SendIndividualEventToAllAsync_args -> LBS.ByteString
encode_SendIndividualEventToAllAsync_args oprot record = T.serializeVal oprot $ from_SendIndividualEventToAllAsync_args record
to_SendIndividualEventToAllAsync_args :: T.ThriftVal -> SendIndividualEventToAllAsync_args
to_SendIndividualEventToAllAsync_args (T.TStruct fields) = SendIndividualEventToAllAsync_args{
  sendIndividualEventToAllAsync_args_requestId = P.maybe (sendIndividualEventToAllAsync_args_requestId default_SendIndividualEventToAllAsync_args) (\(_,_val1941) -> (case _val1941 of {T.TString _val1942 -> E.decodeUtf8 _val1942; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  sendIndividualEventToAllAsync_args_buddyMid = P.maybe (sendIndividualEventToAllAsync_args_buddyMid default_SendIndividualEventToAllAsync_args) (\(_,_val1941) -> (case _val1941 of {T.TString _val1943 -> E.decodeUtf8 _val1943; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  sendIndividualEventToAllAsync_args_notificationStatus = P.maybe (sendIndividualEventToAllAsync_args_notificationStatus default_SendIndividualEventToAllAsync_args) (\(_,_val1941) -> (case _val1941 of {T.TI32 _val1944 -> P.toEnum $ P.fromIntegral _val1944; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_SendIndividualEventToAllAsync_args _ = P.error "not a struct"
read_SendIndividualEventToAllAsync_args :: T.Protocol p => p -> P.IO SendIndividualEventToAllAsync_args
read_SendIndividualEventToAllAsync_args iprot = to_SendIndividualEventToAllAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_SendIndividualEventToAllAsync_args)
decode_SendIndividualEventToAllAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SendIndividualEventToAllAsync_args
decode_SendIndividualEventToAllAsync_args iprot bs = to_SendIndividualEventToAllAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SendIndividualEventToAllAsync_args) bs
typemap_SendIndividualEventToAllAsync_args :: T.TypeMap
typemap_SendIndividualEventToAllAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("buddyMid",T.T_STRING)),(3,("notificationStatus",T.T_I32))]
default_SendIndividualEventToAllAsync_args :: SendIndividualEventToAllAsync_args
default_SendIndividualEventToAllAsync_args = SendIndividualEventToAllAsync_args{
  sendIndividualEventToAllAsync_args_requestId = "",
  sendIndividualEventToAllAsync_args_buddyMid = "",
  sendIndividualEventToAllAsync_args_notificationStatus = (P.toEnum 0)}
data SendIndividualEventToAllAsync_result = SendIndividualEventToAllAsync_result  { sendIndividualEventToAllAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SendIndividualEventToAllAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` sendIndividualEventToAllAsync_result_e record  
instance QC.Arbitrary SendIndividualEventToAllAsync_result where 
  arbitrary = M.liftM SendIndividualEventToAllAsync_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SendIndividualEventToAllAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SendIndividualEventToAllAsync_result{sendIndividualEventToAllAsync_result_e = sendIndividualEventToAllAsync_result_e obj} then P.Nothing else P.Just $ default_SendIndividualEventToAllAsync_result{sendIndividualEventToAllAsync_result_e = sendIndividualEventToAllAsync_result_e obj}
    ]
from_SendIndividualEventToAllAsync_result :: SendIndividualEventToAllAsync_result -> T.ThriftVal
from_SendIndividualEventToAllAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1947 -> (1, ("e",from_TalkException _v1947))) <$> sendIndividualEventToAllAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1947 -> (1, ("e",from_TalkException _v1947))) <$> sendIndividualEventToAllAsync_result_e record
    ]
    )
write_SendIndividualEventToAllAsync_result :: T.Protocol p => p -> SendIndividualEventToAllAsync_result -> P.IO ()
write_SendIndividualEventToAllAsync_result oprot record = T.writeVal oprot $ from_SendIndividualEventToAllAsync_result record
encode_SendIndividualEventToAllAsync_result :: T.StatelessProtocol p => p -> SendIndividualEventToAllAsync_result -> LBS.ByteString
encode_SendIndividualEventToAllAsync_result oprot record = T.serializeVal oprot $ from_SendIndividualEventToAllAsync_result record
to_SendIndividualEventToAllAsync_result :: T.ThriftVal -> SendIndividualEventToAllAsync_result
to_SendIndividualEventToAllAsync_result (T.TStruct fields) = SendIndividualEventToAllAsync_result{
  sendIndividualEventToAllAsync_result_e = P.maybe (P.Nothing) (\(_,_val1949) -> P.Just (case _val1949 of {T.TStruct _val1950 -> (to_TalkException (T.TStruct _val1950)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SendIndividualEventToAllAsync_result _ = P.error "not a struct"
read_SendIndividualEventToAllAsync_result :: T.Protocol p => p -> P.IO SendIndividualEventToAllAsync_result
read_SendIndividualEventToAllAsync_result iprot = to_SendIndividualEventToAllAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_SendIndividualEventToAllAsync_result)
decode_SendIndividualEventToAllAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SendIndividualEventToAllAsync_result
decode_SendIndividualEventToAllAsync_result iprot bs = to_SendIndividualEventToAllAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SendIndividualEventToAllAsync_result) bs
typemap_SendIndividualEventToAllAsync_result :: T.TypeMap
typemap_SendIndividualEventToAllAsync_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SendIndividualEventToAllAsync_result :: SendIndividualEventToAllAsync_result
default_SendIndividualEventToAllAsync_result = SendIndividualEventToAllAsync_result{
  sendIndividualEventToAllAsync_result_e = P.Nothing}
data SetBuddyOnAir_args = SetBuddyOnAir_args  { setBuddyOnAir_args_requestId :: LT.Text
  , setBuddyOnAir_args_onAir :: P.Bool
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SetBuddyOnAir_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` setBuddyOnAir_args_requestId record   `H.hashWithSalt` setBuddyOnAir_args_onAir record  
instance QC.Arbitrary SetBuddyOnAir_args where 
  arbitrary = M.liftM SetBuddyOnAir_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SetBuddyOnAir_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SetBuddyOnAir_args{setBuddyOnAir_args_requestId = setBuddyOnAir_args_requestId obj} then P.Nothing else P.Just $ default_SetBuddyOnAir_args{setBuddyOnAir_args_requestId = setBuddyOnAir_args_requestId obj}
    , if obj == default_SetBuddyOnAir_args{setBuddyOnAir_args_onAir = setBuddyOnAir_args_onAir obj} then P.Nothing else P.Just $ default_SetBuddyOnAir_args{setBuddyOnAir_args_onAir = setBuddyOnAir_args_onAir obj}
    ]
from_SetBuddyOnAir_args :: SetBuddyOnAir_args -> T.ThriftVal
from_SetBuddyOnAir_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1953 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1953))) $ setBuddyOnAir_args_requestId record
  , (\_v1953 -> P.Just (2, ("onAir",T.TBool _v1953))) $ setBuddyOnAir_args_onAir record
  ]
write_SetBuddyOnAir_args :: T.Protocol p => p -> SetBuddyOnAir_args -> P.IO ()
write_SetBuddyOnAir_args oprot record = T.writeVal oprot $ from_SetBuddyOnAir_args record
encode_SetBuddyOnAir_args :: T.StatelessProtocol p => p -> SetBuddyOnAir_args -> LBS.ByteString
encode_SetBuddyOnAir_args oprot record = T.serializeVal oprot $ from_SetBuddyOnAir_args record
to_SetBuddyOnAir_args :: T.ThriftVal -> SetBuddyOnAir_args
to_SetBuddyOnAir_args (T.TStruct fields) = SetBuddyOnAir_args{
  setBuddyOnAir_args_requestId = P.maybe (setBuddyOnAir_args_requestId default_SetBuddyOnAir_args) (\(_,_val1955) -> (case _val1955 of {T.TString _val1956 -> E.decodeUtf8 _val1956; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  setBuddyOnAir_args_onAir = P.maybe (setBuddyOnAir_args_onAir default_SetBuddyOnAir_args) (\(_,_val1955) -> (case _val1955 of {T.TBool _val1957 -> _val1957; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_SetBuddyOnAir_args _ = P.error "not a struct"
read_SetBuddyOnAir_args :: T.Protocol p => p -> P.IO SetBuddyOnAir_args
read_SetBuddyOnAir_args iprot = to_SetBuddyOnAir_args <$> T.readVal iprot (T.T_STRUCT typemap_SetBuddyOnAir_args)
decode_SetBuddyOnAir_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SetBuddyOnAir_args
decode_SetBuddyOnAir_args iprot bs = to_SetBuddyOnAir_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SetBuddyOnAir_args) bs
typemap_SetBuddyOnAir_args :: T.TypeMap
typemap_SetBuddyOnAir_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("onAir",T.T_BOOL))]
default_SetBuddyOnAir_args :: SetBuddyOnAir_args
default_SetBuddyOnAir_args = SetBuddyOnAir_args{
  setBuddyOnAir_args_requestId = "",
  setBuddyOnAir_args_onAir = P.False}
data SetBuddyOnAir_result = SetBuddyOnAir_result  { setBuddyOnAir_result_success :: SetBuddyOnAirResult
  , setBuddyOnAir_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SetBuddyOnAir_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` setBuddyOnAir_result_success record   `H.hashWithSalt` setBuddyOnAir_result_e record  
instance QC.Arbitrary SetBuddyOnAir_result where 
  arbitrary = M.liftM SetBuddyOnAir_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SetBuddyOnAir_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SetBuddyOnAir_result{setBuddyOnAir_result_success = setBuddyOnAir_result_success obj} then P.Nothing else P.Just $ default_SetBuddyOnAir_result{setBuddyOnAir_result_success = setBuddyOnAir_result_success obj}
    , if obj == default_SetBuddyOnAir_result{setBuddyOnAir_result_e = setBuddyOnAir_result_e obj} then P.Nothing else P.Just $ default_SetBuddyOnAir_result{setBuddyOnAir_result_e = setBuddyOnAir_result_e obj}
    ]
from_SetBuddyOnAir_result :: SetBuddyOnAir_result -> T.ThriftVal
from_SetBuddyOnAir_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1960 -> (1, ("e",from_TalkException _v1960))) <$> setBuddyOnAir_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1960 -> P.Just (0, ("success",from_SetBuddyOnAirResult _v1960))) $ setBuddyOnAir_result_success record
    , (\_v1960 -> (1, ("e",from_TalkException _v1960))) <$> setBuddyOnAir_result_e record
    ]
    )
write_SetBuddyOnAir_result :: T.Protocol p => p -> SetBuddyOnAir_result -> P.IO ()
write_SetBuddyOnAir_result oprot record = T.writeVal oprot $ from_SetBuddyOnAir_result record
encode_SetBuddyOnAir_result :: T.StatelessProtocol p => p -> SetBuddyOnAir_result -> LBS.ByteString
encode_SetBuddyOnAir_result oprot record = T.serializeVal oprot $ from_SetBuddyOnAir_result record
to_SetBuddyOnAir_result :: T.ThriftVal -> SetBuddyOnAir_result
to_SetBuddyOnAir_result (T.TStruct fields) = SetBuddyOnAir_result{
  setBuddyOnAir_result_success = P.maybe (setBuddyOnAir_result_success default_SetBuddyOnAir_result) (\(_,_val1962) -> (case _val1962 of {T.TStruct _val1963 -> (to_SetBuddyOnAirResult (T.TStruct _val1963)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  setBuddyOnAir_result_e = P.maybe (P.Nothing) (\(_,_val1962) -> P.Just (case _val1962 of {T.TStruct _val1964 -> (to_TalkException (T.TStruct _val1964)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SetBuddyOnAir_result _ = P.error "not a struct"
read_SetBuddyOnAir_result :: T.Protocol p => p -> P.IO SetBuddyOnAir_result
read_SetBuddyOnAir_result iprot = to_SetBuddyOnAir_result <$> T.readVal iprot (T.T_STRUCT typemap_SetBuddyOnAir_result)
decode_SetBuddyOnAir_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SetBuddyOnAir_result
decode_SetBuddyOnAir_result iprot bs = to_SetBuddyOnAir_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SetBuddyOnAir_result) bs
typemap_SetBuddyOnAir_result :: T.TypeMap
typemap_SetBuddyOnAir_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SetBuddyOnAirResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SetBuddyOnAir_result :: SetBuddyOnAir_result
default_SetBuddyOnAir_result = SetBuddyOnAir_result{
  setBuddyOnAir_result_success = default_SetBuddyOnAirResult,
  setBuddyOnAir_result_e = P.Nothing}
data SetBuddyOnAirAsync_args = SetBuddyOnAirAsync_args  { setBuddyOnAirAsync_args_requestId :: LT.Text
  , setBuddyOnAirAsync_args_onAir :: P.Bool
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SetBuddyOnAirAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` setBuddyOnAirAsync_args_requestId record   `H.hashWithSalt` setBuddyOnAirAsync_args_onAir record  
instance QC.Arbitrary SetBuddyOnAirAsync_args where 
  arbitrary = M.liftM SetBuddyOnAirAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SetBuddyOnAirAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SetBuddyOnAirAsync_args{setBuddyOnAirAsync_args_requestId = setBuddyOnAirAsync_args_requestId obj} then P.Nothing else P.Just $ default_SetBuddyOnAirAsync_args{setBuddyOnAirAsync_args_requestId = setBuddyOnAirAsync_args_requestId obj}
    , if obj == default_SetBuddyOnAirAsync_args{setBuddyOnAirAsync_args_onAir = setBuddyOnAirAsync_args_onAir obj} then P.Nothing else P.Just $ default_SetBuddyOnAirAsync_args{setBuddyOnAirAsync_args_onAir = setBuddyOnAirAsync_args_onAir obj}
    ]
from_SetBuddyOnAirAsync_args :: SetBuddyOnAirAsync_args -> T.ThriftVal
from_SetBuddyOnAirAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1967 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1967))) $ setBuddyOnAirAsync_args_requestId record
  , (\_v1967 -> P.Just (2, ("onAir",T.TBool _v1967))) $ setBuddyOnAirAsync_args_onAir record
  ]
write_SetBuddyOnAirAsync_args :: T.Protocol p => p -> SetBuddyOnAirAsync_args -> P.IO ()
write_SetBuddyOnAirAsync_args oprot record = T.writeVal oprot $ from_SetBuddyOnAirAsync_args record
encode_SetBuddyOnAirAsync_args :: T.StatelessProtocol p => p -> SetBuddyOnAirAsync_args -> LBS.ByteString
encode_SetBuddyOnAirAsync_args oprot record = T.serializeVal oprot $ from_SetBuddyOnAirAsync_args record
to_SetBuddyOnAirAsync_args :: T.ThriftVal -> SetBuddyOnAirAsync_args
to_SetBuddyOnAirAsync_args (T.TStruct fields) = SetBuddyOnAirAsync_args{
  setBuddyOnAirAsync_args_requestId = P.maybe (setBuddyOnAirAsync_args_requestId default_SetBuddyOnAirAsync_args) (\(_,_val1969) -> (case _val1969 of {T.TString _val1970 -> E.decodeUtf8 _val1970; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  setBuddyOnAirAsync_args_onAir = P.maybe (setBuddyOnAirAsync_args_onAir default_SetBuddyOnAirAsync_args) (\(_,_val1969) -> (case _val1969 of {T.TBool _val1971 -> _val1971; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_SetBuddyOnAirAsync_args _ = P.error "not a struct"
read_SetBuddyOnAirAsync_args :: T.Protocol p => p -> P.IO SetBuddyOnAirAsync_args
read_SetBuddyOnAirAsync_args iprot = to_SetBuddyOnAirAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_SetBuddyOnAirAsync_args)
decode_SetBuddyOnAirAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> SetBuddyOnAirAsync_args
decode_SetBuddyOnAirAsync_args iprot bs = to_SetBuddyOnAirAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_SetBuddyOnAirAsync_args) bs
typemap_SetBuddyOnAirAsync_args :: T.TypeMap
typemap_SetBuddyOnAirAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("onAir",T.T_BOOL))]
default_SetBuddyOnAirAsync_args :: SetBuddyOnAirAsync_args
default_SetBuddyOnAirAsync_args = SetBuddyOnAirAsync_args{
  setBuddyOnAirAsync_args_requestId = "",
  setBuddyOnAirAsync_args_onAir = P.False}
data SetBuddyOnAirAsync_result = SetBuddyOnAirAsync_result  { setBuddyOnAirAsync_result_success :: LT.Text
  , setBuddyOnAirAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SetBuddyOnAirAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` setBuddyOnAirAsync_result_success record   `H.hashWithSalt` setBuddyOnAirAsync_result_e record  
instance QC.Arbitrary SetBuddyOnAirAsync_result where 
  arbitrary = M.liftM SetBuddyOnAirAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_SetBuddyOnAirAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SetBuddyOnAirAsync_result{setBuddyOnAirAsync_result_success = setBuddyOnAirAsync_result_success obj} then P.Nothing else P.Just $ default_SetBuddyOnAirAsync_result{setBuddyOnAirAsync_result_success = setBuddyOnAirAsync_result_success obj}
    , if obj == default_SetBuddyOnAirAsync_result{setBuddyOnAirAsync_result_e = setBuddyOnAirAsync_result_e obj} then P.Nothing else P.Just $ default_SetBuddyOnAirAsync_result{setBuddyOnAirAsync_result_e = setBuddyOnAirAsync_result_e obj}
    ]
from_SetBuddyOnAirAsync_result :: SetBuddyOnAirAsync_result -> T.ThriftVal
from_SetBuddyOnAirAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1974 -> (1, ("e",from_TalkException _v1974))) <$> setBuddyOnAirAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1974 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v1974))) $ setBuddyOnAirAsync_result_success record
    , (\_v1974 -> (1, ("e",from_TalkException _v1974))) <$> setBuddyOnAirAsync_result_e record
    ]
    )
write_SetBuddyOnAirAsync_result :: T.Protocol p => p -> SetBuddyOnAirAsync_result -> P.IO ()
write_SetBuddyOnAirAsync_result oprot record = T.writeVal oprot $ from_SetBuddyOnAirAsync_result record
encode_SetBuddyOnAirAsync_result :: T.StatelessProtocol p => p -> SetBuddyOnAirAsync_result -> LBS.ByteString
encode_SetBuddyOnAirAsync_result oprot record = T.serializeVal oprot $ from_SetBuddyOnAirAsync_result record
to_SetBuddyOnAirAsync_result :: T.ThriftVal -> SetBuddyOnAirAsync_result
to_SetBuddyOnAirAsync_result (T.TStruct fields) = SetBuddyOnAirAsync_result{
  setBuddyOnAirAsync_result_success = P.maybe (setBuddyOnAirAsync_result_success default_SetBuddyOnAirAsync_result) (\(_,_val1976) -> (case _val1976 of {T.TString _val1977 -> E.decodeUtf8 _val1977; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  setBuddyOnAirAsync_result_e = P.maybe (P.Nothing) (\(_,_val1976) -> P.Just (case _val1976 of {T.TStruct _val1978 -> (to_TalkException (T.TStruct _val1978)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_SetBuddyOnAirAsync_result _ = P.error "not a struct"
read_SetBuddyOnAirAsync_result :: T.Protocol p => p -> P.IO SetBuddyOnAirAsync_result
read_SetBuddyOnAirAsync_result iprot = to_SetBuddyOnAirAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_SetBuddyOnAirAsync_result)
decode_SetBuddyOnAirAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> SetBuddyOnAirAsync_result
decode_SetBuddyOnAirAsync_result iprot bs = to_SetBuddyOnAirAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_SetBuddyOnAirAsync_result) bs
typemap_SetBuddyOnAirAsync_result :: T.TypeMap
typemap_SetBuddyOnAirAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_SetBuddyOnAirAsync_result :: SetBuddyOnAirAsync_result
default_SetBuddyOnAirAsync_result = SetBuddyOnAirAsync_result{
  setBuddyOnAirAsync_result_success = "",
  setBuddyOnAirAsync_result_e = P.Nothing}
data StoreMessage_args = StoreMessage_args  { storeMessage_args_requestId :: LT.Text
  , storeMessage_args_messageRequest :: BuddyMessageRequest
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable StoreMessage_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` storeMessage_args_requestId record   `H.hashWithSalt` storeMessage_args_messageRequest record  
instance QC.Arbitrary StoreMessage_args where 
  arbitrary = M.liftM StoreMessage_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_StoreMessage_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_StoreMessage_args{storeMessage_args_requestId = storeMessage_args_requestId obj} then P.Nothing else P.Just $ default_StoreMessage_args{storeMessage_args_requestId = storeMessage_args_requestId obj}
    , if obj == default_StoreMessage_args{storeMessage_args_messageRequest = storeMessage_args_messageRequest obj} then P.Nothing else P.Just $ default_StoreMessage_args{storeMessage_args_messageRequest = storeMessage_args_messageRequest obj}
    ]
from_StoreMessage_args :: StoreMessage_args -> T.ThriftVal
from_StoreMessage_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1981 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1981))) $ storeMessage_args_requestId record
  , (\_v1981 -> P.Just (2, ("messageRequest",from_BuddyMessageRequest _v1981))) $ storeMessage_args_messageRequest record
  ]
write_StoreMessage_args :: T.Protocol p => p -> StoreMessage_args -> P.IO ()
write_StoreMessage_args oprot record = T.writeVal oprot $ from_StoreMessage_args record
encode_StoreMessage_args :: T.StatelessProtocol p => p -> StoreMessage_args -> LBS.ByteString
encode_StoreMessage_args oprot record = T.serializeVal oprot $ from_StoreMessage_args record
to_StoreMessage_args :: T.ThriftVal -> StoreMessage_args
to_StoreMessage_args (T.TStruct fields) = StoreMessage_args{
  storeMessage_args_requestId = P.maybe (storeMessage_args_requestId default_StoreMessage_args) (\(_,_val1983) -> (case _val1983 of {T.TString _val1984 -> E.decodeUtf8 _val1984; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  storeMessage_args_messageRequest = P.maybe (storeMessage_args_messageRequest default_StoreMessage_args) (\(_,_val1983) -> (case _val1983 of {T.TStruct _val1985 -> (to_BuddyMessageRequest (T.TStruct _val1985)); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_StoreMessage_args _ = P.error "not a struct"
read_StoreMessage_args :: T.Protocol p => p -> P.IO StoreMessage_args
read_StoreMessage_args iprot = to_StoreMessage_args <$> T.readVal iprot (T.T_STRUCT typemap_StoreMessage_args)
decode_StoreMessage_args :: T.StatelessProtocol p => p -> LBS.ByteString -> StoreMessage_args
decode_StoreMessage_args iprot bs = to_StoreMessage_args $ T.deserializeVal iprot (T.T_STRUCT typemap_StoreMessage_args) bs
typemap_StoreMessage_args :: T.TypeMap
typemap_StoreMessage_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("messageRequest",(T.T_STRUCT typemap_BuddyMessageRequest)))]
default_StoreMessage_args :: StoreMessage_args
default_StoreMessage_args = StoreMessage_args{
  storeMessage_args_requestId = "",
  storeMessage_args_messageRequest = default_BuddyMessageRequest}
data StoreMessage_result = StoreMessage_result  { storeMessage_result_success :: SendBuddyMessageResult
  , storeMessage_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable StoreMessage_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` storeMessage_result_success record   `H.hashWithSalt` storeMessage_result_e record  
instance QC.Arbitrary StoreMessage_result where 
  arbitrary = M.liftM StoreMessage_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_StoreMessage_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_StoreMessage_result{storeMessage_result_success = storeMessage_result_success obj} then P.Nothing else P.Just $ default_StoreMessage_result{storeMessage_result_success = storeMessage_result_success obj}
    , if obj == default_StoreMessage_result{storeMessage_result_e = storeMessage_result_e obj} then P.Nothing else P.Just $ default_StoreMessage_result{storeMessage_result_e = storeMessage_result_e obj}
    ]
from_StoreMessage_result :: StoreMessage_result -> T.ThriftVal
from_StoreMessage_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v1988 -> (1, ("e",from_TalkException _v1988))) <$> storeMessage_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v1988 -> P.Just (0, ("success",from_SendBuddyMessageResult _v1988))) $ storeMessage_result_success record
    , (\_v1988 -> (1, ("e",from_TalkException _v1988))) <$> storeMessage_result_e record
    ]
    )
write_StoreMessage_result :: T.Protocol p => p -> StoreMessage_result -> P.IO ()
write_StoreMessage_result oprot record = T.writeVal oprot $ from_StoreMessage_result record
encode_StoreMessage_result :: T.StatelessProtocol p => p -> StoreMessage_result -> LBS.ByteString
encode_StoreMessage_result oprot record = T.serializeVal oprot $ from_StoreMessage_result record
to_StoreMessage_result :: T.ThriftVal -> StoreMessage_result
to_StoreMessage_result (T.TStruct fields) = StoreMessage_result{
  storeMessage_result_success = P.maybe (storeMessage_result_success default_StoreMessage_result) (\(_,_val1990) -> (case _val1990 of {T.TStruct _val1991 -> (to_SendBuddyMessageResult (T.TStruct _val1991)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  storeMessage_result_e = P.maybe (P.Nothing) (\(_,_val1990) -> P.Just (case _val1990 of {T.TStruct _val1992 -> (to_TalkException (T.TStruct _val1992)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_StoreMessage_result _ = P.error "not a struct"
read_StoreMessage_result :: T.Protocol p => p -> P.IO StoreMessage_result
read_StoreMessage_result iprot = to_StoreMessage_result <$> T.readVal iprot (T.T_STRUCT typemap_StoreMessage_result)
decode_StoreMessage_result :: T.StatelessProtocol p => p -> LBS.ByteString -> StoreMessage_result
decode_StoreMessage_result iprot bs = to_StoreMessage_result $ T.deserializeVal iprot (T.T_STRUCT typemap_StoreMessage_result) bs
typemap_StoreMessage_result :: T.TypeMap
typemap_StoreMessage_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_SendBuddyMessageResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_StoreMessage_result :: StoreMessage_result
default_StoreMessage_result = StoreMessage_result{
  storeMessage_result_success = default_SendBuddyMessageResult,
  storeMessage_result_e = P.Nothing}
data UnblockBuddyMember_args = UnblockBuddyMember_args  { unblockBuddyMember_args_requestId :: LT.Text
  , unblockBuddyMember_args_mid :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UnblockBuddyMember_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` unblockBuddyMember_args_requestId record   `H.hashWithSalt` unblockBuddyMember_args_mid record  
instance QC.Arbitrary UnblockBuddyMember_args where 
  arbitrary = M.liftM UnblockBuddyMember_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UnblockBuddyMember_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UnblockBuddyMember_args{unblockBuddyMember_args_requestId = unblockBuddyMember_args_requestId obj} then P.Nothing else P.Just $ default_UnblockBuddyMember_args{unblockBuddyMember_args_requestId = unblockBuddyMember_args_requestId obj}
    , if obj == default_UnblockBuddyMember_args{unblockBuddyMember_args_mid = unblockBuddyMember_args_mid obj} then P.Nothing else P.Just $ default_UnblockBuddyMember_args{unblockBuddyMember_args_mid = unblockBuddyMember_args_mid obj}
    ]
from_UnblockBuddyMember_args :: UnblockBuddyMember_args -> T.ThriftVal
from_UnblockBuddyMember_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v1995 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v1995))) $ unblockBuddyMember_args_requestId record
  , (\_v1995 -> P.Just (2, ("mid",T.TString $ E.encodeUtf8 _v1995))) $ unblockBuddyMember_args_mid record
  ]
write_UnblockBuddyMember_args :: T.Protocol p => p -> UnblockBuddyMember_args -> P.IO ()
write_UnblockBuddyMember_args oprot record = T.writeVal oprot $ from_UnblockBuddyMember_args record
encode_UnblockBuddyMember_args :: T.StatelessProtocol p => p -> UnblockBuddyMember_args -> LBS.ByteString
encode_UnblockBuddyMember_args oprot record = T.serializeVal oprot $ from_UnblockBuddyMember_args record
to_UnblockBuddyMember_args :: T.ThriftVal -> UnblockBuddyMember_args
to_UnblockBuddyMember_args (T.TStruct fields) = UnblockBuddyMember_args{
  unblockBuddyMember_args_requestId = P.maybe (unblockBuddyMember_args_requestId default_UnblockBuddyMember_args) (\(_,_val1997) -> (case _val1997 of {T.TString _val1998 -> E.decodeUtf8 _val1998; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  unblockBuddyMember_args_mid = P.maybe (unblockBuddyMember_args_mid default_UnblockBuddyMember_args) (\(_,_val1997) -> (case _val1997 of {T.TString _val1999 -> E.decodeUtf8 _val1999; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UnblockBuddyMember_args _ = P.error "not a struct"
read_UnblockBuddyMember_args :: T.Protocol p => p -> P.IO UnblockBuddyMember_args
read_UnblockBuddyMember_args iprot = to_UnblockBuddyMember_args <$> T.readVal iprot (T.T_STRUCT typemap_UnblockBuddyMember_args)
decode_UnblockBuddyMember_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UnblockBuddyMember_args
decode_UnblockBuddyMember_args iprot bs = to_UnblockBuddyMember_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UnblockBuddyMember_args) bs
typemap_UnblockBuddyMember_args :: T.TypeMap
typemap_UnblockBuddyMember_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("mid",T.T_STRING))]
default_UnblockBuddyMember_args :: UnblockBuddyMember_args
default_UnblockBuddyMember_args = UnblockBuddyMember_args{
  unblockBuddyMember_args_requestId = "",
  unblockBuddyMember_args_mid = ""}
data UnblockBuddyMember_result = UnblockBuddyMember_result  { unblockBuddyMember_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UnblockBuddyMember_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` unblockBuddyMember_result_e record  
instance QC.Arbitrary UnblockBuddyMember_result where 
  arbitrary = M.liftM UnblockBuddyMember_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UnblockBuddyMember_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UnblockBuddyMember_result{unblockBuddyMember_result_e = unblockBuddyMember_result_e obj} then P.Nothing else P.Just $ default_UnblockBuddyMember_result{unblockBuddyMember_result_e = unblockBuddyMember_result_e obj}
    ]
from_UnblockBuddyMember_result :: UnblockBuddyMember_result -> T.ThriftVal
from_UnblockBuddyMember_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v2002 -> (1, ("e",from_TalkException _v2002))) <$> unblockBuddyMember_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v2002 -> (1, ("e",from_TalkException _v2002))) <$> unblockBuddyMember_result_e record
    ]
    )
write_UnblockBuddyMember_result :: T.Protocol p => p -> UnblockBuddyMember_result -> P.IO ()
write_UnblockBuddyMember_result oprot record = T.writeVal oprot $ from_UnblockBuddyMember_result record
encode_UnblockBuddyMember_result :: T.StatelessProtocol p => p -> UnblockBuddyMember_result -> LBS.ByteString
encode_UnblockBuddyMember_result oprot record = T.serializeVal oprot $ from_UnblockBuddyMember_result record
to_UnblockBuddyMember_result :: T.ThriftVal -> UnblockBuddyMember_result
to_UnblockBuddyMember_result (T.TStruct fields) = UnblockBuddyMember_result{
  unblockBuddyMember_result_e = P.maybe (P.Nothing) (\(_,_val2004) -> P.Just (case _val2004 of {T.TStruct _val2005 -> (to_TalkException (T.TStruct _val2005)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UnblockBuddyMember_result _ = P.error "not a struct"
read_UnblockBuddyMember_result :: T.Protocol p => p -> P.IO UnblockBuddyMember_result
read_UnblockBuddyMember_result iprot = to_UnblockBuddyMember_result <$> T.readVal iprot (T.T_STRUCT typemap_UnblockBuddyMember_result)
decode_UnblockBuddyMember_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UnblockBuddyMember_result
decode_UnblockBuddyMember_result iprot bs = to_UnblockBuddyMember_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UnblockBuddyMember_result) bs
typemap_UnblockBuddyMember_result :: T.TypeMap
typemap_UnblockBuddyMember_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UnblockBuddyMember_result :: UnblockBuddyMember_result
default_UnblockBuddyMember_result = UnblockBuddyMember_result{
  unblockBuddyMember_result_e = P.Nothing}
data UnregisterBuddy_args = UnregisterBuddy_args  { unregisterBuddy_args_requestId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UnregisterBuddy_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` unregisterBuddy_args_requestId record  
instance QC.Arbitrary UnregisterBuddy_args where 
  arbitrary = M.liftM UnregisterBuddy_args (QC.arbitrary)
  shrink obj | obj == default_UnregisterBuddy_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UnregisterBuddy_args{unregisterBuddy_args_requestId = unregisterBuddy_args_requestId obj} then P.Nothing else P.Just $ default_UnregisterBuddy_args{unregisterBuddy_args_requestId = unregisterBuddy_args_requestId obj}
    ]
from_UnregisterBuddy_args :: UnregisterBuddy_args -> T.ThriftVal
from_UnregisterBuddy_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2008 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v2008))) $ unregisterBuddy_args_requestId record
  ]
write_UnregisterBuddy_args :: T.Protocol p => p -> UnregisterBuddy_args -> P.IO ()
write_UnregisterBuddy_args oprot record = T.writeVal oprot $ from_UnregisterBuddy_args record
encode_UnregisterBuddy_args :: T.StatelessProtocol p => p -> UnregisterBuddy_args -> LBS.ByteString
encode_UnregisterBuddy_args oprot record = T.serializeVal oprot $ from_UnregisterBuddy_args record
to_UnregisterBuddy_args :: T.ThriftVal -> UnregisterBuddy_args
to_UnregisterBuddy_args (T.TStruct fields) = UnregisterBuddy_args{
  unregisterBuddy_args_requestId = P.maybe (unregisterBuddy_args_requestId default_UnregisterBuddy_args) (\(_,_val2010) -> (case _val2010 of {T.TString _val2011 -> E.decodeUtf8 _val2011; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UnregisterBuddy_args _ = P.error "not a struct"
read_UnregisterBuddy_args :: T.Protocol p => p -> P.IO UnregisterBuddy_args
read_UnregisterBuddy_args iprot = to_UnregisterBuddy_args <$> T.readVal iprot (T.T_STRUCT typemap_UnregisterBuddy_args)
decode_UnregisterBuddy_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UnregisterBuddy_args
decode_UnregisterBuddy_args iprot bs = to_UnregisterBuddy_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UnregisterBuddy_args) bs
typemap_UnregisterBuddy_args :: T.TypeMap
typemap_UnregisterBuddy_args = Map.fromList [(1,("requestId",T.T_STRING))]
default_UnregisterBuddy_args :: UnregisterBuddy_args
default_UnregisterBuddy_args = UnregisterBuddy_args{
  unregisterBuddy_args_requestId = ""}
data UnregisterBuddy_result = UnregisterBuddy_result  { unregisterBuddy_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UnregisterBuddy_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` unregisterBuddy_result_e record  
instance QC.Arbitrary UnregisterBuddy_result where 
  arbitrary = M.liftM UnregisterBuddy_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UnregisterBuddy_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UnregisterBuddy_result{unregisterBuddy_result_e = unregisterBuddy_result_e obj} then P.Nothing else P.Just $ default_UnregisterBuddy_result{unregisterBuddy_result_e = unregisterBuddy_result_e obj}
    ]
from_UnregisterBuddy_result :: UnregisterBuddy_result -> T.ThriftVal
from_UnregisterBuddy_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v2014 -> (1, ("e",from_TalkException _v2014))) <$> unregisterBuddy_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v2014 -> (1, ("e",from_TalkException _v2014))) <$> unregisterBuddy_result_e record
    ]
    )
write_UnregisterBuddy_result :: T.Protocol p => p -> UnregisterBuddy_result -> P.IO ()
write_UnregisterBuddy_result oprot record = T.writeVal oprot $ from_UnregisterBuddy_result record
encode_UnregisterBuddy_result :: T.StatelessProtocol p => p -> UnregisterBuddy_result -> LBS.ByteString
encode_UnregisterBuddy_result oprot record = T.serializeVal oprot $ from_UnregisterBuddy_result record
to_UnregisterBuddy_result :: T.ThriftVal -> UnregisterBuddy_result
to_UnregisterBuddy_result (T.TStruct fields) = UnregisterBuddy_result{
  unregisterBuddy_result_e = P.maybe (P.Nothing) (\(_,_val2016) -> P.Just (case _val2016 of {T.TStruct _val2017 -> (to_TalkException (T.TStruct _val2017)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UnregisterBuddy_result _ = P.error "not a struct"
read_UnregisterBuddy_result :: T.Protocol p => p -> P.IO UnregisterBuddy_result
read_UnregisterBuddy_result iprot = to_UnregisterBuddy_result <$> T.readVal iprot (T.T_STRUCT typemap_UnregisterBuddy_result)
decode_UnregisterBuddy_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UnregisterBuddy_result
decode_UnregisterBuddy_result iprot bs = to_UnregisterBuddy_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UnregisterBuddy_result) bs
typemap_UnregisterBuddy_result :: T.TypeMap
typemap_UnregisterBuddy_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UnregisterBuddy_result :: UnregisterBuddy_result
default_UnregisterBuddy_result = UnregisterBuddy_result{
  unregisterBuddy_result_e = P.Nothing}
data UnregisterBuddyAdmin_args = UnregisterBuddyAdmin_args  { unregisterBuddyAdmin_args_requestId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UnregisterBuddyAdmin_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` unregisterBuddyAdmin_args_requestId record  
instance QC.Arbitrary UnregisterBuddyAdmin_args where 
  arbitrary = M.liftM UnregisterBuddyAdmin_args (QC.arbitrary)
  shrink obj | obj == default_UnregisterBuddyAdmin_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UnregisterBuddyAdmin_args{unregisterBuddyAdmin_args_requestId = unregisterBuddyAdmin_args_requestId obj} then P.Nothing else P.Just $ default_UnregisterBuddyAdmin_args{unregisterBuddyAdmin_args_requestId = unregisterBuddyAdmin_args_requestId obj}
    ]
from_UnregisterBuddyAdmin_args :: UnregisterBuddyAdmin_args -> T.ThriftVal
from_UnregisterBuddyAdmin_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2020 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v2020))) $ unregisterBuddyAdmin_args_requestId record
  ]
write_UnregisterBuddyAdmin_args :: T.Protocol p => p -> UnregisterBuddyAdmin_args -> P.IO ()
write_UnregisterBuddyAdmin_args oprot record = T.writeVal oprot $ from_UnregisterBuddyAdmin_args record
encode_UnregisterBuddyAdmin_args :: T.StatelessProtocol p => p -> UnregisterBuddyAdmin_args -> LBS.ByteString
encode_UnregisterBuddyAdmin_args oprot record = T.serializeVal oprot $ from_UnregisterBuddyAdmin_args record
to_UnregisterBuddyAdmin_args :: T.ThriftVal -> UnregisterBuddyAdmin_args
to_UnregisterBuddyAdmin_args (T.TStruct fields) = UnregisterBuddyAdmin_args{
  unregisterBuddyAdmin_args_requestId = P.maybe (unregisterBuddyAdmin_args_requestId default_UnregisterBuddyAdmin_args) (\(_,_val2022) -> (case _val2022 of {T.TString _val2023 -> E.decodeUtf8 _val2023; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UnregisterBuddyAdmin_args _ = P.error "not a struct"
read_UnregisterBuddyAdmin_args :: T.Protocol p => p -> P.IO UnregisterBuddyAdmin_args
read_UnregisterBuddyAdmin_args iprot = to_UnregisterBuddyAdmin_args <$> T.readVal iprot (T.T_STRUCT typemap_UnregisterBuddyAdmin_args)
decode_UnregisterBuddyAdmin_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UnregisterBuddyAdmin_args
decode_UnregisterBuddyAdmin_args iprot bs = to_UnregisterBuddyAdmin_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UnregisterBuddyAdmin_args) bs
typemap_UnregisterBuddyAdmin_args :: T.TypeMap
typemap_UnregisterBuddyAdmin_args = Map.fromList [(1,("requestId",T.T_STRING))]
default_UnregisterBuddyAdmin_args :: UnregisterBuddyAdmin_args
default_UnregisterBuddyAdmin_args = UnregisterBuddyAdmin_args{
  unregisterBuddyAdmin_args_requestId = ""}
data UnregisterBuddyAdmin_result = UnregisterBuddyAdmin_result  { unregisterBuddyAdmin_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UnregisterBuddyAdmin_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` unregisterBuddyAdmin_result_e record  
instance QC.Arbitrary UnregisterBuddyAdmin_result where 
  arbitrary = M.liftM UnregisterBuddyAdmin_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UnregisterBuddyAdmin_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UnregisterBuddyAdmin_result{unregisterBuddyAdmin_result_e = unregisterBuddyAdmin_result_e obj} then P.Nothing else P.Just $ default_UnregisterBuddyAdmin_result{unregisterBuddyAdmin_result_e = unregisterBuddyAdmin_result_e obj}
    ]
from_UnregisterBuddyAdmin_result :: UnregisterBuddyAdmin_result -> T.ThriftVal
from_UnregisterBuddyAdmin_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v2026 -> (1, ("e",from_TalkException _v2026))) <$> unregisterBuddyAdmin_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v2026 -> (1, ("e",from_TalkException _v2026))) <$> unregisterBuddyAdmin_result_e record
    ]
    )
write_UnregisterBuddyAdmin_result :: T.Protocol p => p -> UnregisterBuddyAdmin_result -> P.IO ()
write_UnregisterBuddyAdmin_result oprot record = T.writeVal oprot $ from_UnregisterBuddyAdmin_result record
encode_UnregisterBuddyAdmin_result :: T.StatelessProtocol p => p -> UnregisterBuddyAdmin_result -> LBS.ByteString
encode_UnregisterBuddyAdmin_result oprot record = T.serializeVal oprot $ from_UnregisterBuddyAdmin_result record
to_UnregisterBuddyAdmin_result :: T.ThriftVal -> UnregisterBuddyAdmin_result
to_UnregisterBuddyAdmin_result (T.TStruct fields) = UnregisterBuddyAdmin_result{
  unregisterBuddyAdmin_result_e = P.maybe (P.Nothing) (\(_,_val2028) -> P.Just (case _val2028 of {T.TStruct _val2029 -> (to_TalkException (T.TStruct _val2029)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UnregisterBuddyAdmin_result _ = P.error "not a struct"
read_UnregisterBuddyAdmin_result :: T.Protocol p => p -> P.IO UnregisterBuddyAdmin_result
read_UnregisterBuddyAdmin_result iprot = to_UnregisterBuddyAdmin_result <$> T.readVal iprot (T.T_STRUCT typemap_UnregisterBuddyAdmin_result)
decode_UnregisterBuddyAdmin_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UnregisterBuddyAdmin_result
decode_UnregisterBuddyAdmin_result iprot bs = to_UnregisterBuddyAdmin_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UnregisterBuddyAdmin_result) bs
typemap_UnregisterBuddyAdmin_result :: T.TypeMap
typemap_UnregisterBuddyAdmin_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UnregisterBuddyAdmin_result :: UnregisterBuddyAdmin_result
default_UnregisterBuddyAdmin_result = UnregisterBuddyAdmin_result{
  unregisterBuddyAdmin_result_e = P.Nothing}
data UpdateBuddyAdminProfileAttribute_args = UpdateBuddyAdminProfileAttribute_args  { updateBuddyAdminProfileAttribute_args_requestId :: LT.Text
  , updateBuddyAdminProfileAttribute_args_attributes :: (Map.HashMap LT.Text LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyAdminProfileAttribute_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyAdminProfileAttribute_args_requestId record   `H.hashWithSalt` updateBuddyAdminProfileAttribute_args_attributes record  
instance QC.Arbitrary UpdateBuddyAdminProfileAttribute_args where 
  arbitrary = M.liftM UpdateBuddyAdminProfileAttribute_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyAdminProfileAttribute_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyAdminProfileAttribute_args{updateBuddyAdminProfileAttribute_args_requestId = updateBuddyAdminProfileAttribute_args_requestId obj} then P.Nothing else P.Just $ default_UpdateBuddyAdminProfileAttribute_args{updateBuddyAdminProfileAttribute_args_requestId = updateBuddyAdminProfileAttribute_args_requestId obj}
    , if obj == default_UpdateBuddyAdminProfileAttribute_args{updateBuddyAdminProfileAttribute_args_attributes = updateBuddyAdminProfileAttribute_args_attributes obj} then P.Nothing else P.Just $ default_UpdateBuddyAdminProfileAttribute_args{updateBuddyAdminProfileAttribute_args_attributes = updateBuddyAdminProfileAttribute_args_attributes obj}
    ]
from_UpdateBuddyAdminProfileAttribute_args :: UpdateBuddyAdminProfileAttribute_args -> T.ThriftVal
from_UpdateBuddyAdminProfileAttribute_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2032 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v2032))) $ updateBuddyAdminProfileAttribute_args_requestId record
  , (\_v2032 -> P.Just (2, ("attributes",T.TMap T.T_STRING T.T_STRING $ P.map (\(_k2033,_v2034) -> (T.TString $ E.encodeUtf8 _k2033, T.TString $ E.encodeUtf8 _v2034)) $ Map.toList _v2032))) $ updateBuddyAdminProfileAttribute_args_attributes record
  ]
write_UpdateBuddyAdminProfileAttribute_args :: T.Protocol p => p -> UpdateBuddyAdminProfileAttribute_args -> P.IO ()
write_UpdateBuddyAdminProfileAttribute_args oprot record = T.writeVal oprot $ from_UpdateBuddyAdminProfileAttribute_args record
encode_UpdateBuddyAdminProfileAttribute_args :: T.StatelessProtocol p => p -> UpdateBuddyAdminProfileAttribute_args -> LBS.ByteString
encode_UpdateBuddyAdminProfileAttribute_args oprot record = T.serializeVal oprot $ from_UpdateBuddyAdminProfileAttribute_args record
to_UpdateBuddyAdminProfileAttribute_args :: T.ThriftVal -> UpdateBuddyAdminProfileAttribute_args
to_UpdateBuddyAdminProfileAttribute_args (T.TStruct fields) = UpdateBuddyAdminProfileAttribute_args{
  updateBuddyAdminProfileAttribute_args_requestId = P.maybe (updateBuddyAdminProfileAttribute_args_requestId default_UpdateBuddyAdminProfileAttribute_args) (\(_,_val2036) -> (case _val2036 of {T.TString _val2037 -> E.decodeUtf8 _val2037; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  updateBuddyAdminProfileAttribute_args_attributes = P.maybe (updateBuddyAdminProfileAttribute_args_attributes default_UpdateBuddyAdminProfileAttribute_args) (\(_,_val2036) -> (case _val2036 of {T.TMap _ _ _val2038 -> (Map.fromList $ P.map (\(_k2040,_v2039) -> ((case _k2040 of {T.TString _val2041 -> E.decodeUtf8 _val2041; _ -> P.error "wrong type"}),(case _v2039 of {T.TString _val2042 -> E.decodeUtf8 _val2042; _ -> P.error "wrong type"}))) _val2038); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddyAdminProfileAttribute_args _ = P.error "not a struct"
read_UpdateBuddyAdminProfileAttribute_args :: T.Protocol p => p -> P.IO UpdateBuddyAdminProfileAttribute_args
read_UpdateBuddyAdminProfileAttribute_args iprot = to_UpdateBuddyAdminProfileAttribute_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileAttribute_args)
decode_UpdateBuddyAdminProfileAttribute_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyAdminProfileAttribute_args
decode_UpdateBuddyAdminProfileAttribute_args iprot bs = to_UpdateBuddyAdminProfileAttribute_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileAttribute_args) bs
typemap_UpdateBuddyAdminProfileAttribute_args :: T.TypeMap
typemap_UpdateBuddyAdminProfileAttribute_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("attributes",(T.T_MAP T.T_STRING T.T_STRING)))]
default_UpdateBuddyAdminProfileAttribute_args :: UpdateBuddyAdminProfileAttribute_args
default_UpdateBuddyAdminProfileAttribute_args = UpdateBuddyAdminProfileAttribute_args{
  updateBuddyAdminProfileAttribute_args_requestId = "",
  updateBuddyAdminProfileAttribute_args_attributes = Map.empty}
data UpdateBuddyAdminProfileAttribute_result = UpdateBuddyAdminProfileAttribute_result  { updateBuddyAdminProfileAttribute_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyAdminProfileAttribute_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyAdminProfileAttribute_result_e record  
instance QC.Arbitrary UpdateBuddyAdminProfileAttribute_result where 
  arbitrary = M.liftM UpdateBuddyAdminProfileAttribute_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyAdminProfileAttribute_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyAdminProfileAttribute_result{updateBuddyAdminProfileAttribute_result_e = updateBuddyAdminProfileAttribute_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddyAdminProfileAttribute_result{updateBuddyAdminProfileAttribute_result_e = updateBuddyAdminProfileAttribute_result_e obj}
    ]
from_UpdateBuddyAdminProfileAttribute_result :: UpdateBuddyAdminProfileAttribute_result -> T.ThriftVal
from_UpdateBuddyAdminProfileAttribute_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v2045 -> (1, ("e",from_TalkException _v2045))) <$> updateBuddyAdminProfileAttribute_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v2045 -> (1, ("e",from_TalkException _v2045))) <$> updateBuddyAdminProfileAttribute_result_e record
    ]
    )
write_UpdateBuddyAdminProfileAttribute_result :: T.Protocol p => p -> UpdateBuddyAdminProfileAttribute_result -> P.IO ()
write_UpdateBuddyAdminProfileAttribute_result oprot record = T.writeVal oprot $ from_UpdateBuddyAdminProfileAttribute_result record
encode_UpdateBuddyAdminProfileAttribute_result :: T.StatelessProtocol p => p -> UpdateBuddyAdminProfileAttribute_result -> LBS.ByteString
encode_UpdateBuddyAdminProfileAttribute_result oprot record = T.serializeVal oprot $ from_UpdateBuddyAdminProfileAttribute_result record
to_UpdateBuddyAdminProfileAttribute_result :: T.ThriftVal -> UpdateBuddyAdminProfileAttribute_result
to_UpdateBuddyAdminProfileAttribute_result (T.TStruct fields) = UpdateBuddyAdminProfileAttribute_result{
  updateBuddyAdminProfileAttribute_result_e = P.maybe (P.Nothing) (\(_,_val2047) -> P.Just (case _val2047 of {T.TStruct _val2048 -> (to_TalkException (T.TStruct _val2048)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddyAdminProfileAttribute_result _ = P.error "not a struct"
read_UpdateBuddyAdminProfileAttribute_result :: T.Protocol p => p -> P.IO UpdateBuddyAdminProfileAttribute_result
read_UpdateBuddyAdminProfileAttribute_result iprot = to_UpdateBuddyAdminProfileAttribute_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileAttribute_result)
decode_UpdateBuddyAdminProfileAttribute_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyAdminProfileAttribute_result
decode_UpdateBuddyAdminProfileAttribute_result iprot bs = to_UpdateBuddyAdminProfileAttribute_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileAttribute_result) bs
typemap_UpdateBuddyAdminProfileAttribute_result :: T.TypeMap
typemap_UpdateBuddyAdminProfileAttribute_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddyAdminProfileAttribute_result :: UpdateBuddyAdminProfileAttribute_result
default_UpdateBuddyAdminProfileAttribute_result = UpdateBuddyAdminProfileAttribute_result{
  updateBuddyAdminProfileAttribute_result_e = P.Nothing}
data UpdateBuddyAdminProfileImage_args = UpdateBuddyAdminProfileImage_args  { updateBuddyAdminProfileImage_args_requestId :: LT.Text
  , updateBuddyAdminProfileImage_args_picture :: LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyAdminProfileImage_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyAdminProfileImage_args_requestId record   `H.hashWithSalt` updateBuddyAdminProfileImage_args_picture record  
instance QC.Arbitrary UpdateBuddyAdminProfileImage_args where 
  arbitrary = M.liftM UpdateBuddyAdminProfileImage_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyAdminProfileImage_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyAdminProfileImage_args{updateBuddyAdminProfileImage_args_requestId = updateBuddyAdminProfileImage_args_requestId obj} then P.Nothing else P.Just $ default_UpdateBuddyAdminProfileImage_args{updateBuddyAdminProfileImage_args_requestId = updateBuddyAdminProfileImage_args_requestId obj}
    , if obj == default_UpdateBuddyAdminProfileImage_args{updateBuddyAdminProfileImage_args_picture = updateBuddyAdminProfileImage_args_picture obj} then P.Nothing else P.Just $ default_UpdateBuddyAdminProfileImage_args{updateBuddyAdminProfileImage_args_picture = updateBuddyAdminProfileImage_args_picture obj}
    ]
from_UpdateBuddyAdminProfileImage_args :: UpdateBuddyAdminProfileImage_args -> T.ThriftVal
from_UpdateBuddyAdminProfileImage_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2051 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v2051))) $ updateBuddyAdminProfileImage_args_requestId record
  , (\_v2051 -> P.Just (2, ("picture",T.TBinary _v2051))) $ updateBuddyAdminProfileImage_args_picture record
  ]
write_UpdateBuddyAdminProfileImage_args :: T.Protocol p => p -> UpdateBuddyAdminProfileImage_args -> P.IO ()
write_UpdateBuddyAdminProfileImage_args oprot record = T.writeVal oprot $ from_UpdateBuddyAdminProfileImage_args record
encode_UpdateBuddyAdminProfileImage_args :: T.StatelessProtocol p => p -> UpdateBuddyAdminProfileImage_args -> LBS.ByteString
encode_UpdateBuddyAdminProfileImage_args oprot record = T.serializeVal oprot $ from_UpdateBuddyAdminProfileImage_args record
to_UpdateBuddyAdminProfileImage_args :: T.ThriftVal -> UpdateBuddyAdminProfileImage_args
to_UpdateBuddyAdminProfileImage_args (T.TStruct fields) = UpdateBuddyAdminProfileImage_args{
  updateBuddyAdminProfileImage_args_requestId = P.maybe (updateBuddyAdminProfileImage_args_requestId default_UpdateBuddyAdminProfileImage_args) (\(_,_val2053) -> (case _val2053 of {T.TString _val2054 -> E.decodeUtf8 _val2054; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  updateBuddyAdminProfileImage_args_picture = P.maybe (updateBuddyAdminProfileImage_args_picture default_UpdateBuddyAdminProfileImage_args) (\(_,_val2053) -> (case _val2053 of {T.TBinary _val2055 -> _val2055; T.TString _val2055 -> _val2055; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddyAdminProfileImage_args _ = P.error "not a struct"
read_UpdateBuddyAdminProfileImage_args :: T.Protocol p => p -> P.IO UpdateBuddyAdminProfileImage_args
read_UpdateBuddyAdminProfileImage_args iprot = to_UpdateBuddyAdminProfileImage_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileImage_args)
decode_UpdateBuddyAdminProfileImage_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyAdminProfileImage_args
decode_UpdateBuddyAdminProfileImage_args iprot bs = to_UpdateBuddyAdminProfileImage_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileImage_args) bs
typemap_UpdateBuddyAdminProfileImage_args :: T.TypeMap
typemap_UpdateBuddyAdminProfileImage_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("picture",T.T_BINARY))]
default_UpdateBuddyAdminProfileImage_args :: UpdateBuddyAdminProfileImage_args
default_UpdateBuddyAdminProfileImage_args = UpdateBuddyAdminProfileImage_args{
  updateBuddyAdminProfileImage_args_requestId = "",
  updateBuddyAdminProfileImage_args_picture = ""}
data UpdateBuddyAdminProfileImage_result = UpdateBuddyAdminProfileImage_result  { updateBuddyAdminProfileImage_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyAdminProfileImage_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyAdminProfileImage_result_e record  
instance QC.Arbitrary UpdateBuddyAdminProfileImage_result where 
  arbitrary = M.liftM UpdateBuddyAdminProfileImage_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyAdminProfileImage_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyAdminProfileImage_result{updateBuddyAdminProfileImage_result_e = updateBuddyAdminProfileImage_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddyAdminProfileImage_result{updateBuddyAdminProfileImage_result_e = updateBuddyAdminProfileImage_result_e obj}
    ]
from_UpdateBuddyAdminProfileImage_result :: UpdateBuddyAdminProfileImage_result -> T.ThriftVal
from_UpdateBuddyAdminProfileImage_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v2058 -> (1, ("e",from_TalkException _v2058))) <$> updateBuddyAdminProfileImage_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v2058 -> (1, ("e",from_TalkException _v2058))) <$> updateBuddyAdminProfileImage_result_e record
    ]
    )
write_UpdateBuddyAdminProfileImage_result :: T.Protocol p => p -> UpdateBuddyAdminProfileImage_result -> P.IO ()
write_UpdateBuddyAdminProfileImage_result oprot record = T.writeVal oprot $ from_UpdateBuddyAdminProfileImage_result record
encode_UpdateBuddyAdminProfileImage_result :: T.StatelessProtocol p => p -> UpdateBuddyAdminProfileImage_result -> LBS.ByteString
encode_UpdateBuddyAdminProfileImage_result oprot record = T.serializeVal oprot $ from_UpdateBuddyAdminProfileImage_result record
to_UpdateBuddyAdminProfileImage_result :: T.ThriftVal -> UpdateBuddyAdminProfileImage_result
to_UpdateBuddyAdminProfileImage_result (T.TStruct fields) = UpdateBuddyAdminProfileImage_result{
  updateBuddyAdminProfileImage_result_e = P.maybe (P.Nothing) (\(_,_val2060) -> P.Just (case _val2060 of {T.TStruct _val2061 -> (to_TalkException (T.TStruct _val2061)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddyAdminProfileImage_result _ = P.error "not a struct"
read_UpdateBuddyAdminProfileImage_result :: T.Protocol p => p -> P.IO UpdateBuddyAdminProfileImage_result
read_UpdateBuddyAdminProfileImage_result iprot = to_UpdateBuddyAdminProfileImage_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileImage_result)
decode_UpdateBuddyAdminProfileImage_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyAdminProfileImage_result
decode_UpdateBuddyAdminProfileImage_result iprot bs = to_UpdateBuddyAdminProfileImage_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyAdminProfileImage_result) bs
typemap_UpdateBuddyAdminProfileImage_result :: T.TypeMap
typemap_UpdateBuddyAdminProfileImage_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddyAdminProfileImage_result :: UpdateBuddyAdminProfileImage_result
default_UpdateBuddyAdminProfileImage_result = UpdateBuddyAdminProfileImage_result{
  updateBuddyAdminProfileImage_result_e = P.Nothing}
data UpdateBuddyProfileAttributes_args = UpdateBuddyProfileAttributes_args  { updateBuddyProfileAttributes_args_requestId :: LT.Text
  , updateBuddyProfileAttributes_args_attributes :: (Map.HashMap LT.Text LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileAttributes_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileAttributes_args_requestId record   `H.hashWithSalt` updateBuddyProfileAttributes_args_attributes record  
instance QC.Arbitrary UpdateBuddyProfileAttributes_args where 
  arbitrary = M.liftM UpdateBuddyProfileAttributes_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileAttributes_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileAttributes_args{updateBuddyProfileAttributes_args_requestId = updateBuddyProfileAttributes_args_requestId obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributes_args{updateBuddyProfileAttributes_args_requestId = updateBuddyProfileAttributes_args_requestId obj}
    , if obj == default_UpdateBuddyProfileAttributes_args{updateBuddyProfileAttributes_args_attributes = updateBuddyProfileAttributes_args_attributes obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributes_args{updateBuddyProfileAttributes_args_attributes = updateBuddyProfileAttributes_args_attributes obj}
    ]
from_UpdateBuddyProfileAttributes_args :: UpdateBuddyProfileAttributes_args -> T.ThriftVal
from_UpdateBuddyProfileAttributes_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2064 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v2064))) $ updateBuddyProfileAttributes_args_requestId record
  , (\_v2064 -> P.Just (2, ("attributes",T.TMap T.T_STRING T.T_STRING $ P.map (\(_k2065,_v2066) -> (T.TString $ E.encodeUtf8 _k2065, T.TString $ E.encodeUtf8 _v2066)) $ Map.toList _v2064))) $ updateBuddyProfileAttributes_args_attributes record
  ]
write_UpdateBuddyProfileAttributes_args :: T.Protocol p => p -> UpdateBuddyProfileAttributes_args -> P.IO ()
write_UpdateBuddyProfileAttributes_args oprot record = T.writeVal oprot $ from_UpdateBuddyProfileAttributes_args record
encode_UpdateBuddyProfileAttributes_args :: T.StatelessProtocol p => p -> UpdateBuddyProfileAttributes_args -> LBS.ByteString
encode_UpdateBuddyProfileAttributes_args oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileAttributes_args record
to_UpdateBuddyProfileAttributes_args :: T.ThriftVal -> UpdateBuddyProfileAttributes_args
to_UpdateBuddyProfileAttributes_args (T.TStruct fields) = UpdateBuddyProfileAttributes_args{
  updateBuddyProfileAttributes_args_requestId = P.maybe (updateBuddyProfileAttributes_args_requestId default_UpdateBuddyProfileAttributes_args) (\(_,_val2068) -> (case _val2068 of {T.TString _val2069 -> E.decodeUtf8 _val2069; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  updateBuddyProfileAttributes_args_attributes = P.maybe (updateBuddyProfileAttributes_args_attributes default_UpdateBuddyProfileAttributes_args) (\(_,_val2068) -> (case _val2068 of {T.TMap _ _ _val2070 -> (Map.fromList $ P.map (\(_k2072,_v2071) -> ((case _k2072 of {T.TString _val2073 -> E.decodeUtf8 _val2073; _ -> P.error "wrong type"}),(case _v2071 of {T.TString _val2074 -> E.decodeUtf8 _val2074; _ -> P.error "wrong type"}))) _val2070); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddyProfileAttributes_args _ = P.error "not a struct"
read_UpdateBuddyProfileAttributes_args :: T.Protocol p => p -> P.IO UpdateBuddyProfileAttributes_args
read_UpdateBuddyProfileAttributes_args iprot = to_UpdateBuddyProfileAttributes_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributes_args)
decode_UpdateBuddyProfileAttributes_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileAttributes_args
decode_UpdateBuddyProfileAttributes_args iprot bs = to_UpdateBuddyProfileAttributes_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributes_args) bs
typemap_UpdateBuddyProfileAttributes_args :: T.TypeMap
typemap_UpdateBuddyProfileAttributes_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("attributes",(T.T_MAP T.T_STRING T.T_STRING)))]
default_UpdateBuddyProfileAttributes_args :: UpdateBuddyProfileAttributes_args
default_UpdateBuddyProfileAttributes_args = UpdateBuddyProfileAttributes_args{
  updateBuddyProfileAttributes_args_requestId = "",
  updateBuddyProfileAttributes_args_attributes = Map.empty}
data UpdateBuddyProfileAttributes_result = UpdateBuddyProfileAttributes_result  { updateBuddyProfileAttributes_result_success :: UpdateBuddyProfileResult
  , updateBuddyProfileAttributes_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileAttributes_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileAttributes_result_success record   `H.hashWithSalt` updateBuddyProfileAttributes_result_e record  
instance QC.Arbitrary UpdateBuddyProfileAttributes_result where 
  arbitrary = M.liftM UpdateBuddyProfileAttributes_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileAttributes_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileAttributes_result{updateBuddyProfileAttributes_result_success = updateBuddyProfileAttributes_result_success obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributes_result{updateBuddyProfileAttributes_result_success = updateBuddyProfileAttributes_result_success obj}
    , if obj == default_UpdateBuddyProfileAttributes_result{updateBuddyProfileAttributes_result_e = updateBuddyProfileAttributes_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributes_result{updateBuddyProfileAttributes_result_e = updateBuddyProfileAttributes_result_e obj}
    ]
from_UpdateBuddyProfileAttributes_result :: UpdateBuddyProfileAttributes_result -> T.ThriftVal
from_UpdateBuddyProfileAttributes_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v2077 -> (1, ("e",from_TalkException _v2077))) <$> updateBuddyProfileAttributes_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v2077 -> P.Just (0, ("success",from_UpdateBuddyProfileResult _v2077))) $ updateBuddyProfileAttributes_result_success record
    , (\_v2077 -> (1, ("e",from_TalkException _v2077))) <$> updateBuddyProfileAttributes_result_e record
    ]
    )
write_UpdateBuddyProfileAttributes_result :: T.Protocol p => p -> UpdateBuddyProfileAttributes_result -> P.IO ()
write_UpdateBuddyProfileAttributes_result oprot record = T.writeVal oprot $ from_UpdateBuddyProfileAttributes_result record
encode_UpdateBuddyProfileAttributes_result :: T.StatelessProtocol p => p -> UpdateBuddyProfileAttributes_result -> LBS.ByteString
encode_UpdateBuddyProfileAttributes_result oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileAttributes_result record
to_UpdateBuddyProfileAttributes_result :: T.ThriftVal -> UpdateBuddyProfileAttributes_result
to_UpdateBuddyProfileAttributes_result (T.TStruct fields) = UpdateBuddyProfileAttributes_result{
  updateBuddyProfileAttributes_result_success = P.maybe (updateBuddyProfileAttributes_result_success default_UpdateBuddyProfileAttributes_result) (\(_,_val2079) -> (case _val2079 of {T.TStruct _val2080 -> (to_UpdateBuddyProfileResult (T.TStruct _val2080)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  updateBuddyProfileAttributes_result_e = P.maybe (P.Nothing) (\(_,_val2079) -> P.Just (case _val2079 of {T.TStruct _val2081 -> (to_TalkException (T.TStruct _val2081)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddyProfileAttributes_result _ = P.error "not a struct"
read_UpdateBuddyProfileAttributes_result :: T.Protocol p => p -> P.IO UpdateBuddyProfileAttributes_result
read_UpdateBuddyProfileAttributes_result iprot = to_UpdateBuddyProfileAttributes_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributes_result)
decode_UpdateBuddyProfileAttributes_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileAttributes_result
decode_UpdateBuddyProfileAttributes_result iprot bs = to_UpdateBuddyProfileAttributes_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributes_result) bs
typemap_UpdateBuddyProfileAttributes_result :: T.TypeMap
typemap_UpdateBuddyProfileAttributes_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_UpdateBuddyProfileResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddyProfileAttributes_result :: UpdateBuddyProfileAttributes_result
default_UpdateBuddyProfileAttributes_result = UpdateBuddyProfileAttributes_result{
  updateBuddyProfileAttributes_result_success = default_UpdateBuddyProfileResult,
  updateBuddyProfileAttributes_result_e = P.Nothing}
data UpdateBuddyProfileAttributesAsync_args = UpdateBuddyProfileAttributesAsync_args  { updateBuddyProfileAttributesAsync_args_requestId :: LT.Text
  , updateBuddyProfileAttributesAsync_args_attributes :: (Map.HashMap LT.Text LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileAttributesAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileAttributesAsync_args_requestId record   `H.hashWithSalt` updateBuddyProfileAttributesAsync_args_attributes record  
instance QC.Arbitrary UpdateBuddyProfileAttributesAsync_args where 
  arbitrary = M.liftM UpdateBuddyProfileAttributesAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileAttributesAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileAttributesAsync_args{updateBuddyProfileAttributesAsync_args_requestId = updateBuddyProfileAttributesAsync_args_requestId obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributesAsync_args{updateBuddyProfileAttributesAsync_args_requestId = updateBuddyProfileAttributesAsync_args_requestId obj}
    , if obj == default_UpdateBuddyProfileAttributesAsync_args{updateBuddyProfileAttributesAsync_args_attributes = updateBuddyProfileAttributesAsync_args_attributes obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributesAsync_args{updateBuddyProfileAttributesAsync_args_attributes = updateBuddyProfileAttributesAsync_args_attributes obj}
    ]
from_UpdateBuddyProfileAttributesAsync_args :: UpdateBuddyProfileAttributesAsync_args -> T.ThriftVal
from_UpdateBuddyProfileAttributesAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2084 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v2084))) $ updateBuddyProfileAttributesAsync_args_requestId record
  , (\_v2084 -> P.Just (2, ("attributes",T.TMap T.T_STRING T.T_STRING $ P.map (\(_k2085,_v2086) -> (T.TString $ E.encodeUtf8 _k2085, T.TString $ E.encodeUtf8 _v2086)) $ Map.toList _v2084))) $ updateBuddyProfileAttributesAsync_args_attributes record
  ]
write_UpdateBuddyProfileAttributesAsync_args :: T.Protocol p => p -> UpdateBuddyProfileAttributesAsync_args -> P.IO ()
write_UpdateBuddyProfileAttributesAsync_args oprot record = T.writeVal oprot $ from_UpdateBuddyProfileAttributesAsync_args record
encode_UpdateBuddyProfileAttributesAsync_args :: T.StatelessProtocol p => p -> UpdateBuddyProfileAttributesAsync_args -> LBS.ByteString
encode_UpdateBuddyProfileAttributesAsync_args oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileAttributesAsync_args record
to_UpdateBuddyProfileAttributesAsync_args :: T.ThriftVal -> UpdateBuddyProfileAttributesAsync_args
to_UpdateBuddyProfileAttributesAsync_args (T.TStruct fields) = UpdateBuddyProfileAttributesAsync_args{
  updateBuddyProfileAttributesAsync_args_requestId = P.maybe (updateBuddyProfileAttributesAsync_args_requestId default_UpdateBuddyProfileAttributesAsync_args) (\(_,_val2088) -> (case _val2088 of {T.TString _val2089 -> E.decodeUtf8 _val2089; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  updateBuddyProfileAttributesAsync_args_attributes = P.maybe (updateBuddyProfileAttributesAsync_args_attributes default_UpdateBuddyProfileAttributesAsync_args) (\(_,_val2088) -> (case _val2088 of {T.TMap _ _ _val2090 -> (Map.fromList $ P.map (\(_k2092,_v2091) -> ((case _k2092 of {T.TString _val2093 -> E.decodeUtf8 _val2093; _ -> P.error "wrong type"}),(case _v2091 of {T.TString _val2094 -> E.decodeUtf8 _val2094; _ -> P.error "wrong type"}))) _val2090); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddyProfileAttributesAsync_args _ = P.error "not a struct"
read_UpdateBuddyProfileAttributesAsync_args :: T.Protocol p => p -> P.IO UpdateBuddyProfileAttributesAsync_args
read_UpdateBuddyProfileAttributesAsync_args iprot = to_UpdateBuddyProfileAttributesAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributesAsync_args)
decode_UpdateBuddyProfileAttributesAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileAttributesAsync_args
decode_UpdateBuddyProfileAttributesAsync_args iprot bs = to_UpdateBuddyProfileAttributesAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributesAsync_args) bs
typemap_UpdateBuddyProfileAttributesAsync_args :: T.TypeMap
typemap_UpdateBuddyProfileAttributesAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("attributes",(T.T_MAP T.T_STRING T.T_STRING)))]
default_UpdateBuddyProfileAttributesAsync_args :: UpdateBuddyProfileAttributesAsync_args
default_UpdateBuddyProfileAttributesAsync_args = UpdateBuddyProfileAttributesAsync_args{
  updateBuddyProfileAttributesAsync_args_requestId = "",
  updateBuddyProfileAttributesAsync_args_attributes = Map.empty}
data UpdateBuddyProfileAttributesAsync_result = UpdateBuddyProfileAttributesAsync_result  { updateBuddyProfileAttributesAsync_result_success :: LT.Text
  , updateBuddyProfileAttributesAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileAttributesAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileAttributesAsync_result_success record   `H.hashWithSalt` updateBuddyProfileAttributesAsync_result_e record  
instance QC.Arbitrary UpdateBuddyProfileAttributesAsync_result where 
  arbitrary = M.liftM UpdateBuddyProfileAttributesAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileAttributesAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileAttributesAsync_result{updateBuddyProfileAttributesAsync_result_success = updateBuddyProfileAttributesAsync_result_success obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributesAsync_result{updateBuddyProfileAttributesAsync_result_success = updateBuddyProfileAttributesAsync_result_success obj}
    , if obj == default_UpdateBuddyProfileAttributesAsync_result{updateBuddyProfileAttributesAsync_result_e = updateBuddyProfileAttributesAsync_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileAttributesAsync_result{updateBuddyProfileAttributesAsync_result_e = updateBuddyProfileAttributesAsync_result_e obj}
    ]
from_UpdateBuddyProfileAttributesAsync_result :: UpdateBuddyProfileAttributesAsync_result -> T.ThriftVal
from_UpdateBuddyProfileAttributesAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v2097 -> (1, ("e",from_TalkException _v2097))) <$> updateBuddyProfileAttributesAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v2097 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v2097))) $ updateBuddyProfileAttributesAsync_result_success record
    , (\_v2097 -> (1, ("e",from_TalkException _v2097))) <$> updateBuddyProfileAttributesAsync_result_e record
    ]
    )
write_UpdateBuddyProfileAttributesAsync_result :: T.Protocol p => p -> UpdateBuddyProfileAttributesAsync_result -> P.IO ()
write_UpdateBuddyProfileAttributesAsync_result oprot record = T.writeVal oprot $ from_UpdateBuddyProfileAttributesAsync_result record
encode_UpdateBuddyProfileAttributesAsync_result :: T.StatelessProtocol p => p -> UpdateBuddyProfileAttributesAsync_result -> LBS.ByteString
encode_UpdateBuddyProfileAttributesAsync_result oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileAttributesAsync_result record
to_UpdateBuddyProfileAttributesAsync_result :: T.ThriftVal -> UpdateBuddyProfileAttributesAsync_result
to_UpdateBuddyProfileAttributesAsync_result (T.TStruct fields) = UpdateBuddyProfileAttributesAsync_result{
  updateBuddyProfileAttributesAsync_result_success = P.maybe (updateBuddyProfileAttributesAsync_result_success default_UpdateBuddyProfileAttributesAsync_result) (\(_,_val2099) -> (case _val2099 of {T.TString _val2100 -> E.decodeUtf8 _val2100; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  updateBuddyProfileAttributesAsync_result_e = P.maybe (P.Nothing) (\(_,_val2099) -> P.Just (case _val2099 of {T.TStruct _val2101 -> (to_TalkException (T.TStruct _val2101)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddyProfileAttributesAsync_result _ = P.error "not a struct"
read_UpdateBuddyProfileAttributesAsync_result :: T.Protocol p => p -> P.IO UpdateBuddyProfileAttributesAsync_result
read_UpdateBuddyProfileAttributesAsync_result iprot = to_UpdateBuddyProfileAttributesAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributesAsync_result)
decode_UpdateBuddyProfileAttributesAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileAttributesAsync_result
decode_UpdateBuddyProfileAttributesAsync_result iprot bs = to_UpdateBuddyProfileAttributesAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileAttributesAsync_result) bs
typemap_UpdateBuddyProfileAttributesAsync_result :: T.TypeMap
typemap_UpdateBuddyProfileAttributesAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddyProfileAttributesAsync_result :: UpdateBuddyProfileAttributesAsync_result
default_UpdateBuddyProfileAttributesAsync_result = UpdateBuddyProfileAttributesAsync_result{
  updateBuddyProfileAttributesAsync_result_success = "",
  updateBuddyProfileAttributesAsync_result_e = P.Nothing}
data UpdateBuddyProfileImage_args = UpdateBuddyProfileImage_args  { updateBuddyProfileImage_args_requestId :: LT.Text
  , updateBuddyProfileImage_args_image :: LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileImage_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileImage_args_requestId record   `H.hashWithSalt` updateBuddyProfileImage_args_image record  
instance QC.Arbitrary UpdateBuddyProfileImage_args where 
  arbitrary = M.liftM UpdateBuddyProfileImage_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileImage_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileImage_args{updateBuddyProfileImage_args_requestId = updateBuddyProfileImage_args_requestId obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImage_args{updateBuddyProfileImage_args_requestId = updateBuddyProfileImage_args_requestId obj}
    , if obj == default_UpdateBuddyProfileImage_args{updateBuddyProfileImage_args_image = updateBuddyProfileImage_args_image obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImage_args{updateBuddyProfileImage_args_image = updateBuddyProfileImage_args_image obj}
    ]
from_UpdateBuddyProfileImage_args :: UpdateBuddyProfileImage_args -> T.ThriftVal
from_UpdateBuddyProfileImage_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2104 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v2104))) $ updateBuddyProfileImage_args_requestId record
  , (\_v2104 -> P.Just (2, ("image",T.TBinary _v2104))) $ updateBuddyProfileImage_args_image record
  ]
write_UpdateBuddyProfileImage_args :: T.Protocol p => p -> UpdateBuddyProfileImage_args -> P.IO ()
write_UpdateBuddyProfileImage_args oprot record = T.writeVal oprot $ from_UpdateBuddyProfileImage_args record
encode_UpdateBuddyProfileImage_args :: T.StatelessProtocol p => p -> UpdateBuddyProfileImage_args -> LBS.ByteString
encode_UpdateBuddyProfileImage_args oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileImage_args record
to_UpdateBuddyProfileImage_args :: T.ThriftVal -> UpdateBuddyProfileImage_args
to_UpdateBuddyProfileImage_args (T.TStruct fields) = UpdateBuddyProfileImage_args{
  updateBuddyProfileImage_args_requestId = P.maybe (updateBuddyProfileImage_args_requestId default_UpdateBuddyProfileImage_args) (\(_,_val2106) -> (case _val2106 of {T.TString _val2107 -> E.decodeUtf8 _val2107; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  updateBuddyProfileImage_args_image = P.maybe (updateBuddyProfileImage_args_image default_UpdateBuddyProfileImage_args) (\(_,_val2106) -> (case _val2106 of {T.TBinary _val2108 -> _val2108; T.TString _val2108 -> _val2108; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddyProfileImage_args _ = P.error "not a struct"
read_UpdateBuddyProfileImage_args :: T.Protocol p => p -> P.IO UpdateBuddyProfileImage_args
read_UpdateBuddyProfileImage_args iprot = to_UpdateBuddyProfileImage_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImage_args)
decode_UpdateBuddyProfileImage_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileImage_args
decode_UpdateBuddyProfileImage_args iprot bs = to_UpdateBuddyProfileImage_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImage_args) bs
typemap_UpdateBuddyProfileImage_args :: T.TypeMap
typemap_UpdateBuddyProfileImage_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("image",T.T_BINARY))]
default_UpdateBuddyProfileImage_args :: UpdateBuddyProfileImage_args
default_UpdateBuddyProfileImage_args = UpdateBuddyProfileImage_args{
  updateBuddyProfileImage_args_requestId = "",
  updateBuddyProfileImage_args_image = ""}
data UpdateBuddyProfileImage_result = UpdateBuddyProfileImage_result  { updateBuddyProfileImage_result_success :: UpdateBuddyProfileResult
  , updateBuddyProfileImage_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileImage_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileImage_result_success record   `H.hashWithSalt` updateBuddyProfileImage_result_e record  
instance QC.Arbitrary UpdateBuddyProfileImage_result where 
  arbitrary = M.liftM UpdateBuddyProfileImage_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileImage_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileImage_result{updateBuddyProfileImage_result_success = updateBuddyProfileImage_result_success obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImage_result{updateBuddyProfileImage_result_success = updateBuddyProfileImage_result_success obj}
    , if obj == default_UpdateBuddyProfileImage_result{updateBuddyProfileImage_result_e = updateBuddyProfileImage_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImage_result{updateBuddyProfileImage_result_e = updateBuddyProfileImage_result_e obj}
    ]
from_UpdateBuddyProfileImage_result :: UpdateBuddyProfileImage_result -> T.ThriftVal
from_UpdateBuddyProfileImage_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v2111 -> (1, ("e",from_TalkException _v2111))) <$> updateBuddyProfileImage_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v2111 -> P.Just (0, ("success",from_UpdateBuddyProfileResult _v2111))) $ updateBuddyProfileImage_result_success record
    , (\_v2111 -> (1, ("e",from_TalkException _v2111))) <$> updateBuddyProfileImage_result_e record
    ]
    )
write_UpdateBuddyProfileImage_result :: T.Protocol p => p -> UpdateBuddyProfileImage_result -> P.IO ()
write_UpdateBuddyProfileImage_result oprot record = T.writeVal oprot $ from_UpdateBuddyProfileImage_result record
encode_UpdateBuddyProfileImage_result :: T.StatelessProtocol p => p -> UpdateBuddyProfileImage_result -> LBS.ByteString
encode_UpdateBuddyProfileImage_result oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileImage_result record
to_UpdateBuddyProfileImage_result :: T.ThriftVal -> UpdateBuddyProfileImage_result
to_UpdateBuddyProfileImage_result (T.TStruct fields) = UpdateBuddyProfileImage_result{
  updateBuddyProfileImage_result_success = P.maybe (updateBuddyProfileImage_result_success default_UpdateBuddyProfileImage_result) (\(_,_val2113) -> (case _val2113 of {T.TStruct _val2114 -> (to_UpdateBuddyProfileResult (T.TStruct _val2114)); _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  updateBuddyProfileImage_result_e = P.maybe (P.Nothing) (\(_,_val2113) -> P.Just (case _val2113 of {T.TStruct _val2115 -> (to_TalkException (T.TStruct _val2115)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddyProfileImage_result _ = P.error "not a struct"
read_UpdateBuddyProfileImage_result :: T.Protocol p => p -> P.IO UpdateBuddyProfileImage_result
read_UpdateBuddyProfileImage_result iprot = to_UpdateBuddyProfileImage_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImage_result)
decode_UpdateBuddyProfileImage_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileImage_result
decode_UpdateBuddyProfileImage_result iprot bs = to_UpdateBuddyProfileImage_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImage_result) bs
typemap_UpdateBuddyProfileImage_result :: T.TypeMap
typemap_UpdateBuddyProfileImage_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_UpdateBuddyProfileResult))),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddyProfileImage_result :: UpdateBuddyProfileImage_result
default_UpdateBuddyProfileImage_result = UpdateBuddyProfileImage_result{
  updateBuddyProfileImage_result_success = default_UpdateBuddyProfileResult,
  updateBuddyProfileImage_result_e = P.Nothing}
data UpdateBuddyProfileImageAsync_args = UpdateBuddyProfileImageAsync_args  { updateBuddyProfileImageAsync_args_requestId :: LT.Text
  , updateBuddyProfileImageAsync_args_image :: LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileImageAsync_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileImageAsync_args_requestId record   `H.hashWithSalt` updateBuddyProfileImageAsync_args_image record  
instance QC.Arbitrary UpdateBuddyProfileImageAsync_args where 
  arbitrary = M.liftM UpdateBuddyProfileImageAsync_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileImageAsync_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileImageAsync_args{updateBuddyProfileImageAsync_args_requestId = updateBuddyProfileImageAsync_args_requestId obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImageAsync_args{updateBuddyProfileImageAsync_args_requestId = updateBuddyProfileImageAsync_args_requestId obj}
    , if obj == default_UpdateBuddyProfileImageAsync_args{updateBuddyProfileImageAsync_args_image = updateBuddyProfileImageAsync_args_image obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImageAsync_args{updateBuddyProfileImageAsync_args_image = updateBuddyProfileImageAsync_args_image obj}
    ]
from_UpdateBuddyProfileImageAsync_args :: UpdateBuddyProfileImageAsync_args -> T.ThriftVal
from_UpdateBuddyProfileImageAsync_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2118 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v2118))) $ updateBuddyProfileImageAsync_args_requestId record
  , (\_v2118 -> P.Just (2, ("image",T.TBinary _v2118))) $ updateBuddyProfileImageAsync_args_image record
  ]
write_UpdateBuddyProfileImageAsync_args :: T.Protocol p => p -> UpdateBuddyProfileImageAsync_args -> P.IO ()
write_UpdateBuddyProfileImageAsync_args oprot record = T.writeVal oprot $ from_UpdateBuddyProfileImageAsync_args record
encode_UpdateBuddyProfileImageAsync_args :: T.StatelessProtocol p => p -> UpdateBuddyProfileImageAsync_args -> LBS.ByteString
encode_UpdateBuddyProfileImageAsync_args oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileImageAsync_args record
to_UpdateBuddyProfileImageAsync_args :: T.ThriftVal -> UpdateBuddyProfileImageAsync_args
to_UpdateBuddyProfileImageAsync_args (T.TStruct fields) = UpdateBuddyProfileImageAsync_args{
  updateBuddyProfileImageAsync_args_requestId = P.maybe (updateBuddyProfileImageAsync_args_requestId default_UpdateBuddyProfileImageAsync_args) (\(_,_val2120) -> (case _val2120 of {T.TString _val2121 -> E.decodeUtf8 _val2121; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  updateBuddyProfileImageAsync_args_image = P.maybe (updateBuddyProfileImageAsync_args_image default_UpdateBuddyProfileImageAsync_args) (\(_,_val2120) -> (case _val2120 of {T.TBinary _val2122 -> _val2122; T.TString _val2122 -> _val2122; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddyProfileImageAsync_args _ = P.error "not a struct"
read_UpdateBuddyProfileImageAsync_args :: T.Protocol p => p -> P.IO UpdateBuddyProfileImageAsync_args
read_UpdateBuddyProfileImageAsync_args iprot = to_UpdateBuddyProfileImageAsync_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImageAsync_args)
decode_UpdateBuddyProfileImageAsync_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileImageAsync_args
decode_UpdateBuddyProfileImageAsync_args iprot bs = to_UpdateBuddyProfileImageAsync_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImageAsync_args) bs
typemap_UpdateBuddyProfileImageAsync_args :: T.TypeMap
typemap_UpdateBuddyProfileImageAsync_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("image",T.T_BINARY))]
default_UpdateBuddyProfileImageAsync_args :: UpdateBuddyProfileImageAsync_args
default_UpdateBuddyProfileImageAsync_args = UpdateBuddyProfileImageAsync_args{
  updateBuddyProfileImageAsync_args_requestId = "",
  updateBuddyProfileImageAsync_args_image = ""}
data UpdateBuddyProfileImageAsync_result = UpdateBuddyProfileImageAsync_result  { updateBuddyProfileImageAsync_result_success :: LT.Text
  , updateBuddyProfileImageAsync_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddyProfileImageAsync_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddyProfileImageAsync_result_success record   `H.hashWithSalt` updateBuddyProfileImageAsync_result_e record  
instance QC.Arbitrary UpdateBuddyProfileImageAsync_result where 
  arbitrary = M.liftM UpdateBuddyProfileImageAsync_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddyProfileImageAsync_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddyProfileImageAsync_result{updateBuddyProfileImageAsync_result_success = updateBuddyProfileImageAsync_result_success obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImageAsync_result{updateBuddyProfileImageAsync_result_success = updateBuddyProfileImageAsync_result_success obj}
    , if obj == default_UpdateBuddyProfileImageAsync_result{updateBuddyProfileImageAsync_result_e = updateBuddyProfileImageAsync_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddyProfileImageAsync_result{updateBuddyProfileImageAsync_result_e = updateBuddyProfileImageAsync_result_e obj}
    ]
from_UpdateBuddyProfileImageAsync_result :: UpdateBuddyProfileImageAsync_result -> T.ThriftVal
from_UpdateBuddyProfileImageAsync_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v2125 -> (1, ("e",from_TalkException _v2125))) <$> updateBuddyProfileImageAsync_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v2125 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v2125))) $ updateBuddyProfileImageAsync_result_success record
    , (\_v2125 -> (1, ("e",from_TalkException _v2125))) <$> updateBuddyProfileImageAsync_result_e record
    ]
    )
write_UpdateBuddyProfileImageAsync_result :: T.Protocol p => p -> UpdateBuddyProfileImageAsync_result -> P.IO ()
write_UpdateBuddyProfileImageAsync_result oprot record = T.writeVal oprot $ from_UpdateBuddyProfileImageAsync_result record
encode_UpdateBuddyProfileImageAsync_result :: T.StatelessProtocol p => p -> UpdateBuddyProfileImageAsync_result -> LBS.ByteString
encode_UpdateBuddyProfileImageAsync_result oprot record = T.serializeVal oprot $ from_UpdateBuddyProfileImageAsync_result record
to_UpdateBuddyProfileImageAsync_result :: T.ThriftVal -> UpdateBuddyProfileImageAsync_result
to_UpdateBuddyProfileImageAsync_result (T.TStruct fields) = UpdateBuddyProfileImageAsync_result{
  updateBuddyProfileImageAsync_result_success = P.maybe (updateBuddyProfileImageAsync_result_success default_UpdateBuddyProfileImageAsync_result) (\(_,_val2127) -> (case _val2127 of {T.TString _val2128 -> E.decodeUtf8 _val2128; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  updateBuddyProfileImageAsync_result_e = P.maybe (P.Nothing) (\(_,_val2127) -> P.Just (case _val2127 of {T.TStruct _val2129 -> (to_TalkException (T.TStruct _val2129)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddyProfileImageAsync_result _ = P.error "not a struct"
read_UpdateBuddyProfileImageAsync_result :: T.Protocol p => p -> P.IO UpdateBuddyProfileImageAsync_result
read_UpdateBuddyProfileImageAsync_result iprot = to_UpdateBuddyProfileImageAsync_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImageAsync_result)
decode_UpdateBuddyProfileImageAsync_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddyProfileImageAsync_result
decode_UpdateBuddyProfileImageAsync_result iprot bs = to_UpdateBuddyProfileImageAsync_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddyProfileImageAsync_result) bs
typemap_UpdateBuddyProfileImageAsync_result :: T.TypeMap
typemap_UpdateBuddyProfileImageAsync_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddyProfileImageAsync_result :: UpdateBuddyProfileImageAsync_result
default_UpdateBuddyProfileImageAsync_result = UpdateBuddyProfileImageAsync_result{
  updateBuddyProfileImageAsync_result_success = "",
  updateBuddyProfileImageAsync_result_e = P.Nothing}
data UpdateBuddySearchId_args = UpdateBuddySearchId_args  { updateBuddySearchId_args_requestId :: LT.Text
  , updateBuddySearchId_args_searchId :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddySearchId_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddySearchId_args_requestId record   `H.hashWithSalt` updateBuddySearchId_args_searchId record  
instance QC.Arbitrary UpdateBuddySearchId_args where 
  arbitrary = M.liftM UpdateBuddySearchId_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UpdateBuddySearchId_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddySearchId_args{updateBuddySearchId_args_requestId = updateBuddySearchId_args_requestId obj} then P.Nothing else P.Just $ default_UpdateBuddySearchId_args{updateBuddySearchId_args_requestId = updateBuddySearchId_args_requestId obj}
    , if obj == default_UpdateBuddySearchId_args{updateBuddySearchId_args_searchId = updateBuddySearchId_args_searchId obj} then P.Nothing else P.Just $ default_UpdateBuddySearchId_args{updateBuddySearchId_args_searchId = updateBuddySearchId_args_searchId obj}
    ]
from_UpdateBuddySearchId_args :: UpdateBuddySearchId_args -> T.ThriftVal
from_UpdateBuddySearchId_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2132 -> P.Just (1, ("requestId",T.TString $ E.encodeUtf8 _v2132))) $ updateBuddySearchId_args_requestId record
  , (\_v2132 -> P.Just (2, ("searchId",T.TString $ E.encodeUtf8 _v2132))) $ updateBuddySearchId_args_searchId record
  ]
write_UpdateBuddySearchId_args :: T.Protocol p => p -> UpdateBuddySearchId_args -> P.IO ()
write_UpdateBuddySearchId_args oprot record = T.writeVal oprot $ from_UpdateBuddySearchId_args record
encode_UpdateBuddySearchId_args :: T.StatelessProtocol p => p -> UpdateBuddySearchId_args -> LBS.ByteString
encode_UpdateBuddySearchId_args oprot record = T.serializeVal oprot $ from_UpdateBuddySearchId_args record
to_UpdateBuddySearchId_args :: T.ThriftVal -> UpdateBuddySearchId_args
to_UpdateBuddySearchId_args (T.TStruct fields) = UpdateBuddySearchId_args{
  updateBuddySearchId_args_requestId = P.maybe (updateBuddySearchId_args_requestId default_UpdateBuddySearchId_args) (\(_,_val2134) -> (case _val2134 of {T.TString _val2135 -> E.decodeUtf8 _val2135; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  updateBuddySearchId_args_searchId = P.maybe (updateBuddySearchId_args_searchId default_UpdateBuddySearchId_args) (\(_,_val2134) -> (case _val2134 of {T.TString _val2136 -> E.decodeUtf8 _val2136; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddySearchId_args _ = P.error "not a struct"
read_UpdateBuddySearchId_args :: T.Protocol p => p -> P.IO UpdateBuddySearchId_args
read_UpdateBuddySearchId_args iprot = to_UpdateBuddySearchId_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddySearchId_args)
decode_UpdateBuddySearchId_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddySearchId_args
decode_UpdateBuddySearchId_args iprot bs = to_UpdateBuddySearchId_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddySearchId_args) bs
typemap_UpdateBuddySearchId_args :: T.TypeMap
typemap_UpdateBuddySearchId_args = Map.fromList [(1,("requestId",T.T_STRING)),(2,("searchId",T.T_STRING))]
default_UpdateBuddySearchId_args :: UpdateBuddySearchId_args
default_UpdateBuddySearchId_args = UpdateBuddySearchId_args{
  updateBuddySearchId_args_requestId = "",
  updateBuddySearchId_args_searchId = ""}
data UpdateBuddySearchId_result = UpdateBuddySearchId_result  { updateBuddySearchId_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddySearchId_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddySearchId_result_e record  
instance QC.Arbitrary UpdateBuddySearchId_result where 
  arbitrary = M.liftM UpdateBuddySearchId_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddySearchId_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddySearchId_result{updateBuddySearchId_result_e = updateBuddySearchId_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddySearchId_result{updateBuddySearchId_result_e = updateBuddySearchId_result_e obj}
    ]
from_UpdateBuddySearchId_result :: UpdateBuddySearchId_result -> T.ThriftVal
from_UpdateBuddySearchId_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v2139 -> (1, ("e",from_TalkException _v2139))) <$> updateBuddySearchId_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v2139 -> (1, ("e",from_TalkException _v2139))) <$> updateBuddySearchId_result_e record
    ]
    )
write_UpdateBuddySearchId_result :: T.Protocol p => p -> UpdateBuddySearchId_result -> P.IO ()
write_UpdateBuddySearchId_result oprot record = T.writeVal oprot $ from_UpdateBuddySearchId_result record
encode_UpdateBuddySearchId_result :: T.StatelessProtocol p => p -> UpdateBuddySearchId_result -> LBS.ByteString
encode_UpdateBuddySearchId_result oprot record = T.serializeVal oprot $ from_UpdateBuddySearchId_result record
to_UpdateBuddySearchId_result :: T.ThriftVal -> UpdateBuddySearchId_result
to_UpdateBuddySearchId_result (T.TStruct fields) = UpdateBuddySearchId_result{
  updateBuddySearchId_result_e = P.maybe (P.Nothing) (\(_,_val2141) -> P.Just (case _val2141 of {T.TStruct _val2142 -> (to_TalkException (T.TStruct _val2142)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddySearchId_result _ = P.error "not a struct"
read_UpdateBuddySearchId_result :: T.Protocol p => p -> P.IO UpdateBuddySearchId_result
read_UpdateBuddySearchId_result iprot = to_UpdateBuddySearchId_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddySearchId_result)
decode_UpdateBuddySearchId_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddySearchId_result
decode_UpdateBuddySearchId_result iprot bs = to_UpdateBuddySearchId_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddySearchId_result) bs
typemap_UpdateBuddySearchId_result :: T.TypeMap
typemap_UpdateBuddySearchId_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddySearchId_result :: UpdateBuddySearchId_result
default_UpdateBuddySearchId_result = UpdateBuddySearchId_result{
  updateBuddySearchId_result_e = P.Nothing}
data UpdateBuddySettings_args = UpdateBuddySettings_args  { updateBuddySettings_args_settings :: (Map.HashMap LT.Text LT.Text)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddySettings_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddySettings_args_settings record  
instance QC.Arbitrary UpdateBuddySettings_args where 
  arbitrary = M.liftM UpdateBuddySettings_args (QC.arbitrary)
  shrink obj | obj == default_UpdateBuddySettings_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddySettings_args{updateBuddySettings_args_settings = updateBuddySettings_args_settings obj} then P.Nothing else P.Just $ default_UpdateBuddySettings_args{updateBuddySettings_args_settings = updateBuddySettings_args_settings obj}
    ]
from_UpdateBuddySettings_args :: UpdateBuddySettings_args -> T.ThriftVal
from_UpdateBuddySettings_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2145 -> P.Just (2, ("settings",T.TMap T.T_STRING T.T_STRING $ P.map (\(_k2146,_v2147) -> (T.TString $ E.encodeUtf8 _k2146, T.TString $ E.encodeUtf8 _v2147)) $ Map.toList _v2145))) $ updateBuddySettings_args_settings record
  ]
write_UpdateBuddySettings_args :: T.Protocol p => p -> UpdateBuddySettings_args -> P.IO ()
write_UpdateBuddySettings_args oprot record = T.writeVal oprot $ from_UpdateBuddySettings_args record
encode_UpdateBuddySettings_args :: T.StatelessProtocol p => p -> UpdateBuddySettings_args -> LBS.ByteString
encode_UpdateBuddySettings_args oprot record = T.serializeVal oprot $ from_UpdateBuddySettings_args record
to_UpdateBuddySettings_args :: T.ThriftVal -> UpdateBuddySettings_args
to_UpdateBuddySettings_args (T.TStruct fields) = UpdateBuddySettings_args{
  updateBuddySettings_args_settings = P.maybe (updateBuddySettings_args_settings default_UpdateBuddySettings_args) (\(_,_val2149) -> (case _val2149 of {T.TMap _ _ _val2150 -> (Map.fromList $ P.map (\(_k2152,_v2151) -> ((case _k2152 of {T.TString _val2153 -> E.decodeUtf8 _val2153; _ -> P.error "wrong type"}),(case _v2151 of {T.TString _val2154 -> E.decodeUtf8 _val2154; _ -> P.error "wrong type"}))) _val2150); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_UpdateBuddySettings_args _ = P.error "not a struct"
read_UpdateBuddySettings_args :: T.Protocol p => p -> P.IO UpdateBuddySettings_args
read_UpdateBuddySettings_args iprot = to_UpdateBuddySettings_args <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddySettings_args)
decode_UpdateBuddySettings_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddySettings_args
decode_UpdateBuddySettings_args iprot bs = to_UpdateBuddySettings_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddySettings_args) bs
typemap_UpdateBuddySettings_args :: T.TypeMap
typemap_UpdateBuddySettings_args = Map.fromList [(2,("settings",(T.T_MAP T.T_STRING T.T_STRING)))]
default_UpdateBuddySettings_args :: UpdateBuddySettings_args
default_UpdateBuddySettings_args = UpdateBuddySettings_args{
  updateBuddySettings_args_settings = Map.empty}
data UpdateBuddySettings_result = UpdateBuddySettings_result  { updateBuddySettings_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UpdateBuddySettings_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` updateBuddySettings_result_e record  
instance QC.Arbitrary UpdateBuddySettings_result where 
  arbitrary = M.liftM UpdateBuddySettings_result (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UpdateBuddySettings_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UpdateBuddySettings_result{updateBuddySettings_result_e = updateBuddySettings_result_e obj} then P.Nothing else P.Just $ default_UpdateBuddySettings_result{updateBuddySettings_result_e = updateBuddySettings_result_e obj}
    ]
from_UpdateBuddySettings_result :: UpdateBuddySettings_result -> T.ThriftVal
from_UpdateBuddySettings_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v2157 -> (1, ("e",from_TalkException _v2157))) <$> updateBuddySettings_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v2157 -> (1, ("e",from_TalkException _v2157))) <$> updateBuddySettings_result_e record
    ]
    )
write_UpdateBuddySettings_result :: T.Protocol p => p -> UpdateBuddySettings_result -> P.IO ()
write_UpdateBuddySettings_result oprot record = T.writeVal oprot $ from_UpdateBuddySettings_result record
encode_UpdateBuddySettings_result :: T.StatelessProtocol p => p -> UpdateBuddySettings_result -> LBS.ByteString
encode_UpdateBuddySettings_result oprot record = T.serializeVal oprot $ from_UpdateBuddySettings_result record
to_UpdateBuddySettings_result :: T.ThriftVal -> UpdateBuddySettings_result
to_UpdateBuddySettings_result (T.TStruct fields) = UpdateBuddySettings_result{
  updateBuddySettings_result_e = P.maybe (P.Nothing) (\(_,_val2159) -> P.Just (case _val2159 of {T.TStruct _val2160 -> (to_TalkException (T.TStruct _val2160)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UpdateBuddySettings_result _ = P.error "not a struct"
read_UpdateBuddySettings_result :: T.Protocol p => p -> P.IO UpdateBuddySettings_result
read_UpdateBuddySettings_result iprot = to_UpdateBuddySettings_result <$> T.readVal iprot (T.T_STRUCT typemap_UpdateBuddySettings_result)
decode_UpdateBuddySettings_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UpdateBuddySettings_result
decode_UpdateBuddySettings_result iprot bs = to_UpdateBuddySettings_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UpdateBuddySettings_result) bs
typemap_UpdateBuddySettings_result :: T.TypeMap
typemap_UpdateBuddySettings_result = Map.fromList [(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UpdateBuddySettings_result :: UpdateBuddySettings_result
default_UpdateBuddySettings_result = UpdateBuddySettings_result{
  updateBuddySettings_result_e = P.Nothing}
data UploadBuddyContent_args = UploadBuddyContent_args  { uploadBuddyContent_args_contentType :: ContentType
  , uploadBuddyContent_args_content :: LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UploadBuddyContent_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` uploadBuddyContent_args_contentType record   `H.hashWithSalt` uploadBuddyContent_args_content record  
instance QC.Arbitrary UploadBuddyContent_args where 
  arbitrary = M.liftM UploadBuddyContent_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_UploadBuddyContent_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UploadBuddyContent_args{uploadBuddyContent_args_contentType = uploadBuddyContent_args_contentType obj} then P.Nothing else P.Just $ default_UploadBuddyContent_args{uploadBuddyContent_args_contentType = uploadBuddyContent_args_contentType obj}
    , if obj == default_UploadBuddyContent_args{uploadBuddyContent_args_content = uploadBuddyContent_args_content obj} then P.Nothing else P.Just $ default_UploadBuddyContent_args{uploadBuddyContent_args_content = uploadBuddyContent_args_content obj}
    ]
from_UploadBuddyContent_args :: UploadBuddyContent_args -> T.ThriftVal
from_UploadBuddyContent_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2163 -> P.Just (2, ("contentType",T.TI32 $ P.fromIntegral $ P.fromEnum _v2163))) $ uploadBuddyContent_args_contentType record
  , (\_v2163 -> P.Just (3, ("content",T.TBinary _v2163))) $ uploadBuddyContent_args_content record
  ]
write_UploadBuddyContent_args :: T.Protocol p => p -> UploadBuddyContent_args -> P.IO ()
write_UploadBuddyContent_args oprot record = T.writeVal oprot $ from_UploadBuddyContent_args record
encode_UploadBuddyContent_args :: T.StatelessProtocol p => p -> UploadBuddyContent_args -> LBS.ByteString
encode_UploadBuddyContent_args oprot record = T.serializeVal oprot $ from_UploadBuddyContent_args record
to_UploadBuddyContent_args :: T.ThriftVal -> UploadBuddyContent_args
to_UploadBuddyContent_args (T.TStruct fields) = UploadBuddyContent_args{
  uploadBuddyContent_args_contentType = P.maybe (uploadBuddyContent_args_contentType default_UploadBuddyContent_args) (\(_,_val2165) -> (case _val2165 of {T.TI32 _val2166 -> P.toEnum $ P.fromIntegral _val2166; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  uploadBuddyContent_args_content = P.maybe (uploadBuddyContent_args_content default_UploadBuddyContent_args) (\(_,_val2165) -> (case _val2165 of {T.TBinary _val2167 -> _val2167; T.TString _val2167 -> _val2167; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_UploadBuddyContent_args _ = P.error "not a struct"
read_UploadBuddyContent_args :: T.Protocol p => p -> P.IO UploadBuddyContent_args
read_UploadBuddyContent_args iprot = to_UploadBuddyContent_args <$> T.readVal iprot (T.T_STRUCT typemap_UploadBuddyContent_args)
decode_UploadBuddyContent_args :: T.StatelessProtocol p => p -> LBS.ByteString -> UploadBuddyContent_args
decode_UploadBuddyContent_args iprot bs = to_UploadBuddyContent_args $ T.deserializeVal iprot (T.T_STRUCT typemap_UploadBuddyContent_args) bs
typemap_UploadBuddyContent_args :: T.TypeMap
typemap_UploadBuddyContent_args = Map.fromList [(2,("contentType",T.T_I32)),(3,("content",T.T_BINARY))]
default_UploadBuddyContent_args :: UploadBuddyContent_args
default_UploadBuddyContent_args = UploadBuddyContent_args{
  uploadBuddyContent_args_contentType = (P.toEnum 0),
  uploadBuddyContent_args_content = ""}
data UploadBuddyContent_result = UploadBuddyContent_result  { uploadBuddyContent_result_success :: LT.Text
  , uploadBuddyContent_result_e :: P.Maybe TalkException
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable UploadBuddyContent_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` uploadBuddyContent_result_success record   `H.hashWithSalt` uploadBuddyContent_result_e record  
instance QC.Arbitrary UploadBuddyContent_result where 
  arbitrary = M.liftM UploadBuddyContent_result (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_UploadBuddyContent_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_UploadBuddyContent_result{uploadBuddyContent_result_success = uploadBuddyContent_result_success obj} then P.Nothing else P.Just $ default_UploadBuddyContent_result{uploadBuddyContent_result_success = uploadBuddyContent_result_success obj}
    , if obj == default_UploadBuddyContent_result{uploadBuddyContent_result_e = uploadBuddyContent_result_e obj} then P.Nothing else P.Just $ default_UploadBuddyContent_result{uploadBuddyContent_result_e = uploadBuddyContent_result_e obj}
    ]
from_UploadBuddyContent_result :: UploadBuddyContent_result -> T.ThriftVal
from_UploadBuddyContent_result record = T.TStruct $ Map.fromList 
  (let exns = M.catMaybes [ (\_v2170 -> (1, ("e",from_TalkException _v2170))) <$> uploadBuddyContent_result_e record]
  in if P.not (P.null exns) then exns else M.catMaybes
    [ (\_v2170 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v2170))) $ uploadBuddyContent_result_success record
    , (\_v2170 -> (1, ("e",from_TalkException _v2170))) <$> uploadBuddyContent_result_e record
    ]
    )
write_UploadBuddyContent_result :: T.Protocol p => p -> UploadBuddyContent_result -> P.IO ()
write_UploadBuddyContent_result oprot record = T.writeVal oprot $ from_UploadBuddyContent_result record
encode_UploadBuddyContent_result :: T.StatelessProtocol p => p -> UploadBuddyContent_result -> LBS.ByteString
encode_UploadBuddyContent_result oprot record = T.serializeVal oprot $ from_UploadBuddyContent_result record
to_UploadBuddyContent_result :: T.ThriftVal -> UploadBuddyContent_result
to_UploadBuddyContent_result (T.TStruct fields) = UploadBuddyContent_result{
  uploadBuddyContent_result_success = P.maybe (uploadBuddyContent_result_success default_UploadBuddyContent_result) (\(_,_val2172) -> (case _val2172 of {T.TString _val2173 -> E.decodeUtf8 _val2173; _ -> P.error "wrong type"})) (Map.lookup (0) fields),
  uploadBuddyContent_result_e = P.maybe (P.Nothing) (\(_,_val2172) -> P.Just (case _val2172 of {T.TStruct _val2174 -> (to_TalkException (T.TStruct _val2174)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_UploadBuddyContent_result _ = P.error "not a struct"
read_UploadBuddyContent_result :: T.Protocol p => p -> P.IO UploadBuddyContent_result
read_UploadBuddyContent_result iprot = to_UploadBuddyContent_result <$> T.readVal iprot (T.T_STRUCT typemap_UploadBuddyContent_result)
decode_UploadBuddyContent_result :: T.StatelessProtocol p => p -> LBS.ByteString -> UploadBuddyContent_result
decode_UploadBuddyContent_result iprot bs = to_UploadBuddyContent_result $ T.deserializeVal iprot (T.T_STRUCT typemap_UploadBuddyContent_result) bs
typemap_UploadBuddyContent_result :: T.TypeMap
typemap_UploadBuddyContent_result = Map.fromList [(0,("success",T.T_STRING)),(1,("e",(T.T_STRUCT typemap_TalkException)))]
default_UploadBuddyContent_result :: UploadBuddyContent_result
default_UploadBuddyContent_result = UploadBuddyContent_result{
  uploadBuddyContent_result_success = "",
  uploadBuddyContent_result_e = P.Nothing}
process_addBuddyMember (seqid, iprot, oprot, handler) = do
  args <- read_AddBuddyMember_args iprot
  (X.catch
    (X.catch
      (do
        Iface.addBuddyMember handler (addBuddyMember_args_requestId args) (addBuddyMember_args_userMid args)
        let res = default_AddBuddyMember_result
        T.writeMessage oprot ("addBuddyMember", T.M_REPLY, seqid) $
          write_AddBuddyMember_result oprot res)
      (\e  -> do
        let res = default_AddBuddyMember_result{addBuddyMember_result_e = P.Just e}
        T.writeMessage oprot ("addBuddyMember", T.M_REPLY, seqid) $
          write_AddBuddyMember_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("addBuddyMember", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_addBuddyMembers (seqid, iprot, oprot, handler) = do
  args <- read_AddBuddyMembers_args iprot
  (X.catch
    (X.catch
      (do
        Iface.addBuddyMembers handler (addBuddyMembers_args_requestId args) (addBuddyMembers_args_userMids args)
        let res = default_AddBuddyMembers_result
        T.writeMessage oprot ("addBuddyMembers", T.M_REPLY, seqid) $
          write_AddBuddyMembers_result oprot res)
      (\e  -> do
        let res = default_AddBuddyMembers_result{addBuddyMembers_result_e = P.Just e}
        T.writeMessage oprot ("addBuddyMembers", T.M_REPLY, seqid) $
          write_AddBuddyMembers_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("addBuddyMembers", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_blockBuddyMember (seqid, iprot, oprot, handler) = do
  args <- read_BlockBuddyMember_args iprot
  (X.catch
    (X.catch
      (do
        Iface.blockBuddyMember handler (blockBuddyMember_args_requestId args) (blockBuddyMember_args_mid args)
        let res = default_BlockBuddyMember_result
        T.writeMessage oprot ("blockBuddyMember", T.M_REPLY, seqid) $
          write_BlockBuddyMember_result oprot res)
      (\e  -> do
        let res = default_BlockBuddyMember_result{blockBuddyMember_result_e = P.Just e}
        T.writeMessage oprot ("blockBuddyMember", T.M_REPLY, seqid) $
          write_BlockBuddyMember_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("blockBuddyMember", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_commitSendMessagesToAll (seqid, iprot, oprot, handler) = do
  args <- read_CommitSendMessagesToAll_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.commitSendMessagesToAll handler (commitSendMessagesToAll_args_requestIdList args)
        let res = default_CommitSendMessagesToAll_result{commitSendMessagesToAll_result_success = val}
        T.writeMessage oprot ("commitSendMessagesToAll", T.M_REPLY, seqid) $
          write_CommitSendMessagesToAll_result oprot res)
      (\e  -> do
        let res = default_CommitSendMessagesToAll_result{commitSendMessagesToAll_result_e = P.Just e}
        T.writeMessage oprot ("commitSendMessagesToAll", T.M_REPLY, seqid) $
          write_CommitSendMessagesToAll_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("commitSendMessagesToAll", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_commitSendMessagesToMids (seqid, iprot, oprot, handler) = do
  args <- read_CommitSendMessagesToMids_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.commitSendMessagesToMids handler (commitSendMessagesToMids_args_requestIdList args) (commitSendMessagesToMids_args_mids args)
        let res = default_CommitSendMessagesToMids_result{commitSendMessagesToMids_result_success = val}
        T.writeMessage oprot ("commitSendMessagesToMids", T.M_REPLY, seqid) $
          write_CommitSendMessagesToMids_result oprot res)
      (\e  -> do
        let res = default_CommitSendMessagesToMids_result{commitSendMessagesToMids_result_e = P.Just e}
        T.writeMessage oprot ("commitSendMessagesToMids", T.M_REPLY, seqid) $
          write_CommitSendMessagesToMids_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("commitSendMessagesToMids", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_containsBuddyMember (seqid, iprot, oprot, handler) = do
  args <- read_ContainsBuddyMember_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.containsBuddyMember handler (containsBuddyMember_args_requestId args) (containsBuddyMember_args_userMid args)
        let res = default_ContainsBuddyMember_result{containsBuddyMember_result_success = val}
        T.writeMessage oprot ("containsBuddyMember", T.M_REPLY, seqid) $
          write_ContainsBuddyMember_result oprot res)
      (\e  -> do
        let res = default_ContainsBuddyMember_result{containsBuddyMember_result_e = P.Just e}
        T.writeMessage oprot ("containsBuddyMember", T.M_REPLY, seqid) $
          write_ContainsBuddyMember_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("containsBuddyMember", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_downloadMessageContent (seqid, iprot, oprot, handler) = do
  args <- read_DownloadMessageContent_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.downloadMessageContent handler (downloadMessageContent_args_requestId args) (downloadMessageContent_args_messageId args)
        let res = default_DownloadMessageContent_result{downloadMessageContent_result_success = val}
        T.writeMessage oprot ("downloadMessageContent", T.M_REPLY, seqid) $
          write_DownloadMessageContent_result oprot res)
      (\e  -> do
        let res = default_DownloadMessageContent_result{downloadMessageContent_result_e = P.Just e}
        T.writeMessage oprot ("downloadMessageContent", T.M_REPLY, seqid) $
          write_DownloadMessageContent_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("downloadMessageContent", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_downloadMessageContentPreview (seqid, iprot, oprot, handler) = do
  args <- read_DownloadMessageContentPreview_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.downloadMessageContentPreview handler (downloadMessageContentPreview_args_requestId args) (downloadMessageContentPreview_args_messageId args)
        let res = default_DownloadMessageContentPreview_result{downloadMessageContentPreview_result_success = val}
        T.writeMessage oprot ("downloadMessageContentPreview", T.M_REPLY, seqid) $
          write_DownloadMessageContentPreview_result oprot res)
      (\e  -> do
        let res = default_DownloadMessageContentPreview_result{downloadMessageContentPreview_result_e = P.Just e}
        T.writeMessage oprot ("downloadMessageContentPreview", T.M_REPLY, seqid) $
          write_DownloadMessageContentPreview_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("downloadMessageContentPreview", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_downloadProfileImage (seqid, iprot, oprot, handler) = do
  args <- read_DownloadProfileImage_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.downloadProfileImage handler (downloadProfileImage_args_requestId args)
        let res = default_DownloadProfileImage_result{downloadProfileImage_result_success = val}
        T.writeMessage oprot ("downloadProfileImage", T.M_REPLY, seqid) $
          write_DownloadProfileImage_result oprot res)
      (\e  -> do
        let res = default_DownloadProfileImage_result{downloadProfileImage_result_e = P.Just e}
        T.writeMessage oprot ("downloadProfileImage", T.M_REPLY, seqid) $
          write_DownloadProfileImage_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("downloadProfileImage", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_downloadProfileImagePreview (seqid, iprot, oprot, handler) = do
  args <- read_DownloadProfileImagePreview_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.downloadProfileImagePreview handler (downloadProfileImagePreview_args_requestId args)
        let res = default_DownloadProfileImagePreview_result{downloadProfileImagePreview_result_success = val}
        T.writeMessage oprot ("downloadProfileImagePreview", T.M_REPLY, seqid) $
          write_DownloadProfileImagePreview_result oprot res)
      (\e  -> do
        let res = default_DownloadProfileImagePreview_result{downloadProfileImagePreview_result_e = P.Just e}
        T.writeMessage oprot ("downloadProfileImagePreview", T.M_REPLY, seqid) $
          write_DownloadProfileImagePreview_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("downloadProfileImagePreview", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getActiveMemberCountByBuddyMid (seqid, iprot, oprot, handler) = do
  args <- read_GetActiveMemberCountByBuddyMid_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getActiveMemberCountByBuddyMid handler (getActiveMemberCountByBuddyMid_args_buddyMid args)
        let res = default_GetActiveMemberCountByBuddyMid_result{getActiveMemberCountByBuddyMid_result_success = val}
        T.writeMessage oprot ("getActiveMemberCountByBuddyMid", T.M_REPLY, seqid) $
          write_GetActiveMemberCountByBuddyMid_result oprot res)
      (\e  -> do
        let res = default_GetActiveMemberCountByBuddyMid_result{getActiveMemberCountByBuddyMid_result_e = P.Just e}
        T.writeMessage oprot ("getActiveMemberCountByBuddyMid", T.M_REPLY, seqid) $
          write_GetActiveMemberCountByBuddyMid_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getActiveMemberCountByBuddyMid", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getActiveMemberMidsByBuddyMid (seqid, iprot, oprot, handler) = do
  args <- read_GetActiveMemberMidsByBuddyMid_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getActiveMemberMidsByBuddyMid handler (getActiveMemberMidsByBuddyMid_args_buddyMid args)
        let res = default_GetActiveMemberMidsByBuddyMid_result{getActiveMemberMidsByBuddyMid_result_success = val}
        T.writeMessage oprot ("getActiveMemberMidsByBuddyMid", T.M_REPLY, seqid) $
          write_GetActiveMemberMidsByBuddyMid_result oprot res)
      (\e  -> do
        let res = default_GetActiveMemberMidsByBuddyMid_result{getActiveMemberMidsByBuddyMid_result_e = P.Just e}
        T.writeMessage oprot ("getActiveMemberMidsByBuddyMid", T.M_REPLY, seqid) $
          write_GetActiveMemberMidsByBuddyMid_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getActiveMemberMidsByBuddyMid", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getAllBuddyMembers (seqid, iprot, oprot, handler) = do
  args <- read_GetAllBuddyMembers_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getAllBuddyMembers handler
        let res = default_GetAllBuddyMembers_result{getAllBuddyMembers_result_success = val}
        T.writeMessage oprot ("getAllBuddyMembers", T.M_REPLY, seqid) $
          write_GetAllBuddyMembers_result oprot res)
      (\e  -> do
        let res = default_GetAllBuddyMembers_result{getAllBuddyMembers_result_e = P.Just e}
        T.writeMessage oprot ("getAllBuddyMembers", T.M_REPLY, seqid) $
          write_GetAllBuddyMembers_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getAllBuddyMembers", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getBlockedBuddyMembers (seqid, iprot, oprot, handler) = do
  args <- read_GetBlockedBuddyMembers_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getBlockedBuddyMembers handler
        let res = default_GetBlockedBuddyMembers_result{getBlockedBuddyMembers_result_success = val}
        T.writeMessage oprot ("getBlockedBuddyMembers", T.M_REPLY, seqid) $
          write_GetBlockedBuddyMembers_result oprot res)
      (\e  -> do
        let res = default_GetBlockedBuddyMembers_result{getBlockedBuddyMembers_result_e = P.Just e}
        T.writeMessage oprot ("getBlockedBuddyMembers", T.M_REPLY, seqid) $
          write_GetBlockedBuddyMembers_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getBlockedBuddyMembers", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getBlockerCountByBuddyMid (seqid, iprot, oprot, handler) = do
  args <- read_GetBlockerCountByBuddyMid_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getBlockerCountByBuddyMid handler (getBlockerCountByBuddyMid_args_buddyMid args)
        let res = default_GetBlockerCountByBuddyMid_result{getBlockerCountByBuddyMid_result_success = val}
        T.writeMessage oprot ("getBlockerCountByBuddyMid", T.M_REPLY, seqid) $
          write_GetBlockerCountByBuddyMid_result oprot res)
      (\e  -> do
        let res = default_GetBlockerCountByBuddyMid_result{getBlockerCountByBuddyMid_result_e = P.Just e}
        T.writeMessage oprot ("getBlockerCountByBuddyMid", T.M_REPLY, seqid) $
          write_GetBlockerCountByBuddyMid_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getBlockerCountByBuddyMid", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getBuddyDetailByMid (seqid, iprot, oprot, handler) = do
  args <- read_GetBuddyDetailByMid_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getBuddyDetailByMid handler (getBuddyDetailByMid_args_buddyMid args)
        let res = default_GetBuddyDetailByMid_result{getBuddyDetailByMid_result_success = val}
        T.writeMessage oprot ("getBuddyDetailByMid", T.M_REPLY, seqid) $
          write_GetBuddyDetailByMid_result oprot res)
      (\e  -> do
        let res = default_GetBuddyDetailByMid_result{getBuddyDetailByMid_result_e = P.Just e}
        T.writeMessage oprot ("getBuddyDetailByMid", T.M_REPLY, seqid) $
          write_GetBuddyDetailByMid_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getBuddyDetailByMid", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getBuddyProfile (seqid, iprot, oprot, handler) = do
  args <- read_GetBuddyProfile_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getBuddyProfile handler
        let res = default_GetBuddyProfile_result{getBuddyProfile_result_success = val}
        T.writeMessage oprot ("getBuddyProfile", T.M_REPLY, seqid) $
          write_GetBuddyProfile_result oprot res)
      (\e  -> do
        let res = default_GetBuddyProfile_result{getBuddyProfile_result_e = P.Just e}
        T.writeMessage oprot ("getBuddyProfile", T.M_REPLY, seqid) $
          write_GetBuddyProfile_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getBuddyProfile", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getContactTicket (seqid, iprot, oprot, handler) = do
  args <- read_GetContactTicket_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getContactTicket handler
        let res = default_GetContactTicket_result{getContactTicket_result_success = val}
        T.writeMessage oprot ("getContactTicket", T.M_REPLY, seqid) $
          write_GetContactTicket_result oprot res)
      (\e  -> do
        let res = default_GetContactTicket_result{getContactTicket_result_e = P.Just e}
        T.writeMessage oprot ("getContactTicket", T.M_REPLY, seqid) $
          write_GetContactTicket_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getContactTicket", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getMemberCountByBuddyMid (seqid, iprot, oprot, handler) = do
  args <- read_GetMemberCountByBuddyMid_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getMemberCountByBuddyMid handler (getMemberCountByBuddyMid_args_buddyMid args)
        let res = default_GetMemberCountByBuddyMid_result{getMemberCountByBuddyMid_result_success = val}
        T.writeMessage oprot ("getMemberCountByBuddyMid", T.M_REPLY, seqid) $
          write_GetMemberCountByBuddyMid_result oprot res)
      (\e  -> do
        let res = default_GetMemberCountByBuddyMid_result{getMemberCountByBuddyMid_result_e = P.Just e}
        T.writeMessage oprot ("getMemberCountByBuddyMid", T.M_REPLY, seqid) $
          write_GetMemberCountByBuddyMid_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getMemberCountByBuddyMid", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getSendBuddyMessageResult (seqid, iprot, oprot, handler) = do
  args <- read_GetSendBuddyMessageResult_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getSendBuddyMessageResult handler (getSendBuddyMessageResult_args_sendBuddyMessageRequestId args)
        let res = default_GetSendBuddyMessageResult_result{getSendBuddyMessageResult_result_success = val}
        T.writeMessage oprot ("getSendBuddyMessageResult", T.M_REPLY, seqid) $
          write_GetSendBuddyMessageResult_result oprot res)
      (\e  -> do
        let res = default_GetSendBuddyMessageResult_result{getSendBuddyMessageResult_result_e = P.Just e}
        T.writeMessage oprot ("getSendBuddyMessageResult", T.M_REPLY, seqid) $
          write_GetSendBuddyMessageResult_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getSendBuddyMessageResult", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getSetBuddyOnAirResult (seqid, iprot, oprot, handler) = do
  args <- read_GetSetBuddyOnAirResult_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getSetBuddyOnAirResult handler (getSetBuddyOnAirResult_args_setBuddyOnAirRequestId args)
        let res = default_GetSetBuddyOnAirResult_result{getSetBuddyOnAirResult_result_success = val}
        T.writeMessage oprot ("getSetBuddyOnAirResult", T.M_REPLY, seqid) $
          write_GetSetBuddyOnAirResult_result oprot res)
      (\e  -> do
        let res = default_GetSetBuddyOnAirResult_result{getSetBuddyOnAirResult_result_e = P.Just e}
        T.writeMessage oprot ("getSetBuddyOnAirResult", T.M_REPLY, seqid) $
          write_GetSetBuddyOnAirResult_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getSetBuddyOnAirResult", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_getUpdateBuddyProfileResult (seqid, iprot, oprot, handler) = do
  args <- read_GetUpdateBuddyProfileResult_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.getUpdateBuddyProfileResult handler (getUpdateBuddyProfileResult_args_updateBuddyProfileRequestId args)
        let res = default_GetUpdateBuddyProfileResult_result{getUpdateBuddyProfileResult_result_success = val}
        T.writeMessage oprot ("getUpdateBuddyProfileResult", T.M_REPLY, seqid) $
          write_GetUpdateBuddyProfileResult_result oprot res)
      (\e  -> do
        let res = default_GetUpdateBuddyProfileResult_result{getUpdateBuddyProfileResult_result_e = P.Just e}
        T.writeMessage oprot ("getUpdateBuddyProfileResult", T.M_REPLY, seqid) $
          write_GetUpdateBuddyProfileResult_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("getUpdateBuddyProfileResult", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_isBuddyOnAirByMid (seqid, iprot, oprot, handler) = do
  args <- read_IsBuddyOnAirByMid_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.isBuddyOnAirByMid handler (isBuddyOnAirByMid_args_buddyMid args)
        let res = default_IsBuddyOnAirByMid_result{isBuddyOnAirByMid_result_success = val}
        T.writeMessage oprot ("isBuddyOnAirByMid", T.M_REPLY, seqid) $
          write_IsBuddyOnAirByMid_result oprot res)
      (\e  -> do
        let res = default_IsBuddyOnAirByMid_result{isBuddyOnAirByMid_result_e = P.Just e}
        T.writeMessage oprot ("isBuddyOnAirByMid", T.M_REPLY, seqid) $
          write_IsBuddyOnAirByMid_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("isBuddyOnAirByMid", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_linkAndSendBuddyContentMessageToAllAsync (seqid, iprot, oprot, handler) = do
  args <- read_LinkAndSendBuddyContentMessageToAllAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.linkAndSendBuddyContentMessageToAllAsync handler (linkAndSendBuddyContentMessageToAllAsync_args_requestId args) (linkAndSendBuddyContentMessageToAllAsync_args_msg args) (linkAndSendBuddyContentMessageToAllAsync_args_sourceContentId args)
        let res = default_LinkAndSendBuddyContentMessageToAllAsync_result{linkAndSendBuddyContentMessageToAllAsync_result_success = val}
        T.writeMessage oprot ("linkAndSendBuddyContentMessageToAllAsync", T.M_REPLY, seqid) $
          write_LinkAndSendBuddyContentMessageToAllAsync_result oprot res)
      (\e  -> do
        let res = default_LinkAndSendBuddyContentMessageToAllAsync_result{linkAndSendBuddyContentMessageToAllAsync_result_e = P.Just e}
        T.writeMessage oprot ("linkAndSendBuddyContentMessageToAllAsync", T.M_REPLY, seqid) $
          write_LinkAndSendBuddyContentMessageToAllAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("linkAndSendBuddyContentMessageToAllAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_linkAndSendBuddyContentMessageToMids (seqid, iprot, oprot, handler) = do
  args <- read_LinkAndSendBuddyContentMessageToMids_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.linkAndSendBuddyContentMessageToMids handler (linkAndSendBuddyContentMessageToMids_args_requestId args) (linkAndSendBuddyContentMessageToMids_args_msg args) (linkAndSendBuddyContentMessageToMids_args_sourceContentId args) (linkAndSendBuddyContentMessageToMids_args_mids args)
        let res = default_LinkAndSendBuddyContentMessageToMids_result{linkAndSendBuddyContentMessageToMids_result_success = val}
        T.writeMessage oprot ("linkAndSendBuddyContentMessageToMids", T.M_REPLY, seqid) $
          write_LinkAndSendBuddyContentMessageToMids_result oprot res)
      (\e  -> do
        let res = default_LinkAndSendBuddyContentMessageToMids_result{linkAndSendBuddyContentMessageToMids_result_e = P.Just e}
        T.writeMessage oprot ("linkAndSendBuddyContentMessageToMids", T.M_REPLY, seqid) $
          write_LinkAndSendBuddyContentMessageToMids_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("linkAndSendBuddyContentMessageToMids", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_notifyBuddyBlocked (seqid, iprot, oprot, handler) = do
  args <- read_NotifyBuddyBlocked_args iprot
  (X.catch
    (X.catch
      (do
        Iface.notifyBuddyBlocked handler (notifyBuddyBlocked_args_buddyMid args) (notifyBuddyBlocked_args_blockerMid args)
        let res = default_NotifyBuddyBlocked_result
        T.writeMessage oprot ("notifyBuddyBlocked", T.M_REPLY, seqid) $
          write_NotifyBuddyBlocked_result oprot res)
      (\e  -> do
        let res = default_NotifyBuddyBlocked_result{notifyBuddyBlocked_result_e = P.Just e}
        T.writeMessage oprot ("notifyBuddyBlocked", T.M_REPLY, seqid) $
          write_NotifyBuddyBlocked_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("notifyBuddyBlocked", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_notifyBuddyUnblocked (seqid, iprot, oprot, handler) = do
  args <- read_NotifyBuddyUnblocked_args iprot
  (X.catch
    (X.catch
      (do
        Iface.notifyBuddyUnblocked handler (notifyBuddyUnblocked_args_buddyMid args) (notifyBuddyUnblocked_args_blockerMid args)
        let res = default_NotifyBuddyUnblocked_result
        T.writeMessage oprot ("notifyBuddyUnblocked", T.M_REPLY, seqid) $
          write_NotifyBuddyUnblocked_result oprot res)
      (\e  -> do
        let res = default_NotifyBuddyUnblocked_result{notifyBuddyUnblocked_result_e = P.Just e}
        T.writeMessage oprot ("notifyBuddyUnblocked", T.M_REPLY, seqid) $
          write_NotifyBuddyUnblocked_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("notifyBuddyUnblocked", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_registerBuddy (seqid, iprot, oprot, handler) = do
  args <- read_RegisterBuddy_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.registerBuddy handler (registerBuddy_args_buddyId args) (registerBuddy_args_searchId args) (registerBuddy_args_displayName args) (registerBuddy_args_statusMeessage args) (registerBuddy_args_picture args) (registerBuddy_args_settings args)
        let res = default_RegisterBuddy_result{registerBuddy_result_success = val}
        T.writeMessage oprot ("registerBuddy", T.M_REPLY, seqid) $
          write_RegisterBuddy_result oprot res)
      (\e  -> do
        let res = default_RegisterBuddy_result{registerBuddy_result_e = P.Just e}
        T.writeMessage oprot ("registerBuddy", T.M_REPLY, seqid) $
          write_RegisterBuddy_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("registerBuddy", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_registerBuddyAdmin (seqid, iprot, oprot, handler) = do
  args <- read_RegisterBuddyAdmin_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.registerBuddyAdmin handler (registerBuddyAdmin_args_buddyId args) (registerBuddyAdmin_args_searchId args) (registerBuddyAdmin_args_displayName args) (registerBuddyAdmin_args_statusMessage args) (registerBuddyAdmin_args_picture args)
        let res = default_RegisterBuddyAdmin_result{registerBuddyAdmin_result_success = val}
        T.writeMessage oprot ("registerBuddyAdmin", T.M_REPLY, seqid) $
          write_RegisterBuddyAdmin_result oprot res)
      (\e  -> do
        let res = default_RegisterBuddyAdmin_result{registerBuddyAdmin_result_e = P.Just e}
        T.writeMessage oprot ("registerBuddyAdmin", T.M_REPLY, seqid) $
          write_RegisterBuddyAdmin_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("registerBuddyAdmin", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_reissueContactTicket (seqid, iprot, oprot, handler) = do
  args <- read_ReissueContactTicket_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.reissueContactTicket handler (reissueContactTicket_args_expirationTime args) (reissueContactTicket_args_maxUseCount args)
        let res = default_ReissueContactTicket_result{reissueContactTicket_result_success = val}
        T.writeMessage oprot ("reissueContactTicket", T.M_REPLY, seqid) $
          write_ReissueContactTicket_result oprot res)
      (\e  -> do
        let res = default_ReissueContactTicket_result{reissueContactTicket_result_e = P.Just e}
        T.writeMessage oprot ("reissueContactTicket", T.M_REPLY, seqid) $
          write_ReissueContactTicket_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("reissueContactTicket", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_removeBuddyMember (seqid, iprot, oprot, handler) = do
  args <- read_RemoveBuddyMember_args iprot
  (X.catch
    (X.catch
      (do
        Iface.removeBuddyMember handler (removeBuddyMember_args_requestId args) (removeBuddyMember_args_userMid args)
        let res = default_RemoveBuddyMember_result
        T.writeMessage oprot ("removeBuddyMember", T.M_REPLY, seqid) $
          write_RemoveBuddyMember_result oprot res)
      (\e  -> do
        let res = default_RemoveBuddyMember_result{removeBuddyMember_result_e = P.Just e}
        T.writeMessage oprot ("removeBuddyMember", T.M_REPLY, seqid) $
          write_RemoveBuddyMember_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("removeBuddyMember", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_removeBuddyMembers (seqid, iprot, oprot, handler) = do
  args <- read_RemoveBuddyMembers_args iprot
  (X.catch
    (X.catch
      (do
        Iface.removeBuddyMembers handler (removeBuddyMembers_args_requestId args) (removeBuddyMembers_args_userMids args)
        let res = default_RemoveBuddyMembers_result
        T.writeMessage oprot ("removeBuddyMembers", T.M_REPLY, seqid) $
          write_RemoveBuddyMembers_result oprot res)
      (\e  -> do
        let res = default_RemoveBuddyMembers_result{removeBuddyMembers_result_e = P.Just e}
        T.writeMessage oprot ("removeBuddyMembers", T.M_REPLY, seqid) $
          write_RemoveBuddyMembers_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("removeBuddyMembers", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyContentMessageToAll (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyContentMessageToAll_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyContentMessageToAll handler (sendBuddyContentMessageToAll_args_requestId args) (sendBuddyContentMessageToAll_args_msg args) (sendBuddyContentMessageToAll_args_content args)
        let res = default_SendBuddyContentMessageToAll_result{sendBuddyContentMessageToAll_result_success = val}
        T.writeMessage oprot ("sendBuddyContentMessageToAll", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToAll_result oprot res)
      (\e  -> do
        let res = default_SendBuddyContentMessageToAll_result{sendBuddyContentMessageToAll_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyContentMessageToAll", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToAll_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyContentMessageToAll", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyContentMessageToAllAsync (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyContentMessageToAllAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyContentMessageToAllAsync handler (sendBuddyContentMessageToAllAsync_args_requestId args) (sendBuddyContentMessageToAllAsync_args_msg args) (sendBuddyContentMessageToAllAsync_args_content args)
        let res = default_SendBuddyContentMessageToAllAsync_result{sendBuddyContentMessageToAllAsync_result_success = val}
        T.writeMessage oprot ("sendBuddyContentMessageToAllAsync", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToAllAsync_result oprot res)
      (\e  -> do
        let res = default_SendBuddyContentMessageToAllAsync_result{sendBuddyContentMessageToAllAsync_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyContentMessageToAllAsync", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToAllAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyContentMessageToAllAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyContentMessageToMids (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyContentMessageToMids_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyContentMessageToMids handler (sendBuddyContentMessageToMids_args_requestId args) (sendBuddyContentMessageToMids_args_msg args) (sendBuddyContentMessageToMids_args_content args) (sendBuddyContentMessageToMids_args_mids args)
        let res = default_SendBuddyContentMessageToMids_result{sendBuddyContentMessageToMids_result_success = val}
        T.writeMessage oprot ("sendBuddyContentMessageToMids", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToMids_result oprot res)
      (\e  -> do
        let res = default_SendBuddyContentMessageToMids_result{sendBuddyContentMessageToMids_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyContentMessageToMids", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToMids_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyContentMessageToMids", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyContentMessageToMidsAsync (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyContentMessageToMidsAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyContentMessageToMidsAsync handler (sendBuddyContentMessageToMidsAsync_args_requestId args) (sendBuddyContentMessageToMidsAsync_args_msg args) (sendBuddyContentMessageToMidsAsync_args_content args) (sendBuddyContentMessageToMidsAsync_args_mids args)
        let res = default_SendBuddyContentMessageToMidsAsync_result{sendBuddyContentMessageToMidsAsync_result_success = val}
        T.writeMessage oprot ("sendBuddyContentMessageToMidsAsync", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToMidsAsync_result oprot res)
      (\e  -> do
        let res = default_SendBuddyContentMessageToMidsAsync_result{sendBuddyContentMessageToMidsAsync_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyContentMessageToMidsAsync", T.M_REPLY, seqid) $
          write_SendBuddyContentMessageToMidsAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyContentMessageToMidsAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyMessageToAll (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyMessageToAll_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyMessageToAll handler (sendBuddyMessageToAll_args_requestId args) (sendBuddyMessageToAll_args_msg args)
        let res = default_SendBuddyMessageToAll_result{sendBuddyMessageToAll_result_success = val}
        T.writeMessage oprot ("sendBuddyMessageToAll", T.M_REPLY, seqid) $
          write_SendBuddyMessageToAll_result oprot res)
      (\e  -> do
        let res = default_SendBuddyMessageToAll_result{sendBuddyMessageToAll_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyMessageToAll", T.M_REPLY, seqid) $
          write_SendBuddyMessageToAll_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyMessageToAll", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyMessageToAllAsync (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyMessageToAllAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyMessageToAllAsync handler (sendBuddyMessageToAllAsync_args_requestId args) (sendBuddyMessageToAllAsync_args_msg args)
        let res = default_SendBuddyMessageToAllAsync_result{sendBuddyMessageToAllAsync_result_success = val}
        T.writeMessage oprot ("sendBuddyMessageToAllAsync", T.M_REPLY, seqid) $
          write_SendBuddyMessageToAllAsync_result oprot res)
      (\e  -> do
        let res = default_SendBuddyMessageToAllAsync_result{sendBuddyMessageToAllAsync_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyMessageToAllAsync", T.M_REPLY, seqid) $
          write_SendBuddyMessageToAllAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyMessageToAllAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyMessageToMids (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyMessageToMids_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyMessageToMids handler (sendBuddyMessageToMids_args_requestId args) (sendBuddyMessageToMids_args_msg args) (sendBuddyMessageToMids_args_mids args)
        let res = default_SendBuddyMessageToMids_result{sendBuddyMessageToMids_result_success = val}
        T.writeMessage oprot ("sendBuddyMessageToMids", T.M_REPLY, seqid) $
          write_SendBuddyMessageToMids_result oprot res)
      (\e  -> do
        let res = default_SendBuddyMessageToMids_result{sendBuddyMessageToMids_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyMessageToMids", T.M_REPLY, seqid) $
          write_SendBuddyMessageToMids_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyMessageToMids", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendBuddyMessageToMidsAsync (seqid, iprot, oprot, handler) = do
  args <- read_SendBuddyMessageToMidsAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.sendBuddyMessageToMidsAsync handler (sendBuddyMessageToMidsAsync_args_requestId args) (sendBuddyMessageToMidsAsync_args_msg args) (sendBuddyMessageToMidsAsync_args_mids args)
        let res = default_SendBuddyMessageToMidsAsync_result{sendBuddyMessageToMidsAsync_result_success = val}
        T.writeMessage oprot ("sendBuddyMessageToMidsAsync", T.M_REPLY, seqid) $
          write_SendBuddyMessageToMidsAsync_result oprot res)
      (\e  -> do
        let res = default_SendBuddyMessageToMidsAsync_result{sendBuddyMessageToMidsAsync_result_e = P.Just e}
        T.writeMessage oprot ("sendBuddyMessageToMidsAsync", T.M_REPLY, seqid) $
          write_SendBuddyMessageToMidsAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendBuddyMessageToMidsAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_sendIndividualEventToAllAsync (seqid, iprot, oprot, handler) = do
  args <- read_SendIndividualEventToAllAsync_args iprot
  (X.catch
    (X.catch
      (do
        Iface.sendIndividualEventToAllAsync handler (sendIndividualEventToAllAsync_args_requestId args) (sendIndividualEventToAllAsync_args_buddyMid args) (sendIndividualEventToAllAsync_args_notificationStatus args)
        let res = default_SendIndividualEventToAllAsync_result
        T.writeMessage oprot ("sendIndividualEventToAllAsync", T.M_REPLY, seqid) $
          write_SendIndividualEventToAllAsync_result oprot res)
      (\e  -> do
        let res = default_SendIndividualEventToAllAsync_result{sendIndividualEventToAllAsync_result_e = P.Just e}
        T.writeMessage oprot ("sendIndividualEventToAllAsync", T.M_REPLY, seqid) $
          write_SendIndividualEventToAllAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("sendIndividualEventToAllAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_setBuddyOnAir (seqid, iprot, oprot, handler) = do
  args <- read_SetBuddyOnAir_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.setBuddyOnAir handler (setBuddyOnAir_args_requestId args) (setBuddyOnAir_args_onAir args)
        let res = default_SetBuddyOnAir_result{setBuddyOnAir_result_success = val}
        T.writeMessage oprot ("setBuddyOnAir", T.M_REPLY, seqid) $
          write_SetBuddyOnAir_result oprot res)
      (\e  -> do
        let res = default_SetBuddyOnAir_result{setBuddyOnAir_result_e = P.Just e}
        T.writeMessage oprot ("setBuddyOnAir", T.M_REPLY, seqid) $
          write_SetBuddyOnAir_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("setBuddyOnAir", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_setBuddyOnAirAsync (seqid, iprot, oprot, handler) = do
  args <- read_SetBuddyOnAirAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.setBuddyOnAirAsync handler (setBuddyOnAirAsync_args_requestId args) (setBuddyOnAirAsync_args_onAir args)
        let res = default_SetBuddyOnAirAsync_result{setBuddyOnAirAsync_result_success = val}
        T.writeMessage oprot ("setBuddyOnAirAsync", T.M_REPLY, seqid) $
          write_SetBuddyOnAirAsync_result oprot res)
      (\e  -> do
        let res = default_SetBuddyOnAirAsync_result{setBuddyOnAirAsync_result_e = P.Just e}
        T.writeMessage oprot ("setBuddyOnAirAsync", T.M_REPLY, seqid) $
          write_SetBuddyOnAirAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("setBuddyOnAirAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_storeMessage (seqid, iprot, oprot, handler) = do
  args <- read_StoreMessage_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.storeMessage handler (storeMessage_args_requestId args) (storeMessage_args_messageRequest args)
        let res = default_StoreMessage_result{storeMessage_result_success = val}
        T.writeMessage oprot ("storeMessage", T.M_REPLY, seqid) $
          write_StoreMessage_result oprot res)
      (\e  -> do
        let res = default_StoreMessage_result{storeMessage_result_e = P.Just e}
        T.writeMessage oprot ("storeMessage", T.M_REPLY, seqid) $
          write_StoreMessage_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("storeMessage", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_unblockBuddyMember (seqid, iprot, oprot, handler) = do
  args <- read_UnblockBuddyMember_args iprot
  (X.catch
    (X.catch
      (do
        Iface.unblockBuddyMember handler (unblockBuddyMember_args_requestId args) (unblockBuddyMember_args_mid args)
        let res = default_UnblockBuddyMember_result
        T.writeMessage oprot ("unblockBuddyMember", T.M_REPLY, seqid) $
          write_UnblockBuddyMember_result oprot res)
      (\e  -> do
        let res = default_UnblockBuddyMember_result{unblockBuddyMember_result_e = P.Just e}
        T.writeMessage oprot ("unblockBuddyMember", T.M_REPLY, seqid) $
          write_UnblockBuddyMember_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("unblockBuddyMember", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_unregisterBuddy (seqid, iprot, oprot, handler) = do
  args <- read_UnregisterBuddy_args iprot
  (X.catch
    (X.catch
      (do
        Iface.unregisterBuddy handler (unregisterBuddy_args_requestId args)
        let res = default_UnregisterBuddy_result
        T.writeMessage oprot ("unregisterBuddy", T.M_REPLY, seqid) $
          write_UnregisterBuddy_result oprot res)
      (\e  -> do
        let res = default_UnregisterBuddy_result{unregisterBuddy_result_e = P.Just e}
        T.writeMessage oprot ("unregisterBuddy", T.M_REPLY, seqid) $
          write_UnregisterBuddy_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("unregisterBuddy", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_unregisterBuddyAdmin (seqid, iprot, oprot, handler) = do
  args <- read_UnregisterBuddyAdmin_args iprot
  (X.catch
    (X.catch
      (do
        Iface.unregisterBuddyAdmin handler (unregisterBuddyAdmin_args_requestId args)
        let res = default_UnregisterBuddyAdmin_result
        T.writeMessage oprot ("unregisterBuddyAdmin", T.M_REPLY, seqid) $
          write_UnregisterBuddyAdmin_result oprot res)
      (\e  -> do
        let res = default_UnregisterBuddyAdmin_result{unregisterBuddyAdmin_result_e = P.Just e}
        T.writeMessage oprot ("unregisterBuddyAdmin", T.M_REPLY, seqid) $
          write_UnregisterBuddyAdmin_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("unregisterBuddyAdmin", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddyAdminProfileAttribute (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddyAdminProfileAttribute_args iprot
  (X.catch
    (X.catch
      (do
        Iface.updateBuddyAdminProfileAttribute handler (updateBuddyAdminProfileAttribute_args_requestId args) (updateBuddyAdminProfileAttribute_args_attributes args)
        let res = default_UpdateBuddyAdminProfileAttribute_result
        T.writeMessage oprot ("updateBuddyAdminProfileAttribute", T.M_REPLY, seqid) $
          write_UpdateBuddyAdminProfileAttribute_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddyAdminProfileAttribute_result{updateBuddyAdminProfileAttribute_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddyAdminProfileAttribute", T.M_REPLY, seqid) $
          write_UpdateBuddyAdminProfileAttribute_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddyAdminProfileAttribute", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddyAdminProfileImage (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddyAdminProfileImage_args iprot
  (X.catch
    (X.catch
      (do
        Iface.updateBuddyAdminProfileImage handler (updateBuddyAdminProfileImage_args_requestId args) (updateBuddyAdminProfileImage_args_picture args)
        let res = default_UpdateBuddyAdminProfileImage_result
        T.writeMessage oprot ("updateBuddyAdminProfileImage", T.M_REPLY, seqid) $
          write_UpdateBuddyAdminProfileImage_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddyAdminProfileImage_result{updateBuddyAdminProfileImage_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddyAdminProfileImage", T.M_REPLY, seqid) $
          write_UpdateBuddyAdminProfileImage_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddyAdminProfileImage", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddyProfileAttributes (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddyProfileAttributes_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.updateBuddyProfileAttributes handler (updateBuddyProfileAttributes_args_requestId args) (updateBuddyProfileAttributes_args_attributes args)
        let res = default_UpdateBuddyProfileAttributes_result{updateBuddyProfileAttributes_result_success = val}
        T.writeMessage oprot ("updateBuddyProfileAttributes", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileAttributes_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddyProfileAttributes_result{updateBuddyProfileAttributes_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddyProfileAttributes", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileAttributes_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddyProfileAttributes", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddyProfileAttributesAsync (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddyProfileAttributesAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.updateBuddyProfileAttributesAsync handler (updateBuddyProfileAttributesAsync_args_requestId args) (updateBuddyProfileAttributesAsync_args_attributes args)
        let res = default_UpdateBuddyProfileAttributesAsync_result{updateBuddyProfileAttributesAsync_result_success = val}
        T.writeMessage oprot ("updateBuddyProfileAttributesAsync", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileAttributesAsync_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddyProfileAttributesAsync_result{updateBuddyProfileAttributesAsync_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddyProfileAttributesAsync", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileAttributesAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddyProfileAttributesAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddyProfileImage (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddyProfileImage_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.updateBuddyProfileImage handler (updateBuddyProfileImage_args_requestId args) (updateBuddyProfileImage_args_image args)
        let res = default_UpdateBuddyProfileImage_result{updateBuddyProfileImage_result_success = val}
        T.writeMessage oprot ("updateBuddyProfileImage", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileImage_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddyProfileImage_result{updateBuddyProfileImage_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddyProfileImage", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileImage_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddyProfileImage", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddyProfileImageAsync (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddyProfileImageAsync_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.updateBuddyProfileImageAsync handler (updateBuddyProfileImageAsync_args_requestId args) (updateBuddyProfileImageAsync_args_image args)
        let res = default_UpdateBuddyProfileImageAsync_result{updateBuddyProfileImageAsync_result_success = val}
        T.writeMessage oprot ("updateBuddyProfileImageAsync", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileImageAsync_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddyProfileImageAsync_result{updateBuddyProfileImageAsync_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddyProfileImageAsync", T.M_REPLY, seqid) $
          write_UpdateBuddyProfileImageAsync_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddyProfileImageAsync", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddySearchId (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddySearchId_args iprot
  (X.catch
    (X.catch
      (do
        Iface.updateBuddySearchId handler (updateBuddySearchId_args_requestId args) (updateBuddySearchId_args_searchId args)
        let res = default_UpdateBuddySearchId_result
        T.writeMessage oprot ("updateBuddySearchId", T.M_REPLY, seqid) $
          write_UpdateBuddySearchId_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddySearchId_result{updateBuddySearchId_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddySearchId", T.M_REPLY, seqid) $
          write_UpdateBuddySearchId_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddySearchId", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_updateBuddySettings (seqid, iprot, oprot, handler) = do
  args <- read_UpdateBuddySettings_args iprot
  (X.catch
    (X.catch
      (do
        Iface.updateBuddySettings handler (updateBuddySettings_args_settings args)
        let res = default_UpdateBuddySettings_result
        T.writeMessage oprot ("updateBuddySettings", T.M_REPLY, seqid) $
          write_UpdateBuddySettings_result oprot res)
      (\e  -> do
        let res = default_UpdateBuddySettings_result{updateBuddySettings_result_e = P.Just e}
        T.writeMessage oprot ("updateBuddySettings", T.M_REPLY, seqid) $
          write_UpdateBuddySettings_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("updateBuddySettings", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_uploadBuddyContent (seqid, iprot, oprot, handler) = do
  args <- read_UploadBuddyContent_args iprot
  (X.catch
    (X.catch
      (do
        val <- Iface.uploadBuddyContent handler (uploadBuddyContent_args_contentType args) (uploadBuddyContent_args_content args)
        let res = default_UploadBuddyContent_result{uploadBuddyContent_result_success = val}
        T.writeMessage oprot ("uploadBuddyContent", T.M_REPLY, seqid) $
          write_UploadBuddyContent_result oprot res)
      (\e  -> do
        let res = default_UploadBuddyContent_result{uploadBuddyContent_result_e = P.Just e}
        T.writeMessage oprot ("uploadBuddyContent", T.M_REPLY, seqid) $
          write_UploadBuddyContent_result oprot res))
    ((\_ -> do
      T.writeMessage oprot ("uploadBuddyContent", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "addBuddyMember" -> process_addBuddyMember (seqid,iprot,oprot,handler)
  "addBuddyMembers" -> process_addBuddyMembers (seqid,iprot,oprot,handler)
  "blockBuddyMember" -> process_blockBuddyMember (seqid,iprot,oprot,handler)
  "commitSendMessagesToAll" -> process_commitSendMessagesToAll (seqid,iprot,oprot,handler)
  "commitSendMessagesToMids" -> process_commitSendMessagesToMids (seqid,iprot,oprot,handler)
  "containsBuddyMember" -> process_containsBuddyMember (seqid,iprot,oprot,handler)
  "downloadMessageContent" -> process_downloadMessageContent (seqid,iprot,oprot,handler)
  "downloadMessageContentPreview" -> process_downloadMessageContentPreview (seqid,iprot,oprot,handler)
  "downloadProfileImage" -> process_downloadProfileImage (seqid,iprot,oprot,handler)
  "downloadProfileImagePreview" -> process_downloadProfileImagePreview (seqid,iprot,oprot,handler)
  "getActiveMemberCountByBuddyMid" -> process_getActiveMemberCountByBuddyMid (seqid,iprot,oprot,handler)
  "getActiveMemberMidsByBuddyMid" -> process_getActiveMemberMidsByBuddyMid (seqid,iprot,oprot,handler)
  "getAllBuddyMembers" -> process_getAllBuddyMembers (seqid,iprot,oprot,handler)
  "getBlockedBuddyMembers" -> process_getBlockedBuddyMembers (seqid,iprot,oprot,handler)
  "getBlockerCountByBuddyMid" -> process_getBlockerCountByBuddyMid (seqid,iprot,oprot,handler)
  "getBuddyDetailByMid" -> process_getBuddyDetailByMid (seqid,iprot,oprot,handler)
  "getBuddyProfile" -> process_getBuddyProfile (seqid,iprot,oprot,handler)
  "getContactTicket" -> process_getContactTicket (seqid,iprot,oprot,handler)
  "getMemberCountByBuddyMid" -> process_getMemberCountByBuddyMid (seqid,iprot,oprot,handler)
  "getSendBuddyMessageResult" -> process_getSendBuddyMessageResult (seqid,iprot,oprot,handler)
  "getSetBuddyOnAirResult" -> process_getSetBuddyOnAirResult (seqid,iprot,oprot,handler)
  "getUpdateBuddyProfileResult" -> process_getUpdateBuddyProfileResult (seqid,iprot,oprot,handler)
  "isBuddyOnAirByMid" -> process_isBuddyOnAirByMid (seqid,iprot,oprot,handler)
  "linkAndSendBuddyContentMessageToAllAsync" -> process_linkAndSendBuddyContentMessageToAllAsync (seqid,iprot,oprot,handler)
  "linkAndSendBuddyContentMessageToMids" -> process_linkAndSendBuddyContentMessageToMids (seqid,iprot,oprot,handler)
  "notifyBuddyBlocked" -> process_notifyBuddyBlocked (seqid,iprot,oprot,handler)
  "notifyBuddyUnblocked" -> process_notifyBuddyUnblocked (seqid,iprot,oprot,handler)
  "registerBuddy" -> process_registerBuddy (seqid,iprot,oprot,handler)
  "registerBuddyAdmin" -> process_registerBuddyAdmin (seqid,iprot,oprot,handler)
  "reissueContactTicket" -> process_reissueContactTicket (seqid,iprot,oprot,handler)
  "removeBuddyMember" -> process_removeBuddyMember (seqid,iprot,oprot,handler)
  "removeBuddyMembers" -> process_removeBuddyMembers (seqid,iprot,oprot,handler)
  "sendBuddyContentMessageToAll" -> process_sendBuddyContentMessageToAll (seqid,iprot,oprot,handler)
  "sendBuddyContentMessageToAllAsync" -> process_sendBuddyContentMessageToAllAsync (seqid,iprot,oprot,handler)
  "sendBuddyContentMessageToMids" -> process_sendBuddyContentMessageToMids (seqid,iprot,oprot,handler)
  "sendBuddyContentMessageToMidsAsync" -> process_sendBuddyContentMessageToMidsAsync (seqid,iprot,oprot,handler)
  "sendBuddyMessageToAll" -> process_sendBuddyMessageToAll (seqid,iprot,oprot,handler)
  "sendBuddyMessageToAllAsync" -> process_sendBuddyMessageToAllAsync (seqid,iprot,oprot,handler)
  "sendBuddyMessageToMids" -> process_sendBuddyMessageToMids (seqid,iprot,oprot,handler)
  "sendBuddyMessageToMidsAsync" -> process_sendBuddyMessageToMidsAsync (seqid,iprot,oprot,handler)
  "sendIndividualEventToAllAsync" -> process_sendIndividualEventToAllAsync (seqid,iprot,oprot,handler)
  "setBuddyOnAir" -> process_setBuddyOnAir (seqid,iprot,oprot,handler)
  "setBuddyOnAirAsync" -> process_setBuddyOnAirAsync (seqid,iprot,oprot,handler)
  "storeMessage" -> process_storeMessage (seqid,iprot,oprot,handler)
  "unblockBuddyMember" -> process_unblockBuddyMember (seqid,iprot,oprot,handler)
  "unregisterBuddy" -> process_unregisterBuddy (seqid,iprot,oprot,handler)
  "unregisterBuddyAdmin" -> process_unregisterBuddyAdmin (seqid,iprot,oprot,handler)
  "updateBuddyAdminProfileAttribute" -> process_updateBuddyAdminProfileAttribute (seqid,iprot,oprot,handler)
  "updateBuddyAdminProfileImage" -> process_updateBuddyAdminProfileImage (seqid,iprot,oprot,handler)
  "updateBuddyProfileAttributes" -> process_updateBuddyProfileAttributes (seqid,iprot,oprot,handler)
  "updateBuddyProfileAttributesAsync" -> process_updateBuddyProfileAttributesAsync (seqid,iprot,oprot,handler)
  "updateBuddyProfileImage" -> process_updateBuddyProfileImage (seqid,iprot,oprot,handler)
  "updateBuddyProfileImageAsync" -> process_updateBuddyProfileImageAsync (seqid,iprot,oprot,handler)
  "updateBuddySearchId" -> process_updateBuddySearchId (seqid,iprot,oprot,handler)
  "updateBuddySettings" -> process_updateBuddySettings (seqid,iprot,oprot,handler)
  "uploadBuddyContent" -> process_uploadBuddyContent (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessage oprot (name,T.M_EXCEPTION,seqid) $
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
process handler (iprot, oprot) = do
  T.readMessage iprot (
    proc_ handler (iprot,oprot))
  P.return P.True
