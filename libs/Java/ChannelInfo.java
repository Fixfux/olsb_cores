/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2019-11-06")
public class ChannelInfo implements org.apache.thrift.TBase<ChannelInfo, ChannelInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ChannelInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChannelInfo");

  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ENTRY_PAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("entryPageUrl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("descriptionText", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("provider", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField PUBLIC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("publicType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ICON_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("iconImage", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("permissions", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField ICON_THUMBNAIL_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("iconThumbnailImage", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CHANNEL_CONFIGURATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("channelConfigurations", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChannelInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChannelInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String channelId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String entryPageUrl; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String descriptionText; // required
  public @org.apache.thrift.annotation.Nullable ChannelProvider provider; // required
  /**
   * 
   * @see PublicType
   */
  public @org.apache.thrift.annotation.Nullable PublicType publicType; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String iconImage; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> permissions; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String iconThumbnailImage; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<ChannelConfiguration> channelConfigurations; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHANNEL_ID((short)1, "channelId"),
    NAME((short)3, "name"),
    ENTRY_PAGE_URL((short)4, "entryPageUrl"),
    DESCRIPTION_TEXT((short)5, "descriptionText"),
    PROVIDER((short)6, "provider"),
    /**
     * 
     * @see PublicType
     */
    PUBLIC_TYPE((short)7, "publicType"),
    ICON_IMAGE((short)8, "iconImage"),
    PERMISSIONS((short)9, "permissions"),
    ICON_THUMBNAIL_IMAGE((short)11, "iconThumbnailImage"),
    CHANNEL_CONFIGURATIONS((short)12, "channelConfigurations");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHANNEL_ID
          return CHANNEL_ID;
        case 3: // NAME
          return NAME;
        case 4: // ENTRY_PAGE_URL
          return ENTRY_PAGE_URL;
        case 5: // DESCRIPTION_TEXT
          return DESCRIPTION_TEXT;
        case 6: // PROVIDER
          return PROVIDER;
        case 7: // PUBLIC_TYPE
          return PUBLIC_TYPE;
        case 8: // ICON_IMAGE
          return ICON_IMAGE;
        case 9: // PERMISSIONS
          return PERMISSIONS;
        case 11: // ICON_THUMBNAIL_IMAGE
          return ICON_THUMBNAIL_IMAGE;
        case 12: // CHANNEL_CONFIGURATIONS
          return CHANNEL_CONFIGURATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTRY_PAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("entryPageUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION_TEXT, new org.apache.thrift.meta_data.FieldMetaData("descriptionText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVIDER, new org.apache.thrift.meta_data.FieldMetaData("provider", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelProvider.class)));
    tmpMap.put(_Fields.PUBLIC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("publicType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PublicType.class)));
    tmpMap.put(_Fields.ICON_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("iconImage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("permissions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ICON_THUMBNAIL_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("iconThumbnailImage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_CONFIGURATIONS, new org.apache.thrift.meta_data.FieldMetaData("channelConfigurations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ChannelConfiguration.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChannelInfo.class, metaDataMap);
  }

  public ChannelInfo() {
  }

  public ChannelInfo(
    java.lang.String channelId,
    java.lang.String name,
    java.lang.String entryPageUrl,
    java.lang.String descriptionText,
    ChannelProvider provider,
    PublicType publicType,
    java.lang.String iconImage,
    java.util.List<java.lang.String> permissions,
    java.lang.String iconThumbnailImage,
    java.util.List<ChannelConfiguration> channelConfigurations)
  {
    this();
    this.channelId = channelId;
    this.name = name;
    this.entryPageUrl = entryPageUrl;
    this.descriptionText = descriptionText;
    this.provider = provider;
    this.publicType = publicType;
    this.iconImage = iconImage;
    this.permissions = permissions;
    this.iconThumbnailImage = iconThumbnailImage;
    this.channelConfigurations = channelConfigurations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChannelInfo(ChannelInfo other) {
    if (other.isSetChannelId()) {
      this.channelId = other.channelId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetEntryPageUrl()) {
      this.entryPageUrl = other.entryPageUrl;
    }
    if (other.isSetDescriptionText()) {
      this.descriptionText = other.descriptionText;
    }
    if (other.isSetProvider()) {
      this.provider = new ChannelProvider(other.provider);
    }
    if (other.isSetPublicType()) {
      this.publicType = other.publicType;
    }
    if (other.isSetIconImage()) {
      this.iconImage = other.iconImage;
    }
    if (other.isSetPermissions()) {
      java.util.List<java.lang.String> __this__permissions = new java.util.ArrayList<java.lang.String>(other.permissions);
      this.permissions = __this__permissions;
    }
    if (other.isSetIconThumbnailImage()) {
      this.iconThumbnailImage = other.iconThumbnailImage;
    }
    if (other.isSetChannelConfigurations()) {
      java.util.List<ChannelConfiguration> __this__channelConfigurations = new java.util.ArrayList<ChannelConfiguration>(other.channelConfigurations.size());
      for (ChannelConfiguration other_element : other.channelConfigurations) {
        __this__channelConfigurations.add(other_element);
      }
      this.channelConfigurations = __this__channelConfigurations;
    }
  }

  public ChannelInfo deepCopy() {
    return new ChannelInfo(this);
  }

  @Override
  public void clear() {
    this.channelId = null;
    this.name = null;
    this.entryPageUrl = null;
    this.descriptionText = null;
    this.provider = null;
    this.publicType = null;
    this.iconImage = null;
    this.permissions = null;
    this.iconThumbnailImage = null;
    this.channelConfigurations = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getChannelId() {
    return this.channelId;
  }

  public ChannelInfo setChannelId(@org.apache.thrift.annotation.Nullable java.lang.String channelId) {
    this.channelId = channelId;
    return this;
  }

  public void unsetChannelId() {
    this.channelId = null;
  }

  /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelId() {
    return this.channelId != null;
  }

  public void setChannelIdIsSet(boolean value) {
    if (!value) {
      this.channelId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public ChannelInfo setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEntryPageUrl() {
    return this.entryPageUrl;
  }

  public ChannelInfo setEntryPageUrl(@org.apache.thrift.annotation.Nullable java.lang.String entryPageUrl) {
    this.entryPageUrl = entryPageUrl;
    return this;
  }

  public void unsetEntryPageUrl() {
    this.entryPageUrl = null;
  }

  /** Returns true if field entryPageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryPageUrl() {
    return this.entryPageUrl != null;
  }

  public void setEntryPageUrlIsSet(boolean value) {
    if (!value) {
      this.entryPageUrl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDescriptionText() {
    return this.descriptionText;
  }

  public ChannelInfo setDescriptionText(@org.apache.thrift.annotation.Nullable java.lang.String descriptionText) {
    this.descriptionText = descriptionText;
    return this;
  }

  public void unsetDescriptionText() {
    this.descriptionText = null;
  }

  /** Returns true if field descriptionText is set (has been assigned a value) and false otherwise */
  public boolean isSetDescriptionText() {
    return this.descriptionText != null;
  }

  public void setDescriptionTextIsSet(boolean value) {
    if (!value) {
      this.descriptionText = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ChannelProvider getProvider() {
    return this.provider;
  }

  public ChannelInfo setProvider(@org.apache.thrift.annotation.Nullable ChannelProvider provider) {
    this.provider = provider;
    return this;
  }

  public void unsetProvider() {
    this.provider = null;
  }

  /** Returns true if field provider is set (has been assigned a value) and false otherwise */
  public boolean isSetProvider() {
    return this.provider != null;
  }

  public void setProviderIsSet(boolean value) {
    if (!value) {
      this.provider = null;
    }
  }

  /**
   * 
   * @see PublicType
   */
  @org.apache.thrift.annotation.Nullable
  public PublicType getPublicType() {
    return this.publicType;
  }

  /**
   * 
   * @see PublicType
   */
  public ChannelInfo setPublicType(@org.apache.thrift.annotation.Nullable PublicType publicType) {
    this.publicType = publicType;
    return this;
  }

  public void unsetPublicType() {
    this.publicType = null;
  }

  /** Returns true if field publicType is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicType() {
    return this.publicType != null;
  }

  public void setPublicTypeIsSet(boolean value) {
    if (!value) {
      this.publicType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIconImage() {
    return this.iconImage;
  }

  public ChannelInfo setIconImage(@org.apache.thrift.annotation.Nullable java.lang.String iconImage) {
    this.iconImage = iconImage;
    return this;
  }

  public void unsetIconImage() {
    this.iconImage = null;
  }

  /** Returns true if field iconImage is set (has been assigned a value) and false otherwise */
  public boolean isSetIconImage() {
    return this.iconImage != null;
  }

  public void setIconImageIsSet(boolean value) {
    if (!value) {
      this.iconImage = null;
    }
  }

  public int getPermissionsSize() {
    return (this.permissions == null) ? 0 : this.permissions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getPermissionsIterator() {
    return (this.permissions == null) ? null : this.permissions.iterator();
  }

  public void addToPermissions(java.lang.String elem) {
    if (this.permissions == null) {
      this.permissions = new java.util.ArrayList<java.lang.String>();
    }
    this.permissions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getPermissions() {
    return this.permissions;
  }

  public ChannelInfo setPermissions(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> permissions) {
    this.permissions = permissions;
    return this;
  }

  public void unsetPermissions() {
    this.permissions = null;
  }

  /** Returns true if field permissions is set (has been assigned a value) and false otherwise */
  public boolean isSetPermissions() {
    return this.permissions != null;
  }

  public void setPermissionsIsSet(boolean value) {
    if (!value) {
      this.permissions = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIconThumbnailImage() {
    return this.iconThumbnailImage;
  }

  public ChannelInfo setIconThumbnailImage(@org.apache.thrift.annotation.Nullable java.lang.String iconThumbnailImage) {
    this.iconThumbnailImage = iconThumbnailImage;
    return this;
  }

  public void unsetIconThumbnailImage() {
    this.iconThumbnailImage = null;
  }

  /** Returns true if field iconThumbnailImage is set (has been assigned a value) and false otherwise */
  public boolean isSetIconThumbnailImage() {
    return this.iconThumbnailImage != null;
  }

  public void setIconThumbnailImageIsSet(boolean value) {
    if (!value) {
      this.iconThumbnailImage = null;
    }
  }

  public int getChannelConfigurationsSize() {
    return (this.channelConfigurations == null) ? 0 : this.channelConfigurations.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ChannelConfiguration> getChannelConfigurationsIterator() {
    return (this.channelConfigurations == null) ? null : this.channelConfigurations.iterator();
  }

  public void addToChannelConfigurations(ChannelConfiguration elem) {
    if (this.channelConfigurations == null) {
      this.channelConfigurations = new java.util.ArrayList<ChannelConfiguration>();
    }
    this.channelConfigurations.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ChannelConfiguration> getChannelConfigurations() {
    return this.channelConfigurations;
  }

  public ChannelInfo setChannelConfigurations(@org.apache.thrift.annotation.Nullable java.util.List<ChannelConfiguration> channelConfigurations) {
    this.channelConfigurations = channelConfigurations;
    return this;
  }

  public void unsetChannelConfigurations() {
    this.channelConfigurations = null;
  }

  /** Returns true if field channelConfigurations is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelConfigurations() {
    return this.channelConfigurations != null;
  }

  public void setChannelConfigurationsIsSet(boolean value) {
    if (!value) {
      this.channelConfigurations = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CHANNEL_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        setChannelId((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case ENTRY_PAGE_URL:
      if (value == null) {
        unsetEntryPageUrl();
      } else {
        setEntryPageUrl((java.lang.String)value);
      }
      break;

    case DESCRIPTION_TEXT:
      if (value == null) {
        unsetDescriptionText();
      } else {
        setDescriptionText((java.lang.String)value);
      }
      break;

    case PROVIDER:
      if (value == null) {
        unsetProvider();
      } else {
        setProvider((ChannelProvider)value);
      }
      break;

    case PUBLIC_TYPE:
      if (value == null) {
        unsetPublicType();
      } else {
        setPublicType((PublicType)value);
      }
      break;

    case ICON_IMAGE:
      if (value == null) {
        unsetIconImage();
      } else {
        setIconImage((java.lang.String)value);
      }
      break;

    case PERMISSIONS:
      if (value == null) {
        unsetPermissions();
      } else {
        setPermissions((java.util.List<java.lang.String>)value);
      }
      break;

    case ICON_THUMBNAIL_IMAGE:
      if (value == null) {
        unsetIconThumbnailImage();
      } else {
        setIconThumbnailImage((java.lang.String)value);
      }
      break;

    case CHANNEL_CONFIGURATIONS:
      if (value == null) {
        unsetChannelConfigurations();
      } else {
        setChannelConfigurations((java.util.List<ChannelConfiguration>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHANNEL_ID:
      return getChannelId();

    case NAME:
      return getName();

    case ENTRY_PAGE_URL:
      return getEntryPageUrl();

    case DESCRIPTION_TEXT:
      return getDescriptionText();

    case PROVIDER:
      return getProvider();

    case PUBLIC_TYPE:
      return getPublicType();

    case ICON_IMAGE:
      return getIconImage();

    case PERMISSIONS:
      return getPermissions();

    case ICON_THUMBNAIL_IMAGE:
      return getIconThumbnailImage();

    case CHANNEL_CONFIGURATIONS:
      return getChannelConfigurations();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHANNEL_ID:
      return isSetChannelId();
    case NAME:
      return isSetName();
    case ENTRY_PAGE_URL:
      return isSetEntryPageUrl();
    case DESCRIPTION_TEXT:
      return isSetDescriptionText();
    case PROVIDER:
      return isSetProvider();
    case PUBLIC_TYPE:
      return isSetPublicType();
    case ICON_IMAGE:
      return isSetIconImage();
    case PERMISSIONS:
      return isSetPermissions();
    case ICON_THUMBNAIL_IMAGE:
      return isSetIconThumbnailImage();
    case CHANNEL_CONFIGURATIONS:
      return isSetChannelConfigurations();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ChannelInfo)
      return this.equals((ChannelInfo)that);
    return false;
  }

  public boolean equals(ChannelInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_channelId = true && this.isSetChannelId();
    boolean that_present_channelId = true && that.isSetChannelId();
    if (this_present_channelId || that_present_channelId) {
      if (!(this_present_channelId && that_present_channelId))
        return false;
      if (!this.channelId.equals(that.channelId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_entryPageUrl = true && this.isSetEntryPageUrl();
    boolean that_present_entryPageUrl = true && that.isSetEntryPageUrl();
    if (this_present_entryPageUrl || that_present_entryPageUrl) {
      if (!(this_present_entryPageUrl && that_present_entryPageUrl))
        return false;
      if (!this.entryPageUrl.equals(that.entryPageUrl))
        return false;
    }

    boolean this_present_descriptionText = true && this.isSetDescriptionText();
    boolean that_present_descriptionText = true && that.isSetDescriptionText();
    if (this_present_descriptionText || that_present_descriptionText) {
      if (!(this_present_descriptionText && that_present_descriptionText))
        return false;
      if (!this.descriptionText.equals(that.descriptionText))
        return false;
    }

    boolean this_present_provider = true && this.isSetProvider();
    boolean that_present_provider = true && that.isSetProvider();
    if (this_present_provider || that_present_provider) {
      if (!(this_present_provider && that_present_provider))
        return false;
      if (!this.provider.equals(that.provider))
        return false;
    }

    boolean this_present_publicType = true && this.isSetPublicType();
    boolean that_present_publicType = true && that.isSetPublicType();
    if (this_present_publicType || that_present_publicType) {
      if (!(this_present_publicType && that_present_publicType))
        return false;
      if (!this.publicType.equals(that.publicType))
        return false;
    }

    boolean this_present_iconImage = true && this.isSetIconImage();
    boolean that_present_iconImage = true && that.isSetIconImage();
    if (this_present_iconImage || that_present_iconImage) {
      if (!(this_present_iconImage && that_present_iconImage))
        return false;
      if (!this.iconImage.equals(that.iconImage))
        return false;
    }

    boolean this_present_permissions = true && this.isSetPermissions();
    boolean that_present_permissions = true && that.isSetPermissions();
    if (this_present_permissions || that_present_permissions) {
      if (!(this_present_permissions && that_present_permissions))
        return false;
      if (!this.permissions.equals(that.permissions))
        return false;
    }

    boolean this_present_iconThumbnailImage = true && this.isSetIconThumbnailImage();
    boolean that_present_iconThumbnailImage = true && that.isSetIconThumbnailImage();
    if (this_present_iconThumbnailImage || that_present_iconThumbnailImage) {
      if (!(this_present_iconThumbnailImage && that_present_iconThumbnailImage))
        return false;
      if (!this.iconThumbnailImage.equals(that.iconThumbnailImage))
        return false;
    }

    boolean this_present_channelConfigurations = true && this.isSetChannelConfigurations();
    boolean that_present_channelConfigurations = true && that.isSetChannelConfigurations();
    if (this_present_channelConfigurations || that_present_channelConfigurations) {
      if (!(this_present_channelConfigurations && that_present_channelConfigurations))
        return false;
      if (!this.channelConfigurations.equals(that.channelConfigurations))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetChannelId()) ? 131071 : 524287);
    if (isSetChannelId())
      hashCode = hashCode * 8191 + channelId.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetEntryPageUrl()) ? 131071 : 524287);
    if (isSetEntryPageUrl())
      hashCode = hashCode * 8191 + entryPageUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescriptionText()) ? 131071 : 524287);
    if (isSetDescriptionText())
      hashCode = hashCode * 8191 + descriptionText.hashCode();

    hashCode = hashCode * 8191 + ((isSetProvider()) ? 131071 : 524287);
    if (isSetProvider())
      hashCode = hashCode * 8191 + provider.hashCode();

    hashCode = hashCode * 8191 + ((isSetPublicType()) ? 131071 : 524287);
    if (isSetPublicType())
      hashCode = hashCode * 8191 + publicType.getValue();

    hashCode = hashCode * 8191 + ((isSetIconImage()) ? 131071 : 524287);
    if (isSetIconImage())
      hashCode = hashCode * 8191 + iconImage.hashCode();

    hashCode = hashCode * 8191 + ((isSetPermissions()) ? 131071 : 524287);
    if (isSetPermissions())
      hashCode = hashCode * 8191 + permissions.hashCode();

    hashCode = hashCode * 8191 + ((isSetIconThumbnailImage()) ? 131071 : 524287);
    if (isSetIconThumbnailImage())
      hashCode = hashCode * 8191 + iconThumbnailImage.hashCode();

    hashCode = hashCode * 8191 + ((isSetChannelConfigurations()) ? 131071 : 524287);
    if (isSetChannelConfigurations())
      hashCode = hashCode * 8191 + channelConfigurations.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ChannelInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEntryPageUrl()).compareTo(other.isSetEntryPageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryPageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryPageUrl, other.entryPageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescriptionText()).compareTo(other.isSetDescriptionText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescriptionText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descriptionText, other.descriptionText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProvider()).compareTo(other.isSetProvider());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvider()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provider, other.provider);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPublicType()).compareTo(other.isSetPublicType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicType, other.publicType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIconImage()).compareTo(other.isSetIconImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconImage, other.iconImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPermissions()).compareTo(other.isSetPermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permissions, other.permissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIconThumbnailImage()).compareTo(other.isSetIconThumbnailImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIconThumbnailImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconThumbnailImage, other.iconThumbnailImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannelConfigurations()).compareTo(other.isSetChannelConfigurations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelConfigurations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelConfigurations, other.channelConfigurations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ChannelInfo(");
    boolean first = true;

    sb.append("channelId:");
    if (this.channelId == null) {
      sb.append("null");
    } else {
      sb.append(this.channelId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("entryPageUrl:");
    if (this.entryPageUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.entryPageUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("descriptionText:");
    if (this.descriptionText == null) {
      sb.append("null");
    } else {
      sb.append(this.descriptionText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("provider:");
    if (this.provider == null) {
      sb.append("null");
    } else {
      sb.append(this.provider);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicType:");
    if (this.publicType == null) {
      sb.append("null");
    } else {
      sb.append(this.publicType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iconImage:");
    if (this.iconImage == null) {
      sb.append("null");
    } else {
      sb.append(this.iconImage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("permissions:");
    if (this.permissions == null) {
      sb.append("null");
    } else {
      sb.append(this.permissions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iconThumbnailImage:");
    if (this.iconThumbnailImage == null) {
      sb.append("null");
    } else {
      sb.append(this.iconThumbnailImage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelConfigurations:");
    if (this.channelConfigurations == null) {
      sb.append("null");
    } else {
      sb.append(this.channelConfigurations);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (provider != null) {
      provider.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChannelInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChannelInfoStandardScheme getScheme() {
      return new ChannelInfoStandardScheme();
    }
  }

  private static class ChannelInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChannelInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChannelInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelId = iprot.readString();
              struct.setChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENTRY_PAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entryPageUrl = iprot.readString();
              struct.setEntryPageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESCRIPTION_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.descriptionText = iprot.readString();
              struct.setDescriptionTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROVIDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.provider = new ChannelProvider();
              struct.provider.read(iprot);
              struct.setProviderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PUBLIC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publicType = PublicType.findByValue(iprot.readI32());
              struct.setPublicTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ICON_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iconImage = iprot.readString();
              struct.setIconImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.permissions = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.permissions.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ICON_THUMBNAIL_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iconThumbnailImage = iprot.readString();
              struct.setIconThumbnailImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CHANNEL_CONFIGURATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.channelConfigurations = new java.util.ArrayList<ChannelConfiguration>(_list3.size);
                @org.apache.thrift.annotation.Nullable ChannelConfiguration _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = ChannelConfiguration.findByValue(iprot.readI32());
                  if (_elem4 != null)
                  {
                    struct.channelConfigurations.add(_elem4);
                  }
                }
                iprot.readListEnd();
              }
              struct.setChannelConfigurationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChannelInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(struct.channelId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.entryPageUrl != null) {
        oprot.writeFieldBegin(ENTRY_PAGE_URL_FIELD_DESC);
        oprot.writeString(struct.entryPageUrl);
        oprot.writeFieldEnd();
      }
      if (struct.descriptionText != null) {
        oprot.writeFieldBegin(DESCRIPTION_TEXT_FIELD_DESC);
        oprot.writeString(struct.descriptionText);
        oprot.writeFieldEnd();
      }
      if (struct.provider != null) {
        oprot.writeFieldBegin(PROVIDER_FIELD_DESC);
        struct.provider.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.publicType != null) {
        oprot.writeFieldBegin(PUBLIC_TYPE_FIELD_DESC);
        oprot.writeI32(struct.publicType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.iconImage != null) {
        oprot.writeFieldBegin(ICON_IMAGE_FIELD_DESC);
        oprot.writeString(struct.iconImage);
        oprot.writeFieldEnd();
      }
      if (struct.permissions != null) {
        oprot.writeFieldBegin(PERMISSIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.permissions.size()));
          for (java.lang.String _iter6 : struct.permissions)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.iconThumbnailImage != null) {
        oprot.writeFieldBegin(ICON_THUMBNAIL_IMAGE_FIELD_DESC);
        oprot.writeString(struct.iconThumbnailImage);
        oprot.writeFieldEnd();
      }
      if (struct.channelConfigurations != null) {
        oprot.writeFieldBegin(CHANNEL_CONFIGURATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.channelConfigurations.size()));
          for (ChannelConfiguration _iter7 : struct.channelConfigurations)
          {
            oprot.writeI32(_iter7.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChannelInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChannelInfoTupleScheme getScheme() {
      return new ChannelInfoTupleScheme();
    }
  }

  private static class ChannelInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChannelInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChannelInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetChannelId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetEntryPageUrl()) {
        optionals.set(2);
      }
      if (struct.isSetDescriptionText()) {
        optionals.set(3);
      }
      if (struct.isSetProvider()) {
        optionals.set(4);
      }
      if (struct.isSetPublicType()) {
        optionals.set(5);
      }
      if (struct.isSetIconImage()) {
        optionals.set(6);
      }
      if (struct.isSetPermissions()) {
        optionals.set(7);
      }
      if (struct.isSetIconThumbnailImage()) {
        optionals.set(8);
      }
      if (struct.isSetChannelConfigurations()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetChannelId()) {
        oprot.writeString(struct.channelId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetEntryPageUrl()) {
        oprot.writeString(struct.entryPageUrl);
      }
      if (struct.isSetDescriptionText()) {
        oprot.writeString(struct.descriptionText);
      }
      if (struct.isSetProvider()) {
        struct.provider.write(oprot);
      }
      if (struct.isSetPublicType()) {
        oprot.writeI32(struct.publicType.getValue());
      }
      if (struct.isSetIconImage()) {
        oprot.writeString(struct.iconImage);
      }
      if (struct.isSetPermissions()) {
        {
          oprot.writeI32(struct.permissions.size());
          for (java.lang.String _iter8 : struct.permissions)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetIconThumbnailImage()) {
        oprot.writeString(struct.iconThumbnailImage);
      }
      if (struct.isSetChannelConfigurations()) {
        {
          oprot.writeI32(struct.channelConfigurations.size());
          for (ChannelConfiguration _iter9 : struct.channelConfigurations)
          {
            oprot.writeI32(_iter9.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChannelInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.channelId = iprot.readString();
        struct.setChannelIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.entryPageUrl = iprot.readString();
        struct.setEntryPageUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.descriptionText = iprot.readString();
        struct.setDescriptionTextIsSet(true);
      }
      if (incoming.get(4)) {
        struct.provider = new ChannelProvider();
        struct.provider.read(iprot);
        struct.setProviderIsSet(true);
      }
      if (incoming.get(5)) {
        struct.publicType = PublicType.findByValue(iprot.readI32());
        struct.setPublicTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.iconImage = iprot.readString();
        struct.setIconImageIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.permissions = new java.util.ArrayList<java.lang.String>(_list10.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readString();
            struct.permissions.add(_elem11);
          }
        }
        struct.setPermissionsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.iconThumbnailImage = iprot.readString();
        struct.setIconThumbnailImageIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.channelConfigurations = new java.util.ArrayList<ChannelConfiguration>(_list13.size);
          @org.apache.thrift.annotation.Nullable ChannelConfiguration _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = ChannelConfiguration.findByValue(iprot.readI32());
            if (_elem14 != null)
            {
              struct.channelConfigurations.add(_elem14);
            }
          }
        }
        struct.setChannelConfigurationsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

