/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
public class ContactType implements org.apache.thrift.TEnum {

  public static final ContactType MID = new ContactType(0);
  public static final ContactType PHONE = new ContactType(1);
  public static final ContactType EMAIL = new ContactType(2);
  public static final ContactType USERID = new ContactType(3);
  public static final ContactType PROXIMITY = new ContactType(4);
  public static final ContactType GROUP = new ContactType(5);
  public static final ContactType USER = new ContactType(6);
  public static final ContactType QRCODE = new ContactType(7);
  public static final ContactType PROMOTION_BOT = new ContactType(8);
  public static final ContactType REPAIR = new ContactType(128);
  public static final ContactType FACEBOOK = new ContactType(2305);
  public static final ContactType SINA = new ContactType(2306);
  public static final ContactType RENREN = new ContactType(2307);
  public static final ContactType FEIXIN = new ContactType(2308);

  private final int value;

  private ContactType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static ContactType findByValue(int value) { 
    switch (value) {
      case 0:
        return MID;
      case 1:
        return PHONE;
      case 2:
        return EMAIL;
      case 3:
        return USERID;
      case 4:
        return PROXIMITY;
      case 5:
        return GROUP;
      case 6:
        return USER;
      case 7:
        return QRCODE;
      case 8:
        return PROMOTION_BOT;
      case 128:
        return REPAIR;
      case 2305:
        return FACEBOOK;
      case 2306:
        return SINA;
      case 2307:
        return RENREN;
      case 2308:
        return FEIXIN;
      default:
        return null;
    }
  }
}
