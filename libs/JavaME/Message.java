/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class Message implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("Message");

  private static final TField FROM__FIELD_DESC = new TField("from_", TType.STRING, (short)1);
  private static final TField TO_FIELD_DESC = new TField("to", TType.STRING, (short)2);
  private static final TField TO_TYPE_FIELD_DESC = new TField("toType", TType.I32, (short)3);
  private static final TField ID_FIELD_DESC = new TField("id", TType.STRING, (short)4);
  private static final TField CREATED_TIME_FIELD_DESC = new TField("createdTime", TType.I64, (short)5);
  private static final TField DELIVERED_TIME_FIELD_DESC = new TField("deliveredTime", TType.I64, (short)6);
  private static final TField TEXT_FIELD_DESC = new TField("text", TType.STRING, (short)10);
  private static final TField LOCATION_FIELD_DESC = new TField("location", TType.STRUCT, (short)11);
  private static final TField HAS_CONTENT_FIELD_DESC = new TField("hasContent", TType.BOOL, (short)14);
  private static final TField CONTENT_TYPE_FIELD_DESC = new TField("contentType", TType.I32, (short)15);
  private static final TField CONTENT_PREVIEW_FIELD_DESC = new TField("contentPreview", TType.STRING, (short)17);
  private static final TField CONTENT_METADATA_FIELD_DESC = new TField("contentMetadata", TType.MAP, (short)18);

  private String from_;
  private String to;
  private MIDType toType;
  private String id;
  private long createdTime;
  private long deliveredTime;
  private String text;
  private Location location;
  private boolean hasContent;
  private ContentType contentType;
  private byte[] contentPreview;
  private Hashtable contentMetadata;

  // isset id assignments
  private static final int __CREATEDTIME_ISSET_ID = 0;
  private static final int __DELIVEREDTIME_ISSET_ID = 1;
  private static final int __HASCONTENT_ISSET_ID = 2;
  private boolean[] __isset_vector = new boolean[3];

  public Message() {
  }

  public Message(
    String from_,
    String to,
    MIDType toType,
    String id,
    long createdTime,
    long deliveredTime,
    String text,
    Location location,
    boolean hasContent,
    ContentType contentType,
    byte[] contentPreview,
    Hashtable contentMetadata)
  {
    this();
    this.from_ = from_;
    this.to = to;
    this.toType = toType;
    this.id = id;
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
    this.deliveredTime = deliveredTime;
    setDeliveredTimeIsSet(true);
    this.text = text;
    this.location = location;
    this.hasContent = hasContent;
    setHasContentIsSet(true);
    this.contentType = contentType;
    this.contentPreview = contentPreview;
    this.contentMetadata = contentMetadata;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetFrom_()) {
      this.from_ = other.from_;
    }
    if (other.isSetTo()) {
      this.to = other.to;
    }
    if (other.isSetToType()) {
      this.toType = other.toType;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.createdTime = other.createdTime;
    this.deliveredTime = other.deliveredTime;
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetLocation()) {
      this.location = new Location(other.location);
    }
    this.hasContent = other.hasContent;
    if (other.isSetContentType()) {
      this.contentType = other.contentType;
    }
    if (other.isSetContentPreview()) {
      this.contentPreview = new byte[other.contentPreview.length];
      System.arraycopy(other.contentPreview, 0, contentPreview, 0, other.contentPreview.length);
    }
    if (other.isSetContentMetadata()) {
      Hashtable __this__contentMetadata = new Hashtable();
      for (Enumeration other_enum = other.contentMetadata.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        String other_element_value = (String)other.contentMetadata.get(other_element_key);

        String __this__contentMetadata_copy_key = other_element_key;

        String __this__contentMetadata_copy_value = other_element_value;

        __this__contentMetadata.put(__this__contentMetadata_copy_key, __this__contentMetadata_copy_value);
      }
      this.contentMetadata = __this__contentMetadata;
    }
  }

  public Message deepCopy() {
    return new Message(this);
  }

  public void clear() {
    this.from_ = null;
    this.to = null;
    this.toType = null;
    this.id = null;
    setCreatedTimeIsSet(false);
    this.createdTime = 0;
    setDeliveredTimeIsSet(false);
    this.deliveredTime = 0;
    this.text = null;
    this.location = null;
    setHasContentIsSet(false);
    this.hasContent = false;
    this.contentType = null;
    this.contentPreview = null;
    this.contentMetadata = null;
  }

  public String getFrom_() {
    return this.from_;
  }

  public void setFrom_(String from_) {
    this.from_ = from_;
  }

  public void unsetFrom_() {
    this.from_ = null;
  }

  /** Returns true if field from_ is set (has been assigned a value) and false otherwise */
  public boolean isSetFrom_() {
    return this.from_ != null;
  }

  public void setFrom_IsSet(boolean value) {
    if (!value) {
      this.from_ = null;
    }
  }

  public String getTo() {
    return this.to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public void unsetTo() {
    this.to = null;
  }

  /** Returns true if field to is set (has been assigned a value) and false otherwise */
  public boolean isSetTo() {
    return this.to != null;
  }

  public void setToIsSet(boolean value) {
    if (!value) {
      this.to = null;
    }
  }

  /**
   * 
   * @see MIDType
   */
  public MIDType getToType() {
    return this.toType;
  }

  /**
   * 
   * @see MIDType
   */
  public void setToType(MIDType toType) {
    this.toType = toType;
  }

  public void unsetToType() {
    this.toType = null;
  }

  /** Returns true if field toType is set (has been assigned a value) and false otherwise */
  public boolean isSetToType() {
    return this.toType != null;
  }

  public void setToTypeIsSet(boolean value) {
    if (!value) {
      this.toType = null;
    }
  }

  public String getId() {
    return this.id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public long getCreatedTime() {
    return this.createdTime;
  }

  public void setCreatedTime(long createdTime) {
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
  }

  public void unsetCreatedTime() {
    __isset_vector[__CREATEDTIME_ISSET_ID] = false;
  }

  /** Returns true if field createdTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedTime() {
    return __isset_vector[__CREATEDTIME_ISSET_ID];
  }

  public void setCreatedTimeIsSet(boolean value) {
    __isset_vector[__CREATEDTIME_ISSET_ID] = value;
  }

  public long getDeliveredTime() {
    return this.deliveredTime;
  }

  public void setDeliveredTime(long deliveredTime) {
    this.deliveredTime = deliveredTime;
    setDeliveredTimeIsSet(true);
  }

  public void unsetDeliveredTime() {
    __isset_vector[__DELIVEREDTIME_ISSET_ID] = false;
  }

  /** Returns true if field deliveredTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveredTime() {
    return __isset_vector[__DELIVEREDTIME_ISSET_ID];
  }

  public void setDeliveredTimeIsSet(boolean value) {
    __isset_vector[__DELIVEREDTIME_ISSET_ID] = value;
  }

  public String getText() {
    return this.text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public Location getLocation() {
    return this.location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public boolean isHasContent() {
    return this.hasContent;
  }

  public void setHasContent(boolean hasContent) {
    this.hasContent = hasContent;
    setHasContentIsSet(true);
  }

  public void unsetHasContent() {
    __isset_vector[__HASCONTENT_ISSET_ID] = false;
  }

  /** Returns true if field hasContent is set (has been assigned a value) and false otherwise */
  public boolean isSetHasContent() {
    return __isset_vector[__HASCONTENT_ISSET_ID];
  }

  public void setHasContentIsSet(boolean value) {
    __isset_vector[__HASCONTENT_ISSET_ID] = value;
  }

  /**
   * 
   * @see ContentType
   */
  public ContentType getContentType() {
    return this.contentType;
  }

  /**
   * 
   * @see ContentType
   */
  public void setContentType(ContentType contentType) {
    this.contentType = contentType;
  }

  public void unsetContentType() {
    this.contentType = null;
  }

  /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return this.contentType != null;
  }

  public void setContentTypeIsSet(boolean value) {
    if (!value) {
      this.contentType = null;
    }
  }

  public byte[] getContentPreview() {
    return this.contentPreview;
  }

  public void setContentPreview(byte[] contentPreview) {
    this.contentPreview = contentPreview;
  }

  public void unsetContentPreview() {
    this.contentPreview = null;
  }

  /** Returns true if field contentPreview is set (has been assigned a value) and false otherwise */
  public boolean isSetContentPreview() {
    return this.contentPreview != null;
  }

  public void setContentPreviewIsSet(boolean value) {
    if (!value) {
      this.contentPreview = null;
    }
  }

  public int getContentMetadataSize() {
    return (this.contentMetadata == null) ? 0 : this.contentMetadata.size();
  }

  public void putToContentMetadata(String key, String val) {
    if (this.contentMetadata == null) {
      this.contentMetadata = new Hashtable();
    }
    this.contentMetadata.put(key, val);
  }

  public Hashtable getContentMetadata() {
    return this.contentMetadata;
  }

  public void setContentMetadata(Hashtable contentMetadata) {
    this.contentMetadata = contentMetadata;
  }

  public void unsetContentMetadata() {
    this.contentMetadata = null;
  }

  /** Returns true if field contentMetadata is set (has been assigned a value) and false otherwise */
  public boolean isSetContentMetadata() {
    return this.contentMetadata != null;
  }

  public void setContentMetadataIsSet(boolean value) {
    if (!value) {
      this.contentMetadata = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_from_ = true && this.isSetFrom_();
    boolean that_present_from_ = true && that.isSetFrom_();
    if (this_present_from_ || that_present_from_) {
      if (!(this_present_from_ && that_present_from_))
        return false;
      if (!this.from_.equals(that.from_))
        return false;
    }

    boolean this_present_to = true && this.isSetTo();
    boolean that_present_to = true && that.isSetTo();
    if (this_present_to || that_present_to) {
      if (!(this_present_to && that_present_to))
        return false;
      if (!this.to.equals(that.to))
        return false;
    }

    boolean this_present_toType = true && this.isSetToType();
    boolean that_present_toType = true && that.isSetToType();
    if (this_present_toType || that_present_toType) {
      if (!(this_present_toType && that_present_toType))
        return false;
      if (!this.toType.equals(that.toType))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_createdTime = true;
    boolean that_present_createdTime = true;
    if (this_present_createdTime || that_present_createdTime) {
      if (!(this_present_createdTime && that_present_createdTime))
        return false;
      if (this.createdTime != that.createdTime)
        return false;
    }

    boolean this_present_deliveredTime = true;
    boolean that_present_deliveredTime = true;
    if (this_present_deliveredTime || that_present_deliveredTime) {
      if (!(this_present_deliveredTime && that_present_deliveredTime))
        return false;
      if (this.deliveredTime != that.deliveredTime)
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_hasContent = true;
    boolean that_present_hasContent = true;
    if (this_present_hasContent || that_present_hasContent) {
      if (!(this_present_hasContent && that_present_hasContent))
        return false;
      if (this.hasContent != that.hasContent)
        return false;
    }

    boolean this_present_contentType = true && this.isSetContentType();
    boolean that_present_contentType = true && that.isSetContentType();
    if (this_present_contentType || that_present_contentType) {
      if (!(this_present_contentType && that_present_contentType))
        return false;
      if (!this.contentType.equals(that.contentType))
        return false;
    }

    boolean this_present_contentPreview = true && this.isSetContentPreview();
    boolean that_present_contentPreview = true && that.isSetContentPreview();
    if (this_present_contentPreview || that_present_contentPreview) {
      if (!(this_present_contentPreview && that_present_contentPreview))
        return false;
      if (TBaseHelper.compareTo(this.contentPreview, that.contentPreview) != 0)
        return false;
    }

    boolean this_present_contentMetadata = true && this.isSetContentMetadata();
    boolean that_present_contentMetadata = true && that.isSetContentMetadata();
    if (this_present_contentMetadata || that_present_contentMetadata) {
      if (!(this_present_contentMetadata && that_present_contentMetadata))
        return false;
      if (!this.contentMetadata.equals(that.contentMetadata))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    Message other = (Message)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetFrom_(), other.isSetFrom_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrom_()) {
      lastComparison = TBaseHelper.compareTo(this.from_, other.from_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetTo(), other.isSetTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo()) {
      lastComparison = TBaseHelper.compareTo(this.to, other.to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetToType(), other.isSetToType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToType()) {
      lastComparison = TBaseHelper.compareTo(this.toType, other.toType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCreatedTime(), other.isSetCreatedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedTime()) {
      lastComparison = TBaseHelper.compareTo(this.createdTime, other.createdTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetDeliveredTime(), other.isSetDeliveredTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveredTime()) {
      lastComparison = TBaseHelper.compareTo(this.deliveredTime, other.deliveredTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetText(), other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetLocation(), other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = this.location.compareTo(other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetHasContent(), other.isSetHasContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasContent()) {
      lastComparison = TBaseHelper.compareTo(this.hasContent, other.hasContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetContentType(), other.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = TBaseHelper.compareTo(this.contentType, other.contentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetContentPreview(), other.isSetContentPreview());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentPreview()) {
      lastComparison = TBaseHelper.compareTo(this.contentPreview, other.contentPreview);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetContentMetadata(), other.isSetContentMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentMetadata()) {
      lastComparison = TBaseHelper.compareTo(this.contentMetadata, other.contentMetadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // FROM_
          if (field.type == TType.STRING) {
            this.from_ = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TO
          if (field.type == TType.STRING) {
            this.to = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TO_TYPE
          if (field.type == TType.I32) {
            this.toType = MIDType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ID
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CREATED_TIME
          if (field.type == TType.I64) {
            this.createdTime = iprot.readI64();
            setCreatedTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // DELIVERED_TIME
          if (field.type == TType.I64) {
            this.deliveredTime = iprot.readI64();
            setDeliveredTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // TEXT
          if (field.type == TType.STRING) {
            this.text = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // LOCATION
          if (field.type == TType.STRUCT) {
            this.location = new Location();
            this.location.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // HAS_CONTENT
          if (field.type == TType.BOOL) {
            this.hasContent = iprot.readBool();
            setHasContentIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // CONTENT_TYPE
          if (field.type == TType.I32) {
            this.contentType = ContentType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // CONTENT_PREVIEW
          if (field.type == TType.STRING) {
            this.contentPreview = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // CONTENT_METADATA
          if (field.type == TType.MAP) {
            {
              TMap _map96 = iprot.readMapBegin();
              this.contentMetadata = new Hashtable(2*_map96.size);
              for (int _i97 = 0; _i97 < _map96.size; ++_i97)
              {
                String _key98;
                String _val99;
                _key98 = iprot.readString();
                _val99 = iprot.readString();
                this.contentMetadata.put(_key98, _val99);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.from_ != null) {
      oprot.writeFieldBegin(FROM__FIELD_DESC);
      oprot.writeString(this.from_);
      oprot.writeFieldEnd();
    }
    if (this.to != null) {
      oprot.writeFieldBegin(TO_FIELD_DESC);
      oprot.writeString(this.to);
      oprot.writeFieldEnd();
    }
    if (this.toType != null) {
      oprot.writeFieldBegin(TO_TYPE_FIELD_DESC);
      oprot.writeI32(this.toType.getValue());
      oprot.writeFieldEnd();
    }
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
    oprot.writeI64(this.createdTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DELIVERED_TIME_FIELD_DESC);
    oprot.writeI64(this.deliveredTime);
    oprot.writeFieldEnd();
    if (this.text != null) {
      oprot.writeFieldBegin(TEXT_FIELD_DESC);
      oprot.writeString(this.text);
      oprot.writeFieldEnd();
    }
    if (this.location != null) {
      oprot.writeFieldBegin(LOCATION_FIELD_DESC);
      this.location.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(HAS_CONTENT_FIELD_DESC);
    oprot.writeBool(this.hasContent);
    oprot.writeFieldEnd();
    if (this.contentType != null) {
      oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
      oprot.writeI32(this.contentType.getValue());
      oprot.writeFieldEnd();
    }
    if (this.contentPreview != null) {
      oprot.writeFieldBegin(CONTENT_PREVIEW_FIELD_DESC);
      oprot.writeBinary(this.contentPreview);
      oprot.writeFieldEnd();
    }
    if (this.contentMetadata != null) {
      oprot.writeFieldBegin(CONTENT_METADATA_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.contentMetadata.size()));
        for (Enumeration _iter100_enum = this.contentMetadata.keys(); _iter100_enum.hasMoreElements(); )         {
          String _iter100 = (String)_iter100_enum.nextElement();
          oprot.writeString(_iter100);
          oprot.writeString(((String)this.contentMetadata.get(_iter100)));
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("Message(");
    boolean first = true;

    sb.append("from_:");
    if (this.from_ == null) {
      sb.append("null");
    } else {
      sb.append(this.from_);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("to:");
    if (this.to == null) {
      sb.append("null");
    } else {
      sb.append(this.to);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toType:");
    if (this.toType == null) {
      sb.append("null");
    } else {
      sb.append(this.toType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdTime:");
    sb.append(this.createdTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveredTime:");
    sb.append(this.deliveredTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("text:");
    if (this.text == null) {
      sb.append("null");
    } else {
      sb.append(this.text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasContent:");
    sb.append(this.hasContent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentType:");
    if (this.contentType == null) {
      sb.append("null");
    } else {
      sb.append(this.contentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentPreview:");
    if (this.contentPreview == null) {
      sb.append("null");
    } else {
      TBaseHelper.toString(this.contentPreview, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentMetadata:");
    if (this.contentMetadata == null) {
      sb.append("null");
    } else {
      sb.append(this.contentMetadata);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

