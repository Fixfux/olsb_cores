--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'line_constants'

ApplicationType = {
  IOS = 16,
  IOS_RC = 17,
  IOS_BETA = 18,
  IOS_ALPHA = 19,
  ANDROID = 32,
  ANDROID_RC = 33,
  ANDROID_BETA = 34,
  ANDROID_ALPHA = 35,
  WAP = 48,
  WAP_RC = 49,
  WAP_BETA = 50,
  WAP_ALPHA = 51,
  BOT = 64,
  BOT_RC = 65,
  BOT_BETA = 66,
  BOT_ALPHA = 67,
  WEB = 80,
  WEB_RC = 81,
  WEB_BETA = 82,
  WEB_ALPHA = 83,
  DESKTOPWIN = 96,
  DESKTOPWIN_RC = 97,
  DESKTOPWIN_BETA = 98,
  DESKTOPWIN_ALPHA = 99,
  DESKTOPMAC = 112,
  DESKTOPMAC_RC = 113,
  DESKTOPMAC_BETA = 114,
  DESKTOPMAC_ALPHA = 115,
  CHANNELGW = 128,
  CHANNELGW_RC = 129,
  CHANNELGW_BETA = 130,
  CHANNELGW_ALPHA = 131,
  CHANNELCP = 144,
  CHANNELCP_RC = 145,
  CHANNELCP_BETA = 146,
  CHANNELCP_ALPHA = 147,
  WINPHONE = 160,
  WINPHONE_RC = 161,
  WINPHONE_BETA = 162,
  WINPHONE_ALPHA = 163,
  BLACKBERRY = 176,
  BLACKBERRY_RC = 177,
  BLACKBERRY_BETA = 178,
  BLACKBERRY_ALPHA = 179,
  WINMETRO = 192,
  WINMETRO_RC = 193,
  WINMETRO_BETA = 194,
  WINMETRO_ALPHA = 195,
  S40 = 208,
  S40_RC = 209,
  S40_BETA = 210,
  S40_ALPHA = 211,
  CHRONO = 224,
  CHRONO_RC = 225,
  CHRONO_BETA = 226,
  CHRONO_ALPHA = 227,
  TIZEN = 256,
  TIZEN_RC = 257,
  TIZEN_BETA = 258,
  TIZEN_ALPHA = 259,
  VIRTUAL = 272
}

BuddyBannerLinkType = {
  BUDDY_BANNER_LINK_HIDDEN = 0,
  BUDDY_BANNER_LINK_MID = 1,
  BUDDY_BANNER_LINK_URL = 2
}

BuddyOnAirType = {
  NORMAL = 0,
  LIVE = 1,
  VOIP = 2
}

BuddyResultState = {
  ACCEPTED = 1,
  SUCCEEDED = 2,
  FAILED = 3,
  CANCELLED = 4,
  NOTIFY_FAILED = 5,
  STORING = 11,
  UPLOADING = 21,
  NOTIFYING = 31
}

BuddySearchRequestSource = {
  NA = 0,
  FRIEND_VIEW = 1,
  OFFICIAL_ACCOUNT_VIEW = 2
}

CarrierCode = {
  NOT_SPECIFIED = 0,
  JP_DOCOMO = 1,
  JP_AU = 2,
  JP_SOFTBANK = 3,
  KR_SKT = 17,
  KR_KT = 18,
  KR_LGT = 19
}

ChannelConfiguration = {
  MESSAGE = 0,
  MESSAGE_NOTIFICATION = 1,
  NOTIFICATION_CENTER = 2
}

ChannelErrorCode = {
  ILLEGAL_ARGUMENT = 0,
  INTERNAL_ERROR = 1,
  CONNECTION_ERROR = 2,
  AUTHENTICATIONI_FAILED = 3,
  NEED_PERMISSION_APPROVAL = 4,
  COIN_NOT_USABLE = 5
}

ChannelSyncType = {
  SYNC = 0,
  REMOVE = 1
}

ContactAttribute = {
  CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1,
  CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2,
  CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16,
  CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32
}

ContactCategory = {
  NORMAL = 0,
  RECOMMEND = 1
}

ContactRelation = {
  ONEWAY = 0,
  BOTH = 1,
  NOT_REGISTERED = 2
}

ContactSetting = {
  CONTACT_SETTING_NOTIFICATION_DISABLE = 1,
  CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2,
  CONTACT_SETTING_CONTACT_HIDE = 4,
  CONTACT_SETTING_FAVORITE = 8,
  CONTACT_SETTING_DELETE = 16
}

ContactStatus = {
  UNSPECIFIED = 0,
  FRIEND = 1,
  FRIEND_BLOCKED = 2,
  RECOMMEND = 3,
  RECOMMEND_BLOCKED = 4,
  DELETED = 5,
  DELETED_BLOCKED = 6
}

ContactType = {
  MID = 0,
  PHONE = 1,
  EMAIL = 2,
  USERID = 3,
  PROXIMITY = 4,
  GROUP = 5,
  USER = 6,
  QRCODE = 7,
  PROMOTION_BOT = 8,
  REPAIR = 128,
  FACEBOOK = 2305,
  SINA = 2306,
  RENREN = 2307,
  FEIXIN = 2308
}

ContentType = {
  NONE = 0,
  IMAGE = 1,
  VIDEO = 2,
  AUDIO = 3,
  HTML = 4,
  PDF = 5,
  CALL = 6,
  STICKER = 7,
  PRESENCE = 8,
  GIFT = 9,
  GROUPBOARD = 10,
  APPLINK = 11,
  LINK = 12,
  CONTACT = 13,
  FILE = 14,
  LOCATION = 15,
  POSTNOTIFICATION = 16,
  RICH = 17,
  CHATEVENT = 18
}

CustomMode = {
  PROMOTION_FRIENDS_INVITE = 1,
  CAPABILITY_SERVER_SIDE_SMS = 2,
  LINE_CLIENT_ANALYTICS_CONFIGURATION = 3
}

EmailConfirmationStatus = {
  NOT_SPECIFIED = 0,
  NOT_YET = 1,
  DONE = 3
}

EmailConfirmationType = {
  SERVER_SIDE_EMAIL = 0,
  CLIENT_SIDE_EMAIL = 1
}

ErrorCode = {
  ILLEGAL_ARGUMENT = 0,
  AUTHENTICATION_FAILED = 1,
  DB_FAILED = 2,
  INVALID_STATE = 3,
  EXCESSIVE_ACCESS = 4,
  NOT_FOUND = 5,
  INVALID_LENGTH = 6,
  NOT_AVAILABLE_USER = 7,
  NOT_AUTHORIZED_DEVICE = 8,
  INVALID_MID = 9,
  NOT_A_MEMBER = 10,
  INCOMPATIBLE_APP_VERSION = 11,
  NOT_READY = 12,
  NOT_AVAILABLE_SESSION = 13,
  NOT_AUTHORIZED_SESSION = 14,
  SYSTEM_ERROR = 15,
  NO_AVAILABLE_VERIFICATION_METHOD = 16,
  NOT_AUTHENTICATED = 17,
  INVALID_IDENTITY_CREDENTIAL = 18,
  NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19,
  INTERNAL_ERROR = 20,
  NO_SUCH_IDENTITY_IDENFIER = 21,
  DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22,
  ILLEGAL_IDENTITY_CREDENTIAL = 23,
  UNKNOWN_CHANNEL = 24,
  NO_SUCH_MESSAGE_BOX = 25,
  NOT_AVAILABLE_MESSAGE_BOX = 26,
  CHANNEL_DOES_NOT_MATCH = 27,
  NOT_YOUR_MESSAGE = 28,
  MESSAGE_DEFINED_ERROR = 29,
  USER_CANNOT_ACCEPT_PRESENTS = 30,
  USER_NOT_STICKER_OWNER = 32,
  MAINTENANCE_ERROR = 33,
  ACCOUNT_NOT_MATCHED = 34,
  ABUSE_BLOCK = 35,
  NOT_FRIEND = 36,
  NOT_ALLOWED_CALL = 37,
  BLOCK_FRIEND = 38,
  INCOMPATIBLE_VOIP_VERSION = 39,
  INVALID_SNS_ACCESS_TOKEN = 40,
  EXTERNAL_SERVICE_NOT_AVAILABLE = 41,
  NOT_ALLOWED_ADD_CONTACT = 42,
  NOT_CERTIFICATED = 43,
  NOT_ALLOWED_SECONDARY_DEVICE = 44,
  INVALID_PIN_CODE = 45,
  NOT_FOUND_IDENTITY_CREDENTIAL = 46,
  EXCEED_FILE_MAX_SIZE = 47,
  EXCEED_DAILY_QUOTA = 48,
  NOT_SUPPORT_SEND_FILE = 49,
  MUST_UPGRADE = 50,
  NOT_AVAILABLE_PIN_CODE_SESSION = 51
}

FeatureType = {
  OBJECT_STORAGE = 1
}

GroupAttribute = {
  NAME = 1,
  PICTURE_STATUS = 2,
  ALL = 255
}

IdentityProvider = {
  UNKNOWN = 0,
  LINE = 1,
  NAVER_KR = 2
}

LoginResultType = {
  SUCCESS = 1,
  REQUIRE_QRCODE = 2,
  REQUIRE_DEVICE_CONFIRM = 3
}

MessageOperationType = {
  SEND_MESSAGE = 1,
  RECEIVE_MESSAGE = 2,
  READ_MESSAGE = 3,
  NOTIFIED_READ_MESSAGE = 4,
  NOTIFIED_JOIN_CHAT = 5,
  FAILED_SEND_MESSAGE = 6,
  SEND_CONTENT = 7,
  SEND_CONTENT_RECEIPT = 8,
  SEND_CHAT_REMOVED = 9,
  REMOVE_ALL_MESSAGES = 10
}

MIDType = {
  USER = 0,
  ROOM = 1,
  GROUP = 2
}

ModificationType = {
  ADD = 0,
  REMOVE = 1,
  MODIFY = 2
}

NotificationItemFetchMode = {
  ALL = 0,
  APPEND = 1
}

NotificationQueueType = {
  GLOBAL = 1,
  MESSAGE = 2,
  PRIMARY = 3
}

NotificationStatus = {
  NOTIFICATION_ITEM_EXIST = 1,
  TIMELINE_ITEM_EXIST = 2,
  NOTE_GROUP_NEW_ITEM_EXIST = 4,
  TIMELINE_BUDDYGROUP_CHANGED = 8,
  NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16,
  ALBUM_ITEM_EXIST = 32,
  TIMELINE_ITEM_DELETED = 64
}

NotificationType = {
  APPLE_APNS = 1,
  GOOGLE_C2DM = 2,
  NHN_NNI = 3,
  SKT_AOM = 4,
  MS_MPNS = 5,
  RIM_BIS = 6,
  GOOGLE_GCM = 7,
  NOKIA_NNAPI = 8,
  TIZEN = 9,
  LINE_BOT = 17,
  LINE_WAP = 18
}

OpStatus = {
  NORMAL = 0,
  ALERT_DISABLED = 1
}

OpType = {
  END_OF_OPERATION = 0,
  UPDATE_PROFILE = 1,
  NOTIFIED_UPDATE_PROFILE = 2,
  REGISTER_USERID = 3,
  ADD_CONTACT = 4,
  NOTIFIED_ADD_CONTACT = 5,
  BLOCK_CONTACT = 6,
  UNBLOCK_CONTACT = 7,
  NOTIFIED_RECOMMEND_CONTACT = 8,
  CREATE_GROUP = 9,
  UPDATE_GROUP = 10,
  NOTIFIED_UPDATE_GROUP = 11,
  INVITE_INTO_GROUP = 12,
  NOTIFIED_INVITE_INTO_GROUP = 13,
  LEAVE_GROUP = 14,
  NOTIFIED_LEAVE_GROUP = 15,
  ACCEPT_GROUP_INVITATION = 16,
  NOTIFIED_ACCEPT_GROUP_INVITATION = 17,
  KICKOUT_FROM_GROUP = 18,
  NOTIFIED_KICKOUT_FROM_GROUP = 19,
  CREATE_ROOM = 20,
  INVITE_INTO_ROOM = 21,
  NOTIFIED_INVITE_INTO_ROOM = 22,
  LEAVE_ROOM = 23,
  NOTIFIED_LEAVE_ROOM = 24,
  SEND_MESSAGE = 25,
  RECEIVE_MESSAGE = 26,
  SEND_MESSAGE_RECEIPT = 27,
  RECEIVE_MESSAGE_RECEIPT = 28,
  SEND_CONTENT_RECEIPT = 29,
  RECEIVE_ANNOUNCEMENT = 30,
  CANCEL_INVITATION_GROUP = 31,
  NOTIFIED_CANCEL_INVITATION_GROUP = 32,
  NOTIFIED_UNREGISTER_USER = 33,
  REJECT_GROUP_INVITATION = 34,
  NOTIFIED_REJECT_GROUP_INVITATION = 35,
  UPDATE_SETTINGS = 36,
  NOTIFIED_REGISTER_USER = 37,
  INVITE_VIA_EMAIL = 38,
  NOTIFIED_REQUEST_RECOVERY = 39,
  SEND_CHAT_CHECKED = 40,
  SEND_CHAT_REMOVED = 41,
  NOTIFIED_FORCE_SYNC = 42,
  SEND_CONTENT = 43,
  SEND_MESSAGE_MYHOME = 44,
  NOTIFIED_UPDATE_CONTENT_PREVIEW = 45,
  REMOVE_ALL_MESSAGES = 46,
  NOTIFIED_UPDATE_PURCHASES = 47,
  DUMMY = 48,
  UPDATE_CONTACT = 49,
  NOTIFIED_RECEIVED_CALL = 50,
  CANCEL_CALL = 51,
  NOTIFIED_REDIRECT = 52,
  NOTIFIED_CHANNEL_SYNC = 53,
  FAILED_SEND_MESSAGE = 54,
  NOTIFIED_READ_MESSAGE = 55,
  FAILED_EMAIL_CONFIRMATION = 56,
  NOTIFIED_CHAT_CONTENT = 58,
  NOTIFIED_PUSH_NOTICENTER_ITEM = 59
}

PayloadType = {
  PAYLOAD_BUY = 101,
  PAYLOAD_CS = 111,
  PAYLOAD_BONUS = 121,
  PAYLOAD_EVENT = 131
}

PaymentPgType = {
  PAYMENT_PG_NONE = 0,
  PAYMENT_PG_AU = 1,
  PAYMENT_PG_AL = 2
}

PaymentType = {
  PAYMENT_APPLE = 1,
  PAYMENT_GOOGLE = 2
}

ProductBannerLinkType = {
  BANNER_LINK_NONE = 0,
  BANNER_LINK_ITEM = 1,
  BANNER_LINK_URL = 2,
  BANNER_LINK_CATEGORY = 3
}

ProductEventType = {
  NO_EVENT = 0,
  CARRIER_ANY = 65537,
  BUDDY_ANY = 131073,
  INSTALL_IOS = 196609,
  INSTALL_ANDROID = 196610,
  MISSION_ANY = 262145,
  MUSTBUY_ANY = 327681
}

ProfileAttribute = {
  EMAIL = 1,
  DISPLAY_NAME = 2,
  PHONETIC_NAME = 4,
  PICTURE = 8,
  STATUS_MESSAGE = 16,
  ALLOW_SEARCH_BY_USERID = 32,
  ALLOW_SEARCH_BY_EMAIL = 64,
  BUDDY_STATUS = 128,
  ALL = 255
}

PublicType = {
  HIDDEN = 0,
  PUBLIC = 1000
}

RedirectType = {
  NONE = 0,
  EXPIRE_SECOND = 1
}

RegistrationType = {
  PHONE = 0,
  EMAIL_WAP = 1,
  FACEBOOK = 2305,
  SINA = 2306,
  RENREN = 2307,
  FEIXIN = 2308
}

SettingsAttribute = {
  NOTIFICATION_ENABLE = 1,
  NOTIFICATION_MUTE_EXPIRATION = 2,
  NOTIFICATION_NEW_MESSAGE = 4,
  NOTIFICATION_GROUP_INVITATION = 8,
  NOTIFICATION_SHOW_MESSAGE = 16,
  NOTIFICATION_INCOMING_CALL = 32,
  PRIVACY_SYNC_CONTACTS = 64,
  PRIVACY_SEARCH_BY_PHONE_NUMBER = 128,
  NOTIFICATION_SOUND_MESSAGE = 256,
  NOTIFICATION_SOUND_GROUP = 512,
  CONTACT_MY_TICKET = 1024,
  IDENTITY_PROVIDER = 2048,
  IDENTITY_IDENTIFIER = 4096,
  PRIVACY_SEARCH_BY_USERID = 8192,
  PRIVACY_SEARCH_BY_EMAIL = 16384,
  PREFERENCE_LOCALE = 32768,
  NOTIFICATION_DISABLED_WITH_SUB = 65536,
  SNS_ACCOUNT = 524288,
  PHONE_REGISTRATION = 1048576,
  PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152,
  CUSTOM_MODE = 4194304,
  PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608,
  EMAIL_CONFIRMATION_STATUS = 16777216,
  PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432,
  ALL = 2147483647
}

SnsIdType = {
  FACEBOOK = 1,
  SINA = 2,
  RENREN = 3,
  FEIXIN = 4
}

SpammerReason = {
  OTHER = 0,
  ADVERTISING = 1,
  GENDER_HARASSMENT = 2,
  HARASSMENT = 3
}

SyncActionType = {
  SYNC = 0,
  REPORT = 1
}

SyncCategory = {
  PROFILE = 0,
  SETTINGS = 1,
  OPS = 2,
  CONTACT = 3,
  RECOMMEND = 4,
  BLOCK = 5,
  GROUP = 6,
  ROOM = 7,
  NOTIFICATION = 8
}

TMessageBoxStatus = {
  ACTIVATED = 1,
  UNREAD = 2
}

UniversalNotificationServiceErrorCode = {
  INTERNAL_ERROR = 0,
  INVALID_KEY = 1,
  ILLEGAL_ARGUMENT = 2,
  TOO_MANY_REQUEST = 3,
  AUTHENTICATION_FAILED = 4,
  NO_WRITE_PERMISSION = 5
}

UnregistrationReason = {
  UNREGISTRATION_REASON_UNREGISTER_USER = 1,
  UNREGISTRATION_REASON_UNBIND_DEVICE = 2
}

UserAgeType = {
  OVER = 1,
  UNDER = 2,
  UNDEFINED = 3
}

VerificationMethod = {
  NO_AVAILABLE = 0,
  PIN_VIA_SMS = 1,
  CALLERID_INDIGO = 2,
  PIN_VIA_TTS = 4,
  SKIP = 10
}

VerificationResult = {
  FAILED = 0,
  OK_NOT_REGISTERED_YET = 1,
  OK_REGISTERED_WITH_SAME_DEVICE = 2,
  OK_REGISTERED_WITH_ANOTHER_DEVICE = 3
}

WapInvitationType = {
  REGISTRATION = 1,
  CHAT = 2
}

AgeCheckDocomoResult = __TObject:new{
  authUrl,
  userAgeType
}

function AgeCheckDocomoResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.userAgeType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AgeCheckDocomoResult:write(oprot)
  oprot:writeStructBegin('AgeCheckDocomoResult')
  if self.authUrl ~= nil then
    oprot:writeFieldBegin('authUrl', TType.STRING, 1)
    oprot:writeString(self.authUrl)
    oprot:writeFieldEnd()
  end
  if self.userAgeType ~= nil then
    oprot:writeFieldBegin('userAgeType', TType.I32, 2)
    oprot:writeI32(self.userAgeType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AgeCheckRequestResult = __TObject:new{
  authUrl,
  sessionId
}

function AgeCheckRequestResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.sessionId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AgeCheckRequestResult:write(oprot)
  oprot:writeStructBegin('AgeCheckRequestResult')
  if self.authUrl ~= nil then
    oprot:writeFieldBegin('authUrl', TType.STRING, 1)
    oprot:writeString(self.authUrl)
    oprot:writeFieldEnd()
  end
  if self.sessionId ~= nil then
    oprot:writeFieldBegin('sessionId', TType.STRING, 2)
    oprot:writeString(self.sessionId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Announcement = __TObject:new{
  index,
  forceUpdate,
  title,
  text,
  createdTime,
  pictureUrl,
  thumbnailUrl
}

function Announcement:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.index = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.forceUpdate = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.text = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.STRING then
        self.pictureUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.STRING then
        self.thumbnailUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Announcement:write(oprot)
  oprot:writeStructBegin('Announcement')
  if self.index ~= nil then
    oprot:writeFieldBegin('index', TType.I32, 1)
    oprot:writeI32(self.index)
    oprot:writeFieldEnd()
  end
  if self.forceUpdate ~= nil then
    oprot:writeFieldBegin('forceUpdate', TType.BOOL, 10)
    oprot:writeBool(self.forceUpdate)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRING, 11)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRING, 12)
    oprot:writeString(self.text)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 13)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.pictureUrl ~= nil then
    oprot:writeFieldBegin('pictureUrl', TType.STRING, 14)
    oprot:writeString(self.pictureUrl)
    oprot:writeFieldEnd()
  end
  if self.thumbnailUrl ~= nil then
    oprot:writeFieldBegin('thumbnailUrl', TType.STRING, 15)
    oprot:writeString(self.thumbnailUrl)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelProvider = __TObject:new{
  name
}

function ChannelProvider:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelProvider:write(oprot)
  oprot:writeStructBegin('ChannelProvider')
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 1)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelInfo = __TObject:new{
  channelId,
  name,
  entryPageUrl,
  descriptionText,
  provider,
  publicType,
  iconImage,
  permissions,
  iconThumbnailImage,
  channelConfigurations
}

function ChannelInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.entryPageUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.descriptionText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRUCT then
        self.provider = ChannelProvider:new{}
        self.provider:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.publicType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.iconImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.LIST then
        self.permissions = {}
        local _etype3, _size0 = iprot:readListBegin()
        for _i=1,_size0 do
          local _elem4 = iprot:readString()
          table.insert(self.permissions, _elem4)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.iconThumbnailImage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.channelConfigurations = {}
        local _etype8, _size5 = iprot:readListBegin()
        for _i=1,_size5 do
          local _elem9 = iprot:readI32()
          table.insert(self.channelConfigurations, _elem9)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelInfo:write(oprot)
  oprot:writeStructBegin('ChannelInfo')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 3)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.entryPageUrl ~= nil then
    oprot:writeFieldBegin('entryPageUrl', TType.STRING, 4)
    oprot:writeString(self.entryPageUrl)
    oprot:writeFieldEnd()
  end
  if self.descriptionText ~= nil then
    oprot:writeFieldBegin('descriptionText', TType.STRING, 5)
    oprot:writeString(self.descriptionText)
    oprot:writeFieldEnd()
  end
  if self.provider ~= nil then
    oprot:writeFieldBegin('provider', TType.STRUCT, 6)
    self.provider:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.publicType ~= nil then
    oprot:writeFieldBegin('publicType', TType.I32, 7)
    oprot:writeI32(self.publicType)
    oprot:writeFieldEnd()
  end
  if self.iconImage ~= nil then
    oprot:writeFieldBegin('iconImage', TType.STRING, 8)
    oprot:writeString(self.iconImage)
    oprot:writeFieldEnd()
  end
  if self.permissions ~= nil then
    oprot:writeFieldBegin('permissions', TType.LIST, 9)
    oprot:writeListBegin(TType.STRING, #self.permissions)
    for _,iter10 in ipairs(self.permissions) do
      oprot:writeString(iter10)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.iconThumbnailImage ~= nil then
    oprot:writeFieldBegin('iconThumbnailImage', TType.STRING, 11)
    oprot:writeString(self.iconThumbnailImage)
    oprot:writeFieldEnd()
  end
  if self.channelConfigurations ~= nil then
    oprot:writeFieldBegin('channelConfigurations', TType.LIST, 12)
    oprot:writeListBegin(TType.I32, #self.channelConfigurations)
    for _,iter11 in ipairs(self.channelConfigurations) do
      oprot:writeI32(iter11)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ApprovedChannelInfo = __TObject:new{
  channelInfo,
  approvedAt
}

function ApprovedChannelInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.channelInfo = ChannelInfo:new{}
        self.channelInfo:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.approvedAt = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ApprovedChannelInfo:write(oprot)
  oprot:writeStructBegin('ApprovedChannelInfo')
  if self.channelInfo ~= nil then
    oprot:writeFieldBegin('channelInfo', TType.STRUCT, 1)
    self.channelInfo:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.approvedAt ~= nil then
    oprot:writeFieldBegin('approvedAt', TType.I64, 2)
    oprot:writeI64(self.approvedAt)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ApprovedChannelInfos = __TObject:new{
  approvedChannelInfos,
  revision
}

function ApprovedChannelInfos:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.approvedChannelInfos = {}
        local _etype15, _size12 = iprot:readListBegin()
        for _i=1,_size12 do
          local _elem16 = ApprovedChannelInfo:new{}
          _elem16:read(iprot)
          table.insert(self.approvedChannelInfos, _elem16)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ApprovedChannelInfos:write(oprot)
  oprot:writeStructBegin('ApprovedChannelInfos')
  if self.approvedChannelInfos ~= nil then
    oprot:writeFieldBegin('approvedChannelInfos', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.approvedChannelInfos)
    for _,iter17 in ipairs(self.approvedChannelInfos) do
      iter17:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 2)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AuthQrcode = __TObject:new{
  qrcode,
  verifier
}

function AuthQrcode:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.qrcode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.verifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AuthQrcode:write(oprot)
  oprot:writeStructBegin('AuthQrcode')
  if self.qrcode ~= nil then
    oprot:writeFieldBegin('qrcode', TType.STRING, 1)
    oprot:writeString(self.qrcode)
    oprot:writeFieldEnd()
  end
  if self.verifier ~= nil then
    oprot:writeFieldBegin('verifier', TType.STRING, 2)
    oprot:writeString(self.verifier)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddyBanner = __TObject:new{
  buddyBannerLinkType,
  buddyBannerLink,
  buddyBannerImageUrl
}

function BuddyBanner:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.buddyBannerLinkType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.buddyBannerLink = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.buddyBannerImageUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddyBanner:write(oprot)
  oprot:writeStructBegin('BuddyBanner')
  if self.buddyBannerLinkType ~= nil then
    oprot:writeFieldBegin('buddyBannerLinkType', TType.I32, 1)
    oprot:writeI32(self.buddyBannerLinkType)
    oprot:writeFieldEnd()
  end
  if self.buddyBannerLink ~= nil then
    oprot:writeFieldBegin('buddyBannerLink', TType.STRING, 2)
    oprot:writeString(self.buddyBannerLink)
    oprot:writeFieldEnd()
  end
  if self.buddyBannerImageUrl ~= nil then
    oprot:writeFieldBegin('buddyBannerImageUrl', TType.STRING, 3)
    oprot:writeString(self.buddyBannerImageUrl)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddyDetail = __TObject:new{
  mid,
  memberCount,
  onAir,
  businessAccount,
  addable,
  acceptableContentTypes,
  capableMyhome
}

function BuddyDetail:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.memberCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.onAir = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.businessAccount = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.addable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.SET then
        self.acceptableContentTypes = {}
        local _etype21, _size18 = iprot:readSetBegin()
        for _i=1,_size18 do
          local _elem22 = iprot:readI32()
          self.acceptableContentTypes[_elem22] = _elem22
        end
        iprot:readSetEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.BOOL then
        self.capableMyhome = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddyDetail:write(oprot)
  oprot:writeStructBegin('BuddyDetail')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.memberCount ~= nil then
    oprot:writeFieldBegin('memberCount', TType.I64, 2)
    oprot:writeI64(self.memberCount)
    oprot:writeFieldEnd()
  end
  if self.onAir ~= nil then
    oprot:writeFieldBegin('onAir', TType.BOOL, 3)
    oprot:writeBool(self.onAir)
    oprot:writeFieldEnd()
  end
  if self.businessAccount ~= nil then
    oprot:writeFieldBegin('businessAccount', TType.BOOL, 4)
    oprot:writeBool(self.businessAccount)
    oprot:writeFieldEnd()
  end
  if self.addable ~= nil then
    oprot:writeFieldBegin('addable', TType.BOOL, 5)
    oprot:writeBool(self.addable)
    oprot:writeFieldEnd()
  end
  if self.acceptableContentTypes ~= nil then
    oprot:writeFieldBegin('acceptableContentTypes', TType.SET, 6)
    oprot:writeSetBegin(TType.I32, ttable_size(self.acceptableContentTypes))
    for iter23,_ in pairs(self.acceptableContentTypes) do
      oprot:writeI32(iter23)
    end
    oprot:writeSetEnd()
    oprot:writeFieldEnd()
  end
  if self.capableMyhome ~= nil then
    oprot:writeFieldBegin('capableMyhome', TType.BOOL, 7)
    oprot:writeBool(self.capableMyhome)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Contact = __TObject:new{
  mid,
  createdTime,
  type,
  status,
  relation,
  displayName,
  phoneticName,
  pictureStatus,
  thumbnailUrl,
  statusMessage,
  displayNameOverridden,
  favoriteTime,
  capableVoiceCall,
  capableVideoCall,
  capableMyhome,
  capableBuddy,
  attributes,
  settings,
  picturePath
}

function Contact:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.status = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.relation = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.STRING then
        self.phoneticName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.STRING then
        self.pictureStatus = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.STRING then
        self.thumbnailUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.STRING then
        self.statusMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 27 then
      if ftype == TType.STRING then
        self.displayNameOverridden = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 28 then
      if ftype == TType.I64 then
        self.favoriteTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.BOOL then
        self.capableVoiceCall = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.BOOL then
        self.capableVideoCall = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.BOOL then
        self.capableMyhome = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 34 then
      if ftype == TType.BOOL then
        self.capableBuddy = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 35 then
      if ftype == TType.I32 then
        self.attributes = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 36 then
      if ftype == TType.I64 then
        self.settings = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 37 then
      if ftype == TType.STRING then
        self.picturePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Contact:write(oprot)
  oprot:writeStructBegin('Contact')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 2)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 10)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.I32, 11)
    oprot:writeI32(self.status)
    oprot:writeFieldEnd()
  end
  if self.relation ~= nil then
    oprot:writeFieldBegin('relation', TType.I32, 21)
    oprot:writeI32(self.relation)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 22)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.phoneticName ~= nil then
    oprot:writeFieldBegin('phoneticName', TType.STRING, 23)
    oprot:writeString(self.phoneticName)
    oprot:writeFieldEnd()
  end
  if self.pictureStatus ~= nil then
    oprot:writeFieldBegin('pictureStatus', TType.STRING, 24)
    oprot:writeString(self.pictureStatus)
    oprot:writeFieldEnd()
  end
  if self.thumbnailUrl ~= nil then
    oprot:writeFieldBegin('thumbnailUrl', TType.STRING, 25)
    oprot:writeString(self.thumbnailUrl)
    oprot:writeFieldEnd()
  end
  if self.statusMessage ~= nil then
    oprot:writeFieldBegin('statusMessage', TType.STRING, 26)
    oprot:writeString(self.statusMessage)
    oprot:writeFieldEnd()
  end
  if self.displayNameOverridden ~= nil then
    oprot:writeFieldBegin('displayNameOverridden', TType.STRING, 27)
    oprot:writeString(self.displayNameOverridden)
    oprot:writeFieldEnd()
  end
  if self.favoriteTime ~= nil then
    oprot:writeFieldBegin('favoriteTime', TType.I64, 28)
    oprot:writeI64(self.favoriteTime)
    oprot:writeFieldEnd()
  end
  if self.capableVoiceCall ~= nil then
    oprot:writeFieldBegin('capableVoiceCall', TType.BOOL, 31)
    oprot:writeBool(self.capableVoiceCall)
    oprot:writeFieldEnd()
  end
  if self.capableVideoCall ~= nil then
    oprot:writeFieldBegin('capableVideoCall', TType.BOOL, 32)
    oprot:writeBool(self.capableVideoCall)
    oprot:writeFieldEnd()
  end
  if self.capableMyhome ~= nil then
    oprot:writeFieldBegin('capableMyhome', TType.BOOL, 33)
    oprot:writeBool(self.capableMyhome)
    oprot:writeFieldEnd()
  end
  if self.capableBuddy ~= nil then
    oprot:writeFieldBegin('capableBuddy', TType.BOOL, 34)
    oprot:writeBool(self.capableBuddy)
    oprot:writeFieldEnd()
  end
  if self.attributes ~= nil then
    oprot:writeFieldBegin('attributes', TType.I32, 35)
    oprot:writeI32(self.attributes)
    oprot:writeFieldEnd()
  end
  if self.settings ~= nil then
    oprot:writeFieldBegin('settings', TType.I64, 36)
    oprot:writeI64(self.settings)
    oprot:writeFieldEnd()
  end
  if self.picturePath ~= nil then
    oprot:writeFieldBegin('picturePath', TType.STRING, 37)
    oprot:writeString(self.picturePath)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddyList = __TObject:new{
  classification,
  displayName,
  totalBuddyCount,
  popularContacts
}

function BuddyList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.classification = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.totalBuddyCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.popularContacts = {}
        local _etype27, _size24 = iprot:readListBegin()
        for _i=1,_size24 do
          local _elem28 = Contact:new{}
          _elem28:read(iprot)
          table.insert(self.popularContacts, _elem28)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddyList:write(oprot)
  oprot:writeStructBegin('BuddyList')
  if self.classification ~= nil then
    oprot:writeFieldBegin('classification', TType.STRING, 1)
    oprot:writeString(self.classification)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 2)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.totalBuddyCount ~= nil then
    oprot:writeFieldBegin('totalBuddyCount', TType.I32, 3)
    oprot:writeI32(self.totalBuddyCount)
    oprot:writeFieldEnd()
  end
  if self.popularContacts ~= nil then
    oprot:writeFieldBegin('popularContacts', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.popularContacts)
    for _,iter29 in ipairs(self.popularContacts) do
      iter29:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Location = __TObject:new{
  title,
  address,
  latitude,
  longitude,
  phone
}

function Location:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.address = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.DOUBLE then
        self.latitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.DOUBLE then
        self.longitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.phone = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Location:write(oprot)
  oprot:writeStructBegin('Location')
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRING, 1)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  if self.address ~= nil then
    oprot:writeFieldBegin('address', TType.STRING, 2)
    oprot:writeString(self.address)
    oprot:writeFieldEnd()
  end
  if self.latitude ~= nil then
    oprot:writeFieldBegin('latitude', TType.DOUBLE, 3)
    oprot:writeDouble(self.latitude)
    oprot:writeFieldEnd()
  end
  if self.longitude ~= nil then
    oprot:writeFieldBegin('longitude', TType.DOUBLE, 4)
    oprot:writeDouble(self.longitude)
    oprot:writeFieldEnd()
  end
  if self.phone ~= nil then
    oprot:writeFieldBegin('phone', TType.STRING, 5)
    oprot:writeString(self.phone)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddyMessageRequest = __TObject:new{
  contentType,
  text,
  location,
  content,
  contentMetadata
}

function BuddyMessageRequest:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.contentType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.text = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.location = Location:new{}
        self.location:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.content = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.MAP then
        self.contentMetadata = {}
        local _ktype31, _vtype32, _size30 = iprot:readMapBegin() 
        for _i=1,_size30 do
          local _key34 = iprot:readString()
          local _val35 = iprot:readString()
          self.contentMetadata[_key34] = _val35
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddyMessageRequest:write(oprot)
  oprot:writeStructBegin('BuddyMessageRequest')
  if self.contentType ~= nil then
    oprot:writeFieldBegin('contentType', TType.I32, 1)
    oprot:writeI32(self.contentType)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRING, 2)
    oprot:writeString(self.text)
    oprot:writeFieldEnd()
  end
  if self.location ~= nil then
    oprot:writeFieldBegin('location', TType.STRUCT, 3)
    self.location:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.content ~= nil then
    oprot:writeFieldBegin('content', TType.STRING, 4)
    oprot:writeString(self.content)
    oprot:writeFieldEnd()
  end
  if self.contentMetadata ~= nil then
    oprot:writeFieldBegin('contentMetadata', TType.MAP, 5)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.contentMetadata))
    for kiter36,viter37 in pairs(self.contentMetadata) do
      oprot:writeString(kiter36)
      oprot:writeString(viter37)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddyOnAirUrls = __TObject:new{
  hls,
  smoothStreaming
}

function BuddyOnAirUrls:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.MAP then
        self.hls = {}
        local _ktype39, _vtype40, _size38 = iprot:readMapBegin() 
        for _i=1,_size38 do
          local _key42 = iprot:readString()
          local _val43 = iprot:readString()
          self.hls[_key42] = _val43
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.MAP then
        self.smoothStreaming = {}
        local _ktype45, _vtype46, _size44 = iprot:readMapBegin() 
        for _i=1,_size44 do
          local _key48 = iprot:readString()
          local _val49 = iprot:readString()
          self.smoothStreaming[_key48] = _val49
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddyOnAirUrls:write(oprot)
  oprot:writeStructBegin('BuddyOnAirUrls')
  if self.hls ~= nil then
    oprot:writeFieldBegin('hls', TType.MAP, 1)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.hls))
    for kiter50,viter51 in pairs(self.hls) do
      oprot:writeString(kiter50)
      oprot:writeString(viter51)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.smoothStreaming ~= nil then
    oprot:writeFieldBegin('smoothStreaming', TType.MAP, 2)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.smoothStreaming))
    for kiter52,viter53 in pairs(self.smoothStreaming) do
      oprot:writeString(kiter52)
      oprot:writeString(viter53)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddyOnAir = __TObject:new{
  mid,
  freshnessLifetime,
  onAirId,
  onAir,
  text,
  viewerCount,
  targetCount,
  onAirType,
  onAirUrls
}

function BuddyOnAir:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.freshnessLifetime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.onAirId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.onAir = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.text = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I64 then
        self.viewerCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I64 then
        self.targetCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.I32 then
        self.onAirType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.STRUCT then
        self.onAirUrls = BuddyOnAirUrls:new{}
        self.onAirUrls:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddyOnAir:write(oprot)
  oprot:writeStructBegin('BuddyOnAir')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.freshnessLifetime ~= nil then
    oprot:writeFieldBegin('freshnessLifetime', TType.I64, 3)
    oprot:writeI64(self.freshnessLifetime)
    oprot:writeFieldEnd()
  end
  if self.onAirId ~= nil then
    oprot:writeFieldBegin('onAirId', TType.STRING, 4)
    oprot:writeString(self.onAirId)
    oprot:writeFieldEnd()
  end
  if self.onAir ~= nil then
    oprot:writeFieldBegin('onAir', TType.BOOL, 5)
    oprot:writeBool(self.onAir)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRING, 11)
    oprot:writeString(self.text)
    oprot:writeFieldEnd()
  end
  if self.viewerCount ~= nil then
    oprot:writeFieldBegin('viewerCount', TType.I64, 12)
    oprot:writeI64(self.viewerCount)
    oprot:writeFieldEnd()
  end
  if self.targetCount ~= nil then
    oprot:writeFieldBegin('targetCount', TType.I64, 13)
    oprot:writeI64(self.targetCount)
    oprot:writeFieldEnd()
  end
  if self.onAirType ~= nil then
    oprot:writeFieldBegin('onAirType', TType.I32, 31)
    oprot:writeI32(self.onAirType)
    oprot:writeFieldEnd()
  end
  if self.onAirUrls ~= nil then
    oprot:writeFieldBegin('onAirUrls', TType.STRUCT, 32)
    self.onAirUrls:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddyProfile = __TObject:new{
  buddyId,
  mid,
  searchId,
  displayName,
  statusMessage,
  contactCount
}

function BuddyProfile:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.buddyId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.searchId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.statusMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.contactCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddyProfile:write(oprot)
  oprot:writeStructBegin('BuddyProfile')
  if self.buddyId ~= nil then
    oprot:writeFieldBegin('buddyId', TType.STRING, 1)
    oprot:writeString(self.buddyId)
    oprot:writeFieldEnd()
  end
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 2)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.searchId ~= nil then
    oprot:writeFieldBegin('searchId', TType.STRING, 3)
    oprot:writeString(self.searchId)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 4)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.statusMessage ~= nil then
    oprot:writeFieldBegin('statusMessage', TType.STRING, 5)
    oprot:writeString(self.statusMessage)
    oprot:writeFieldEnd()
  end
  if self.contactCount ~= nil then
    oprot:writeFieldBegin('contactCount', TType.I64, 11)
    oprot:writeI64(self.contactCount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

BuddySearchResult = __TObject:new{
  mid,
  displayName,
  pictureStatus,
  picturePath,
  statusMessage,
  businessAccount
}

function BuddySearchResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.pictureStatus = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.picturePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.statusMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.businessAccount = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function BuddySearchResult:write(oprot)
  oprot:writeStructBegin('BuddySearchResult')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 2)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.pictureStatus ~= nil then
    oprot:writeFieldBegin('pictureStatus', TType.STRING, 3)
    oprot:writeString(self.pictureStatus)
    oprot:writeFieldEnd()
  end
  if self.picturePath ~= nil then
    oprot:writeFieldBegin('picturePath', TType.STRING, 4)
    oprot:writeString(self.picturePath)
    oprot:writeFieldEnd()
  end
  if self.statusMessage ~= nil then
    oprot:writeFieldBegin('statusMessage', TType.STRING, 5)
    oprot:writeString(self.statusMessage)
    oprot:writeFieldEnd()
  end
  if self.businessAccount ~= nil then
    oprot:writeFieldBegin('businessAccount', TType.BOOL, 6)
    oprot:writeBool(self.businessAccount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelDomain = __TObject:new{
  host,
  removed
}

function ChannelDomain:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.host = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.removed = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelDomain:write(oprot)
  oprot:writeStructBegin('ChannelDomain')
  if self.host ~= nil then
    oprot:writeFieldBegin('host', TType.STRING, 1)
    oprot:writeString(self.host)
    oprot:writeFieldEnd()
  end
  if self.removed ~= nil then
    oprot:writeFieldBegin('removed', TType.BOOL, 2)
    oprot:writeBool(self.removed)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelDomains = __TObject:new{
  channelDomains,
  revision
}

function ChannelDomains:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.channelDomains = {}
        local _etype57, _size54 = iprot:readListBegin()
        for _i=1,_size54 do
          local _elem58 = ChannelDomain:new{}
          _elem58:read(iprot)
          table.insert(self.channelDomains, _elem58)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelDomains:write(oprot)
  oprot:writeStructBegin('ChannelDomains')
  if self.channelDomains ~= nil then
    oprot:writeFieldBegin('channelDomains', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.channelDomains)
    for _,iter59 in ipairs(self.channelDomains) do
      iter59:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 2)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelException = TException:new{
  __type = 'ChannelException',
  code,
  reason,
  parameterMap
}

function ChannelException:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.code = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.reason = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.parameterMap = {}
        local _ktype61, _vtype62, _size60 = iprot:readMapBegin() 
        for _i=1,_size60 do
          local _key64 = iprot:readString()
          local _val65 = iprot:readString()
          self.parameterMap[_key64] = _val65
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelException:write(oprot)
  oprot:writeStructBegin('ChannelException')
  if self.code ~= nil then
    oprot:writeFieldBegin('code', TType.I32, 1)
    oprot:writeI32(self.code)
    oprot:writeFieldEnd()
  end
  if self.reason ~= nil then
    oprot:writeFieldBegin('reason', TType.STRING, 2)
    oprot:writeString(self.reason)
    oprot:writeFieldEnd()
  end
  if self.parameterMap ~= nil then
    oprot:writeFieldBegin('parameterMap', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.parameterMap))
    for kiter66,viter67 in pairs(self.parameterMap) do
      oprot:writeString(kiter66)
      oprot:writeString(viter67)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelInfos = __TObject:new{
  channelInfos,
  revision
}

function ChannelInfos:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.channelInfos = {}
        local _etype71, _size68 = iprot:readListBegin()
        for _i=1,_size68 do
          local _elem72 = ChannelInfo:new{}
          _elem72:read(iprot)
          table.insert(self.channelInfos, _elem72)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelInfos:write(oprot)
  oprot:writeStructBegin('ChannelInfos')
  if self.channelInfos ~= nil then
    oprot:writeFieldBegin('channelInfos', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.channelInfos)
    for _,iter73 in ipairs(self.channelInfos) do
      iter73:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 2)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelNotificationSetting = __TObject:new{
  channelId,
  name,
  notificationReceivable,
  messageReceivable,
  showDefault
}

function ChannelNotificationSetting:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.notificationReceivable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.messageReceivable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.showDefault = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelNotificationSetting:write(oprot)
  oprot:writeStructBegin('ChannelNotificationSetting')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 2)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.notificationReceivable ~= nil then
    oprot:writeFieldBegin('notificationReceivable', TType.BOOL, 3)
    oprot:writeBool(self.notificationReceivable)
    oprot:writeFieldEnd()
  end
  if self.messageReceivable ~= nil then
    oprot:writeFieldBegin('messageReceivable', TType.BOOL, 4)
    oprot:writeBool(self.messageReceivable)
    oprot:writeFieldEnd()
  end
  if self.showDefault ~= nil then
    oprot:writeFieldBegin('showDefault', TType.BOOL, 5)
    oprot:writeBool(self.showDefault)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelSyncDatas = __TObject:new{
  channelInfos,
  channelDomains,
  revision,
  expires
}

function ChannelSyncDatas:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.channelInfos = {}
        local _etype77, _size74 = iprot:readListBegin()
        for _i=1,_size74 do
          local _elem78 = ChannelInfo:new{}
          _elem78:read(iprot)
          table.insert(self.channelInfos, _elem78)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.channelDomains = {}
        local _etype82, _size79 = iprot:readListBegin()
        for _i=1,_size79 do
          local _elem83 = ChannelDomain:new{}
          _elem83:read(iprot)
          table.insert(self.channelDomains, _elem83)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I64 then
        self.expires = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelSyncDatas:write(oprot)
  oprot:writeStructBegin('ChannelSyncDatas')
  if self.channelInfos ~= nil then
    oprot:writeFieldBegin('channelInfos', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.channelInfos)
    for _,iter84 in ipairs(self.channelInfos) do
      iter84:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.channelDomains ~= nil then
    oprot:writeFieldBegin('channelDomains', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.channelDomains)
    for _,iter85 in ipairs(self.channelDomains) do
      iter85:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 3)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.expires ~= nil then
    oprot:writeFieldBegin('expires', TType.I64, 4)
    oprot:writeI64(self.expires)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ChannelToken = __TObject:new{
  token,
  obsToken,
  expiration,
  refreshToken,
  channelAccessToken
}

function ChannelToken:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.token = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.obsToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.expiration = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.refreshToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.channelAccessToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ChannelToken:write(oprot)
  oprot:writeStructBegin('ChannelToken')
  if self.token ~= nil then
    oprot:writeFieldBegin('token', TType.STRING, 1)
    oprot:writeString(self.token)
    oprot:writeFieldEnd()
  end
  if self.obsToken ~= nil then
    oprot:writeFieldBegin('obsToken', TType.STRING, 2)
    oprot:writeString(self.obsToken)
    oprot:writeFieldEnd()
  end
  if self.expiration ~= nil then
    oprot:writeFieldBegin('expiration', TType.I64, 3)
    oprot:writeI64(self.expiration)
    oprot:writeFieldEnd()
  end
  if self.refreshToken ~= nil then
    oprot:writeFieldBegin('refreshToken', TType.STRING, 4)
    oprot:writeString(self.refreshToken)
    oprot:writeFieldEnd()
  end
  if self.channelAccessToken ~= nil then
    oprot:writeFieldBegin('channelAccessToken', TType.STRING, 5)
    oprot:writeString(self.channelAccessToken)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Coin = __TObject:new{
  freeCoinBalance,
  payedCoinBalance,
  totalCoinBalance,
  rewardCoinBalance
}

function Coin:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.freeCoinBalance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.payedCoinBalance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.totalCoinBalance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.rewardCoinBalance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Coin:write(oprot)
  oprot:writeStructBegin('Coin')
  if self.freeCoinBalance ~= nil then
    oprot:writeFieldBegin('freeCoinBalance', TType.I32, 1)
    oprot:writeI32(self.freeCoinBalance)
    oprot:writeFieldEnd()
  end
  if self.payedCoinBalance ~= nil then
    oprot:writeFieldBegin('payedCoinBalance', TType.I32, 2)
    oprot:writeI32(self.payedCoinBalance)
    oprot:writeFieldEnd()
  end
  if self.totalCoinBalance ~= nil then
    oprot:writeFieldBegin('totalCoinBalance', TType.I32, 3)
    oprot:writeI32(self.totalCoinBalance)
    oprot:writeFieldEnd()
  end
  if self.rewardCoinBalance ~= nil then
    oprot:writeFieldBegin('rewardCoinBalance', TType.I32, 4)
    oprot:writeI32(self.rewardCoinBalance)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinPayLoad = __TObject:new{
  payCoin,
  freeCoin,
  type,
  rewardCoin
}

function CoinPayLoad:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.payCoin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.freeCoin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.rewardCoin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinPayLoad:write(oprot)
  oprot:writeStructBegin('CoinPayLoad')
  if self.payCoin ~= nil then
    oprot:writeFieldBegin('payCoin', TType.I32, 1)
    oprot:writeI32(self.payCoin)
    oprot:writeFieldEnd()
  end
  if self.freeCoin ~= nil then
    oprot:writeFieldBegin('freeCoin', TType.I32, 2)
    oprot:writeI32(self.freeCoin)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 3)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.rewardCoin ~= nil then
    oprot:writeFieldBegin('rewardCoin', TType.I32, 4)
    oprot:writeI32(self.rewardCoin)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinHistory = __TObject:new{
  payDate,
  coinBalance,
  coin,
  price,
  title,
  refund,
  paySeq,
  currency,
  currencySign,
  displayPrice,
  payload,
  channelId
}

function CoinHistory:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.payDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.coinBalance = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.coin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.price = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.BOOL then
        self.refund = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.paySeq = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.currency = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.currencySign = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.displayPrice = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.payload = CoinPayLoad:new{}
        self.payload:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinHistory:write(oprot)
  oprot:writeStructBegin('CoinHistory')
  if self.payDate ~= nil then
    oprot:writeFieldBegin('payDate', TType.I64, 1)
    oprot:writeI64(self.payDate)
    oprot:writeFieldEnd()
  end
  if self.coinBalance ~= nil then
    oprot:writeFieldBegin('coinBalance', TType.I32, 2)
    oprot:writeI32(self.coinBalance)
    oprot:writeFieldEnd()
  end
  if self.coin ~= nil then
    oprot:writeFieldBegin('coin', TType.I32, 3)
    oprot:writeI32(self.coin)
    oprot:writeFieldEnd()
  end
  if self.price ~= nil then
    oprot:writeFieldBegin('price', TType.STRING, 4)
    oprot:writeString(self.price)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRING, 5)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  if self.refund ~= nil then
    oprot:writeFieldBegin('refund', TType.BOOL, 6)
    oprot:writeBool(self.refund)
    oprot:writeFieldEnd()
  end
  if self.paySeq ~= nil then
    oprot:writeFieldBegin('paySeq', TType.STRING, 7)
    oprot:writeString(self.paySeq)
    oprot:writeFieldEnd()
  end
  if self.currency ~= nil then
    oprot:writeFieldBegin('currency', TType.STRING, 8)
    oprot:writeString(self.currency)
    oprot:writeFieldEnd()
  end
  if self.currencySign ~= nil then
    oprot:writeFieldBegin('currencySign', TType.STRING, 9)
    oprot:writeString(self.currencySign)
    oprot:writeFieldEnd()
  end
  if self.displayPrice ~= nil then
    oprot:writeFieldBegin('displayPrice', TType.STRING, 10)
    oprot:writeString(self.displayPrice)
    oprot:writeFieldEnd()
  end
  if self.payload ~= nil then
    oprot:writeFieldBegin('payload', TType.STRUCT, 11)
    self.payload:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 12)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinHistoryCondition = __TObject:new{
  start,
  size,
  language,
  eddt,
  appStoreCode
}

function CoinHistoryCondition:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.start = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.size = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.eddt = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.appStoreCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinHistoryCondition:write(oprot)
  oprot:writeStructBegin('CoinHistoryCondition')
  if self.start ~= nil then
    oprot:writeFieldBegin('start', TType.I64, 1)
    oprot:writeI64(self.start)
    oprot:writeFieldEnd()
  end
  if self.size ~= nil then
    oprot:writeFieldBegin('size', TType.I32, 2)
    oprot:writeI32(self.size)
    oprot:writeFieldEnd()
  end
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 3)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.eddt ~= nil then
    oprot:writeFieldBegin('eddt', TType.STRING, 4)
    oprot:writeString(self.eddt)
    oprot:writeFieldEnd()
  end
  if self.appStoreCode ~= nil then
    oprot:writeFieldBegin('appStoreCode', TType.I32, 5)
    oprot:writeI32(self.appStoreCode)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinHistoryResult = __TObject:new{
  historys,
  balance,
  hasNext
}

function CoinHistoryResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.historys = {}
        local _etype89, _size86 = iprot:readListBegin()
        for _i=1,_size86 do
          local _elem90 = CoinHistory:new{}
          _elem90:read(iprot)
          table.insert(self.historys, _elem90)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.balance = Coin:new{}
        self.balance:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.hasNext = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinHistoryResult:write(oprot)
  oprot:writeStructBegin('CoinHistoryResult')
  if self.historys ~= nil then
    oprot:writeFieldBegin('historys', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.historys)
    for _,iter91 in ipairs(self.historys) do
      iter91:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.balance ~= nil then
    oprot:writeFieldBegin('balance', TType.STRUCT, 2)
    self.balance:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.hasNext ~= nil then
    oprot:writeFieldBegin('hasNext', TType.BOOL, 3)
    oprot:writeBool(self.hasNext)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinProductItem = __TObject:new{
  itemId,
  coin,
  freeCoin,
  currency,
  price,
  displayPrice,
  name,
  desc
}

function CoinProductItem:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.itemId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.coin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.freeCoin = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.currency = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.price = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.displayPrice = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.desc = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinProductItem:write(oprot)
  oprot:writeStructBegin('CoinProductItem')
  if self.itemId ~= nil then
    oprot:writeFieldBegin('itemId', TType.STRING, 1)
    oprot:writeString(self.itemId)
    oprot:writeFieldEnd()
  end
  if self.coin ~= nil then
    oprot:writeFieldBegin('coin', TType.I32, 2)
    oprot:writeI32(self.coin)
    oprot:writeFieldEnd()
  end
  if self.freeCoin ~= nil then
    oprot:writeFieldBegin('freeCoin', TType.I32, 3)
    oprot:writeI32(self.freeCoin)
    oprot:writeFieldEnd()
  end
  if self.currency ~= nil then
    oprot:writeFieldBegin('currency', TType.STRING, 5)
    oprot:writeString(self.currency)
    oprot:writeFieldEnd()
  end
  if self.price ~= nil then
    oprot:writeFieldBegin('price', TType.STRING, 6)
    oprot:writeString(self.price)
    oprot:writeFieldEnd()
  end
  if self.displayPrice ~= nil then
    oprot:writeFieldBegin('displayPrice', TType.STRING, 7)
    oprot:writeString(self.displayPrice)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 8)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.desc ~= nil then
    oprot:writeFieldBegin('desc', TType.STRING, 9)
    oprot:writeString(self.desc)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinPurchaseConfirm = __TObject:new{
  orderId,
  appStoreCode,
  receipt,
  signature,
  seller,
  requestType,
  ignoreReceipt
}

function CoinPurchaseConfirm:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.orderId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.appStoreCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.receipt = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.signature = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.seller = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.requestType = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.BOOL then
        self.ignoreReceipt = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinPurchaseConfirm:write(oprot)
  oprot:writeStructBegin('CoinPurchaseConfirm')
  if self.orderId ~= nil then
    oprot:writeFieldBegin('orderId', TType.STRING, 1)
    oprot:writeString(self.orderId)
    oprot:writeFieldEnd()
  end
  if self.appStoreCode ~= nil then
    oprot:writeFieldBegin('appStoreCode', TType.I32, 2)
    oprot:writeI32(self.appStoreCode)
    oprot:writeFieldEnd()
  end
  if self.receipt ~= nil then
    oprot:writeFieldBegin('receipt', TType.STRING, 3)
    oprot:writeString(self.receipt)
    oprot:writeFieldEnd()
  end
  if self.signature ~= nil then
    oprot:writeFieldBegin('signature', TType.STRING, 4)
    oprot:writeString(self.signature)
    oprot:writeFieldEnd()
  end
  if self.seller ~= nil then
    oprot:writeFieldBegin('seller', TType.STRING, 5)
    oprot:writeString(self.seller)
    oprot:writeFieldEnd()
  end
  if self.requestType ~= nil then
    oprot:writeFieldBegin('requestType', TType.STRING, 6)
    oprot:writeString(self.requestType)
    oprot:writeFieldEnd()
  end
  if self.ignoreReceipt ~= nil then
    oprot:writeFieldBegin('ignoreReceipt', TType.BOOL, 7)
    oprot:writeBool(self.ignoreReceipt)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinPurchaseReservation = __TObject:new{
  productId,
  country,
  currency,
  price,
  appStoreCode,
  language,
  pgCode,
  redirectUrl
}

function CoinPurchaseReservation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.productId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.country = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.currency = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.price = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.appStoreCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.pgCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.redirectUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinPurchaseReservation:write(oprot)
  oprot:writeStructBegin('CoinPurchaseReservation')
  if self.productId ~= nil then
    oprot:writeFieldBegin('productId', TType.STRING, 1)
    oprot:writeString(self.productId)
    oprot:writeFieldEnd()
  end
  if self.country ~= nil then
    oprot:writeFieldBegin('country', TType.STRING, 2)
    oprot:writeString(self.country)
    oprot:writeFieldEnd()
  end
  if self.currency ~= nil then
    oprot:writeFieldBegin('currency', TType.STRING, 3)
    oprot:writeString(self.currency)
    oprot:writeFieldEnd()
  end
  if self.price ~= nil then
    oprot:writeFieldBegin('price', TType.STRING, 4)
    oprot:writeString(self.price)
    oprot:writeFieldEnd()
  end
  if self.appStoreCode ~= nil then
    oprot:writeFieldBegin('appStoreCode', TType.I32, 5)
    oprot:writeI32(self.appStoreCode)
    oprot:writeFieldEnd()
  end
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 6)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.pgCode ~= nil then
    oprot:writeFieldBegin('pgCode', TType.I32, 7)
    oprot:writeI32(self.pgCode)
    oprot:writeFieldEnd()
  end
  if self.redirectUrl ~= nil then
    oprot:writeFieldBegin('redirectUrl', TType.STRING, 8)
    oprot:writeString(self.redirectUrl)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinUseReservationItem = __TObject:new{
  itemId,
  itemName,
  amount
}

function CoinUseReservationItem:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.itemId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.itemName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.amount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinUseReservationItem:write(oprot)
  oprot:writeStructBegin('CoinUseReservationItem')
  if self.itemId ~= nil then
    oprot:writeFieldBegin('itemId', TType.STRING, 1)
    oprot:writeString(self.itemId)
    oprot:writeFieldEnd()
  end
  if self.itemName ~= nil then
    oprot:writeFieldBegin('itemName', TType.STRING, 2)
    oprot:writeString(self.itemName)
    oprot:writeFieldEnd()
  end
  if self.amount ~= nil then
    oprot:writeFieldBegin('amount', TType.I32, 3)
    oprot:writeI32(self.amount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CoinUseReservation = __TObject:new{
  channelId,
  shopOrderId,
  appStoreCode,
  items,
  country
}

function CoinUseReservation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.shopOrderId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.appStoreCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.items = {}
        local _etype95, _size92 = iprot:readListBegin()
        for _i=1,_size92 do
          local _elem96 = CoinUseReservationItem:new{}
          _elem96:read(iprot)
          table.insert(self.items, _elem96)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.country = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CoinUseReservation:write(oprot)
  oprot:writeStructBegin('CoinUseReservation')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.shopOrderId ~= nil then
    oprot:writeFieldBegin('shopOrderId', TType.STRING, 2)
    oprot:writeString(self.shopOrderId)
    oprot:writeFieldEnd()
  end
  if self.appStoreCode ~= nil then
    oprot:writeFieldBegin('appStoreCode', TType.I32, 3)
    oprot:writeI32(self.appStoreCode)
    oprot:writeFieldEnd()
  end
  if self.items ~= nil then
    oprot:writeFieldBegin('items', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.items)
    for _,iter97 in ipairs(self.items) do
      iter97:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.country ~= nil then
    oprot:writeFieldBegin('country', TType.STRING, 5)
    oprot:writeString(self.country)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

CompactContact = __TObject:new{
  mid,
  createdTime,
  modifiedTime,
  status,
  settings,
  displayNameOverridden
}

function CompactContact:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.modifiedTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.status = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.settings = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.displayNameOverridden = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function CompactContact:write(oprot)
  oprot:writeStructBegin('CompactContact')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 2)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.modifiedTime ~= nil then
    oprot:writeFieldBegin('modifiedTime', TType.I64, 3)
    oprot:writeI64(self.modifiedTime)
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.I32, 4)
    oprot:writeI32(self.status)
    oprot:writeFieldEnd()
  end
  if self.settings ~= nil then
    oprot:writeFieldBegin('settings', TType.I64, 5)
    oprot:writeI64(self.settings)
    oprot:writeFieldEnd()
  end
  if self.displayNameOverridden ~= nil then
    oprot:writeFieldBegin('displayNameOverridden', TType.STRING, 6)
    oprot:writeString(self.displayNameOverridden)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ContactModification = __TObject:new{
  type,
  luid,
  phones,
  emails,
  userids
}

function ContactModification:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.luid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.LIST then
        self.phones = {}
        local _etype101, _size98 = iprot:readListBegin()
        for _i=1,_size98 do
          local _elem102 = iprot:readString()
          table.insert(self.phones, _elem102)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.LIST then
        self.emails = {}
        local _etype106, _size103 = iprot:readListBegin()
        for _i=1,_size103 do
          local _elem107 = iprot:readString()
          table.insert(self.emails, _elem107)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.LIST then
        self.userids = {}
        local _etype111, _size108 = iprot:readListBegin()
        for _i=1,_size108 do
          local _elem112 = iprot:readString()
          table.insert(self.userids, _elem112)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ContactModification:write(oprot)
  oprot:writeStructBegin('ContactModification')
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.luid ~= nil then
    oprot:writeFieldBegin('luid', TType.STRING, 2)
    oprot:writeString(self.luid)
    oprot:writeFieldEnd()
  end
  if self.phones ~= nil then
    oprot:writeFieldBegin('phones', TType.LIST, 11)
    oprot:writeListBegin(TType.STRING, #self.phones)
    for _,iter113 in ipairs(self.phones) do
      oprot:writeString(iter113)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.emails ~= nil then
    oprot:writeFieldBegin('emails', TType.LIST, 12)
    oprot:writeListBegin(TType.STRING, #self.emails)
    for _,iter114 in ipairs(self.emails) do
      oprot:writeString(iter114)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.userids ~= nil then
    oprot:writeFieldBegin('userids', TType.LIST, 13)
    oprot:writeListBegin(TType.STRING, #self.userids)
    for _,iter115 in ipairs(self.userids) do
      oprot:writeString(iter115)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ContactRegistration = __TObject:new{
  contact,
  luid,
  contactType,
  contactKey
}

function ContactRegistration:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.contact = Contact:new{}
        self.contact:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.luid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.contactType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.contactKey = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ContactRegistration:write(oprot)
  oprot:writeStructBegin('ContactRegistration')
  if self.contact ~= nil then
    oprot:writeFieldBegin('contact', TType.STRUCT, 1)
    self.contact:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.luid ~= nil then
    oprot:writeFieldBegin('luid', TType.STRING, 10)
    oprot:writeString(self.luid)
    oprot:writeFieldEnd()
  end
  if self.contactType ~= nil then
    oprot:writeFieldBegin('contactType', TType.I32, 11)
    oprot:writeI32(self.contactType)
    oprot:writeFieldEnd()
  end
  if self.contactKey ~= nil then
    oprot:writeFieldBegin('contactKey', TType.STRING, 12)
    oprot:writeString(self.contactKey)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ContactReport = __TObject:new{
  mid,
  exists,
  contact
}

function ContactReport:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.exists = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.contact = Contact:new{}
        self.contact:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ContactReport:write(oprot)
  oprot:writeStructBegin('ContactReport')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.exists ~= nil then
    oprot:writeFieldBegin('exists', TType.BOOL, 2)
    oprot:writeBool(self.exists)
    oprot:writeFieldEnd()
  end
  if self.contact ~= nil then
    oprot:writeFieldBegin('contact', TType.STRUCT, 3)
    self.contact:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ContactReportResult = __TObject:new{
  mid,
  exists
}

function ContactReportResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.exists = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ContactReportResult:write(oprot)
  oprot:writeStructBegin('ContactReportResult')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.exists ~= nil then
    oprot:writeFieldBegin('exists', TType.BOOL, 2)
    oprot:writeBool(self.exists)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

DeviceInfo = __TObject:new{
  deviceName,
  systemName,
  systemVersion,
  model,
  carrierCode,
  carrierName,
  applicationType
}

function DeviceInfo:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.deviceName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.systemName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.systemVersion = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.model = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I32 then
        self.carrierCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.carrierName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I32 then
        self.applicationType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function DeviceInfo:write(oprot)
  oprot:writeStructBegin('DeviceInfo')
  if self.deviceName ~= nil then
    oprot:writeFieldBegin('deviceName', TType.STRING, 1)
    oprot:writeString(self.deviceName)
    oprot:writeFieldEnd()
  end
  if self.systemName ~= nil then
    oprot:writeFieldBegin('systemName', TType.STRING, 2)
    oprot:writeString(self.systemName)
    oprot:writeFieldEnd()
  end
  if self.systemVersion ~= nil then
    oprot:writeFieldBegin('systemVersion', TType.STRING, 3)
    oprot:writeString(self.systemVersion)
    oprot:writeFieldEnd()
  end
  if self.model ~= nil then
    oprot:writeFieldBegin('model', TType.STRING, 4)
    oprot:writeString(self.model)
    oprot:writeFieldEnd()
  end
  if self.carrierCode ~= nil then
    oprot:writeFieldBegin('carrierCode', TType.I32, 10)
    oprot:writeI32(self.carrierCode)
    oprot:writeFieldEnd()
  end
  if self.carrierName ~= nil then
    oprot:writeFieldBegin('carrierName', TType.STRING, 11)
    oprot:writeString(self.carrierName)
    oprot:writeFieldEnd()
  end
  if self.applicationType ~= nil then
    oprot:writeFieldBegin('applicationType', TType.I32, 20)
    oprot:writeI32(self.applicationType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

EmailConfirmation = __TObject:new{
  usePasswordSet,
  email,
  password,
  ignoreDuplication
}

function EmailConfirmation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.usePasswordSet = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.email = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.password = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.ignoreDuplication = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function EmailConfirmation:write(oprot)
  oprot:writeStructBegin('EmailConfirmation')
  if self.usePasswordSet ~= nil then
    oprot:writeFieldBegin('usePasswordSet', TType.BOOL, 1)
    oprot:writeBool(self.usePasswordSet)
    oprot:writeFieldEnd()
  end
  if self.email ~= nil then
    oprot:writeFieldBegin('email', TType.STRING, 2)
    oprot:writeString(self.email)
    oprot:writeFieldEnd()
  end
  if self.password ~= nil then
    oprot:writeFieldBegin('password', TType.STRING, 3)
    oprot:writeString(self.password)
    oprot:writeFieldEnd()
  end
  if self.ignoreDuplication ~= nil then
    oprot:writeFieldBegin('ignoreDuplication', TType.BOOL, 4)
    oprot:writeBool(self.ignoreDuplication)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

EmailConfirmationSession = __TObject:new{
  emailConfirmationType,
  verifier,
  targetEmail
}

function EmailConfirmationSession:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.emailConfirmationType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.verifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.targetEmail = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function EmailConfirmationSession:write(oprot)
  oprot:writeStructBegin('EmailConfirmationSession')
  if self.emailConfirmationType ~= nil then
    oprot:writeFieldBegin('emailConfirmationType', TType.I32, 1)
    oprot:writeI32(self.emailConfirmationType)
    oprot:writeFieldEnd()
  end
  if self.verifier ~= nil then
    oprot:writeFieldBegin('verifier', TType.STRING, 2)
    oprot:writeString(self.verifier)
    oprot:writeFieldEnd()
  end
  if self.targetEmail ~= nil then
    oprot:writeFieldBegin('targetEmail', TType.STRING, 3)
    oprot:writeString(self.targetEmail)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FriendChannelMatrix = __TObject:new{
  channelId,
  representMid,
  count
}

function FriendChannelMatrix:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.representMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.count = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FriendChannelMatrix:write(oprot)
  oprot:writeStructBegin('FriendChannelMatrix')
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 1)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.representMid ~= nil then
    oprot:writeFieldBegin('representMid', TType.STRING, 2)
    oprot:writeString(self.representMid)
    oprot:writeFieldEnd()
  end
  if self.count ~= nil then
    oprot:writeFieldBegin('count', TType.I32, 3)
    oprot:writeI32(self.count)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FriendChannelMatricesResponse = __TObject:new{
  expires,
  matrices
}

function FriendChannelMatricesResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.expires = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.matrices = {}
        local _etype119, _size116 = iprot:readListBegin()
        for _i=1,_size116 do
          local _elem120 = FriendChannelMatrix:new{}
          _elem120:read(iprot)
          table.insert(self.matrices, _elem120)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FriendChannelMatricesResponse:write(oprot)
  oprot:writeStructBegin('FriendChannelMatricesResponse')
  if self.expires ~= nil then
    oprot:writeFieldBegin('expires', TType.I64, 1)
    oprot:writeI64(self.expires)
    oprot:writeFieldEnd()
  end
  if self.matrices ~= nil then
    oprot:writeFieldBegin('matrices', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.matrices)
    for _,iter121 in ipairs(self.matrices) do
      iter121:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Geolocation = __TObject:new{
  longitude,
  latitude
}

function Geolocation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.DOUBLE then
        self.longitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.DOUBLE then
        self.latitude = iprot:readDouble()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Geolocation:write(oprot)
  oprot:writeStructBegin('Geolocation')
  if self.longitude ~= nil then
    oprot:writeFieldBegin('longitude', TType.DOUBLE, 1)
    oprot:writeDouble(self.longitude)
    oprot:writeFieldEnd()
  end
  if self.latitude ~= nil then
    oprot:writeFieldBegin('latitude', TType.DOUBLE, 2)
    oprot:writeDouble(self.latitude)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NotificationTarget = __TObject:new{
  applicationType,
  applicationVersion,
  region
}

function NotificationTarget:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.applicationType = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.applicationVersion = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.region = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NotificationTarget:write(oprot)
  oprot:writeStructBegin('NotificationTarget')
  if self.applicationType ~= nil then
    oprot:writeFieldBegin('applicationType', TType.STRING, 1)
    oprot:writeString(self.applicationType)
    oprot:writeFieldEnd()
  end
  if self.applicationVersion ~= nil then
    oprot:writeFieldBegin('applicationVersion', TType.STRING, 2)
    oprot:writeString(self.applicationVersion)
    oprot:writeFieldEnd()
  end
  if self.region ~= nil then
    oprot:writeFieldBegin('region', TType.STRING, 3)
    oprot:writeString(self.region)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GlobalEvent = __TObject:new{
  key,
  targets,
  createdTime,
  data,
  maxDelay
}

function GlobalEvent:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.key = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.targets = {}
        local _etype125, _size122 = iprot:readListBegin()
        for _i=1,_size122 do
          local _elem126 = NotificationTarget:new{}
          _elem126:read(iprot)
          table.insert(self.targets, _elem126)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I64 then
        self.data = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.maxDelay = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GlobalEvent:write(oprot)
  oprot:writeStructBegin('GlobalEvent')
  if self.key ~= nil then
    oprot:writeFieldBegin('key', TType.STRING, 1)
    oprot:writeString(self.key)
    oprot:writeFieldEnd()
  end
  if self.targets ~= nil then
    oprot:writeFieldBegin('targets', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.targets)
    for _,iter127 in ipairs(self.targets) do
      iter127:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 3)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.data ~= nil then
    oprot:writeFieldBegin('data', TType.I64, 4)
    oprot:writeI64(self.data)
    oprot:writeFieldEnd()
  end
  if self.maxDelay ~= nil then
    oprot:writeFieldBegin('maxDelay', TType.I32, 5)
    oprot:writeI32(self.maxDelay)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Group = __TObject:new{
  id,
  createdTime,
  name,
  pictureStatus,
  members,
  creator,
  invitee,
  notificationDisabled
}

function Group:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.pictureStatus = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.LIST then
        self.members = {}
        local _etype131, _size128 = iprot:readListBegin()
        for _i=1,_size128 do
          local _elem132 = Contact:new{}
          _elem132:read(iprot)
          table.insert(self.members, _elem132)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRUCT then
        self.creator = Contact:new{}
        self.creator:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.LIST then
        self.invitee = {}
        local _etype136, _size133 = iprot:readListBegin()
        for _i=1,_size133 do
          local _elem137 = Contact:new{}
          _elem137:read(iprot)
          table.insert(self.invitee, _elem137)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.BOOL then
        self.notificationDisabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Group:write(oprot)
  oprot:writeStructBegin('Group')
  if self.id ~= nil then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 2)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 10)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.pictureStatus ~= nil then
    oprot:writeFieldBegin('pictureStatus', TType.STRING, 11)
    oprot:writeString(self.pictureStatus)
    oprot:writeFieldEnd()
  end
  if self.members ~= nil then
    oprot:writeFieldBegin('members', TType.LIST, 20)
    oprot:writeListBegin(TType.STRUCT, #self.members)
    for _,iter138 in ipairs(self.members) do
      iter138:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.creator ~= nil then
    oprot:writeFieldBegin('creator', TType.STRUCT, 21)
    self.creator:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.invitee ~= nil then
    oprot:writeFieldBegin('invitee', TType.LIST, 22)
    oprot:writeListBegin(TType.STRUCT, #self.invitee)
    for _,iter139 in ipairs(self.invitee) do
      iter139:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.notificationDisabled ~= nil then
    oprot:writeFieldBegin('notificationDisabled', TType.BOOL, 31)
    oprot:writeBool(self.notificationDisabled)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

IdentityCredential = __TObject:new{
  provider,
  identifier,
  password
}

function IdentityCredential:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.provider = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.identifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.password = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function IdentityCredential:write(oprot)
  oprot:writeStructBegin('IdentityCredential')
  if self.provider ~= nil then
    oprot:writeFieldBegin('provider', TType.I32, 1)
    oprot:writeI32(self.provider)
    oprot:writeFieldEnd()
  end
  if self.identifier ~= nil then
    oprot:writeFieldBegin('identifier', TType.STRING, 2)
    oprot:writeString(self.identifier)
    oprot:writeFieldEnd()
  end
  if self.password ~= nil then
    oprot:writeFieldBegin('password', TType.STRING, 3)
    oprot:writeString(self.password)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LastReadMessageId = __TObject:new{
  mid,
  lastReadMessageId
}

function LastReadMessageId:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.lastReadMessageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LastReadMessageId:write(oprot)
  oprot:writeStructBegin('LastReadMessageId')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.lastReadMessageId ~= nil then
    oprot:writeFieldBegin('lastReadMessageId', TType.STRING, 2)
    oprot:writeString(self.lastReadMessageId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LastReadMessageIds = __TObject:new{
  chatId,
  lastReadMessageIds
}

function LastReadMessageIds:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.chatId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.lastReadMessageIds = {}
        local _etype143, _size140 = iprot:readListBegin()
        for _i=1,_size140 do
          local _elem144 = LastReadMessageId:new{}
          _elem144:read(iprot)
          table.insert(self.lastReadMessageIds, _elem144)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LastReadMessageIds:write(oprot)
  oprot:writeStructBegin('LastReadMessageIds')
  if self.chatId ~= nil then
    oprot:writeFieldBegin('chatId', TType.STRING, 1)
    oprot:writeString(self.chatId)
    oprot:writeFieldEnd()
  end
  if self.lastReadMessageIds ~= nil then
    oprot:writeFieldBegin('lastReadMessageIds', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.lastReadMessageIds)
    for _,iter145 in ipairs(self.lastReadMessageIds) do
      iter145:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LoginResult = __TObject:new{
  authToken,
  certificate,
  verifier,
  pinCode,
  type
}

function LoginResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.certificate = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.verifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.pinCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LoginResult:write(oprot)
  oprot:writeStructBegin('LoginResult')
  if self.authToken ~= nil then
    oprot:writeFieldBegin('authToken', TType.STRING, 1)
    oprot:writeString(self.authToken)
    oprot:writeFieldEnd()
  end
  if self.certificate ~= nil then
    oprot:writeFieldBegin('certificate', TType.STRING, 2)
    oprot:writeString(self.certificate)
    oprot:writeFieldEnd()
  end
  if self.verifier ~= nil then
    oprot:writeFieldBegin('verifier', TType.STRING, 3)
    oprot:writeString(self.verifier)
    oprot:writeFieldEnd()
  end
  if self.pinCode ~= nil then
    oprot:writeFieldBegin('pinCode', TType.STRING, 4)
    oprot:writeString(self.pinCode)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 5)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

LoginSession = __TObject:new{
  tokenKey,
  expirationTime,
  applicationType,
  systemName,
  accessLocation
}

function LoginSession:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.tokenKey = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.expirationTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I32 then
        self.applicationType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.systemName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.accessLocation = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function LoginSession:write(oprot)
  oprot:writeStructBegin('LoginSession')
  if self.tokenKey ~= nil then
    oprot:writeFieldBegin('tokenKey', TType.STRING, 1)
    oprot:writeString(self.tokenKey)
    oprot:writeFieldEnd()
  end
  if self.expirationTime ~= nil then
    oprot:writeFieldBegin('expirationTime', TType.I64, 3)
    oprot:writeI64(self.expirationTime)
    oprot:writeFieldEnd()
  end
  if self.applicationType ~= nil then
    oprot:writeFieldBegin('applicationType', TType.I32, 11)
    oprot:writeI32(self.applicationType)
    oprot:writeFieldEnd()
  end
  if self.systemName ~= nil then
    oprot:writeFieldBegin('systemName', TType.STRING, 12)
    oprot:writeString(self.systemName)
    oprot:writeFieldEnd()
  end
  if self.accessLocation ~= nil then
    oprot:writeFieldBegin('accessLocation', TType.STRING, 22)
    oprot:writeString(self.accessLocation)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Message = __TObject:new{
  from_,
  to,
  toType,
  id,
  createdTime,
  deliveredTime,
  text,
  location,
  hasContent,
  contentType,
  contentPreview,
  contentMetadata
}

function Message:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.from_ = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.to = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.toType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I64 then
        self.deliveredTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.text = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRUCT then
        self.location = Location:new{}
        self.location:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.BOOL then
        self.hasContent = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.contentType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.STRING then
        self.contentPreview = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.MAP then
        self.contentMetadata = {}
        local _ktype147, _vtype148, _size146 = iprot:readMapBegin() 
        for _i=1,_size146 do
          local _key150 = iprot:readString()
          local _val151 = iprot:readString()
          self.contentMetadata[_key150] = _val151
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Message:write(oprot)
  oprot:writeStructBegin('Message')
  if self.from_ ~= nil then
    oprot:writeFieldBegin('from_', TType.STRING, 1)
    oprot:writeString(self.from_)
    oprot:writeFieldEnd()
  end
  if self.to ~= nil then
    oprot:writeFieldBegin('to', TType.STRING, 2)
    oprot:writeString(self.to)
    oprot:writeFieldEnd()
  end
  if self.toType ~= nil then
    oprot:writeFieldBegin('toType', TType.I32, 3)
    oprot:writeI32(self.toType)
    oprot:writeFieldEnd()
  end
  if self.id ~= nil then
    oprot:writeFieldBegin('id', TType.STRING, 4)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 5)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.deliveredTime ~= nil then
    oprot:writeFieldBegin('deliveredTime', TType.I64, 6)
    oprot:writeI64(self.deliveredTime)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRING, 10)
    oprot:writeString(self.text)
    oprot:writeFieldEnd()
  end
  if self.location ~= nil then
    oprot:writeFieldBegin('location', TType.STRUCT, 11)
    self.location:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.hasContent ~= nil then
    oprot:writeFieldBegin('hasContent', TType.BOOL, 14)
    oprot:writeBool(self.hasContent)
    oprot:writeFieldEnd()
  end
  if self.contentType ~= nil then
    oprot:writeFieldBegin('contentType', TType.I32, 15)
    oprot:writeI32(self.contentType)
    oprot:writeFieldEnd()
  end
  if self.contentPreview ~= nil then
    oprot:writeFieldBegin('contentPreview', TType.STRING, 17)
    oprot:writeString(self.contentPreview)
    oprot:writeFieldEnd()
  end
  if self.contentMetadata ~= nil then
    oprot:writeFieldBegin('contentMetadata', TType.MAP, 18)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.contentMetadata))
    for kiter152,viter153 in pairs(self.contentMetadata) do
      oprot:writeString(kiter152)
      oprot:writeString(viter153)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MessageOperation = __TObject:new{
  revision,
  createdTime,
  type,
  reqSeq,
  status,
  param1,
  param2,
  param3,
  message
}

function MessageOperation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.reqSeq = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.status = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.param1 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.param2 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.param3 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRUCT then
        self.message = Message:new{}
        self.message:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MessageOperation:write(oprot)
  oprot:writeStructBegin('MessageOperation')
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 1)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 2)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 3)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.reqSeq ~= nil then
    oprot:writeFieldBegin('reqSeq', TType.I32, 4)
    oprot:writeI32(self.reqSeq)
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.I32, 5)
    oprot:writeI32(self.status)
    oprot:writeFieldEnd()
  end
  if self.param1 ~= nil then
    oprot:writeFieldBegin('param1', TType.STRING, 10)
    oprot:writeString(self.param1)
    oprot:writeFieldEnd()
  end
  if self.param2 ~= nil then
    oprot:writeFieldBegin('param2', TType.STRING, 11)
    oprot:writeString(self.param2)
    oprot:writeFieldEnd()
  end
  if self.param3 ~= nil then
    oprot:writeFieldBegin('param3', TType.STRING, 12)
    oprot:writeString(self.param3)
    oprot:writeFieldEnd()
  end
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRUCT, 20)
    self.message:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MessageOperations = __TObject:new{
  operations,
  endFlag
}

function MessageOperations:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.operations = {}
        local _etype157, _size154 = iprot:readListBegin()
        for _i=1,_size154 do
          local _elem158 = MessageOperation:new{}
          _elem158:read(iprot)
          table.insert(self.operations, _elem158)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.endFlag = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MessageOperations:write(oprot)
  oprot:writeStructBegin('MessageOperations')
  if self.operations ~= nil then
    oprot:writeFieldBegin('operations', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.operations)
    for _,iter159 in ipairs(self.operations) do
      iter159:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.endFlag ~= nil then
    oprot:writeFieldBegin('endFlag', TType.BOOL, 2)
    oprot:writeBool(self.endFlag)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

MetaProfile = __TObject:new{
  createTime,
  regionCode,
  identities
}

function MetaProfile:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.createTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.regionCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.identities = {}
        local _ktype161, _vtype162, _size160 = iprot:readMapBegin() 
        for _i=1,_size160 do
          local _key164 = iprot:readI32()
          local _val165 = iprot:readString()
          self.identities[_key164] = _val165
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function MetaProfile:write(oprot)
  oprot:writeStructBegin('MetaProfile')
  if self.createTime ~= nil then
    oprot:writeFieldBegin('createTime', TType.I64, 1)
    oprot:writeI64(self.createTime)
    oprot:writeFieldEnd()
  end
  if self.regionCode ~= nil then
    oprot:writeFieldBegin('regionCode', TType.STRING, 2)
    oprot:writeString(self.regionCode)
    oprot:writeFieldEnd()
  end
  if self.identities ~= nil then
    oprot:writeFieldBegin('identities', TType.MAP, 3)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.identities))
    for kiter166,viter167 in pairs(self.identities) do
      oprot:writeI32(kiter166)
      oprot:writeString(viter167)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NotificationItem = __TObject:new{
  id,
  from_,
  to,
  fromChannel,
  toChannel,
  revision,
  createdTime,
  content
}

function NotificationItem:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.from_ = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.to = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.fromChannel = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.toChannel = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.MAP then
        self.content = {}
        local _ktype169, _vtype170, _size168 = iprot:readMapBegin() 
        for _i=1,_size168 do
          local _key172 = iprot:readString()
          local _val173 = iprot:readString()
          self.content[_key172] = _val173
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NotificationItem:write(oprot)
  oprot:writeStructBegin('NotificationItem')
  if self.id ~= nil then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.from_ ~= nil then
    oprot:writeFieldBegin('from_', TType.STRING, 2)
    oprot:writeString(self.from_)
    oprot:writeFieldEnd()
  end
  if self.to ~= nil then
    oprot:writeFieldBegin('to', TType.STRING, 3)
    oprot:writeString(self.to)
    oprot:writeFieldEnd()
  end
  if self.fromChannel ~= nil then
    oprot:writeFieldBegin('fromChannel', TType.STRING, 4)
    oprot:writeString(self.fromChannel)
    oprot:writeFieldEnd()
  end
  if self.toChannel ~= nil then
    oprot:writeFieldBegin('toChannel', TType.STRING, 5)
    oprot:writeString(self.toChannel)
    oprot:writeFieldEnd()
  end
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 7)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 8)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.content ~= nil then
    oprot:writeFieldBegin('content', TType.MAP, 9)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.content))
    for kiter174,viter175 in pairs(self.content) do
      oprot:writeString(kiter174)
      oprot:writeString(viter175)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

NotificationFetchResult = __TObject:new{
  fetchMode,
  itemList
}

function NotificationFetchResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.fetchMode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.itemList = {}
        local _etype179, _size176 = iprot:readListBegin()
        for _i=1,_size176 do
          local _elem180 = NotificationItem:new{}
          _elem180:read(iprot)
          table.insert(self.itemList, _elem180)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function NotificationFetchResult:write(oprot)
  oprot:writeStructBegin('NotificationFetchResult')
  if self.fetchMode ~= nil then
    oprot:writeFieldBegin('fetchMode', TType.I32, 1)
    oprot:writeI32(self.fetchMode)
    oprot:writeFieldEnd()
  end
  if self.itemList ~= nil then
    oprot:writeFieldBegin('itemList', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.itemList)
    for _,iter181 in ipairs(self.itemList) do
      iter181:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Operation = __TObject:new{
  revision,
  createdTime,
  type,
  reqSeq,
  checksum,
  status,
  param1,
  param2,
  param3,
  message
}

function Operation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.revision = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.reqSeq = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.checksum = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.status = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.param1 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.param2 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.param3 = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRUCT then
        self.message = Message:new{}
        self.message:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Operation:write(oprot)
  oprot:writeStructBegin('Operation')
  if self.revision ~= nil then
    oprot:writeFieldBegin('revision', TType.I64, 1)
    oprot:writeI64(self.revision)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 2)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 3)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.reqSeq ~= nil then
    oprot:writeFieldBegin('reqSeq', TType.I32, 4)
    oprot:writeI32(self.reqSeq)
    oprot:writeFieldEnd()
  end
  if self.checksum ~= nil then
    oprot:writeFieldBegin('checksum', TType.STRING, 5)
    oprot:writeString(self.checksum)
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.I32, 7)
    oprot:writeI32(self.status)
    oprot:writeFieldEnd()
  end
  if self.param1 ~= nil then
    oprot:writeFieldBegin('param1', TType.STRING, 10)
    oprot:writeString(self.param1)
    oprot:writeFieldEnd()
  end
  if self.param2 ~= nil then
    oprot:writeFieldBegin('param2', TType.STRING, 11)
    oprot:writeString(self.param2)
    oprot:writeFieldEnd()
  end
  if self.param3 ~= nil then
    oprot:writeFieldBegin('param3', TType.STRING, 12)
    oprot:writeString(self.param3)
    oprot:writeFieldEnd()
  end
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRUCT, 20)
    self.message:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaymentReservation = __TObject:new{
  receiverMid,
  productId,
  language,
  location,
  currency,
  price,
  appStoreCode,
  messageText,
  messageTemplate,
  packageId
}

function PaymentReservation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.receiverMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.productId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.language = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.location = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.currency = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.price = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.appStoreCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.messageText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.I32 then
        self.messageTemplate = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I64 then
        self.packageId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaymentReservation:write(oprot)
  oprot:writeStructBegin('PaymentReservation')
  if self.receiverMid ~= nil then
    oprot:writeFieldBegin('receiverMid', TType.STRING, 1)
    oprot:writeString(self.receiverMid)
    oprot:writeFieldEnd()
  end
  if self.productId ~= nil then
    oprot:writeFieldBegin('productId', TType.STRING, 2)
    oprot:writeString(self.productId)
    oprot:writeFieldEnd()
  end
  if self.language ~= nil then
    oprot:writeFieldBegin('language', TType.STRING, 3)
    oprot:writeString(self.language)
    oprot:writeFieldEnd()
  end
  if self.location ~= nil then
    oprot:writeFieldBegin('location', TType.STRING, 4)
    oprot:writeString(self.location)
    oprot:writeFieldEnd()
  end
  if self.currency ~= nil then
    oprot:writeFieldBegin('currency', TType.STRING, 5)
    oprot:writeString(self.currency)
    oprot:writeFieldEnd()
  end
  if self.price ~= nil then
    oprot:writeFieldBegin('price', TType.STRING, 6)
    oprot:writeString(self.price)
    oprot:writeFieldEnd()
  end
  if self.appStoreCode ~= nil then
    oprot:writeFieldBegin('appStoreCode', TType.I32, 7)
    oprot:writeI32(self.appStoreCode)
    oprot:writeFieldEnd()
  end
  if self.messageText ~= nil then
    oprot:writeFieldBegin('messageText', TType.STRING, 8)
    oprot:writeString(self.messageText)
    oprot:writeFieldEnd()
  end
  if self.messageTemplate ~= nil then
    oprot:writeFieldBegin('messageTemplate', TType.I32, 9)
    oprot:writeI32(self.messageTemplate)
    oprot:writeFieldEnd()
  end
  if self.packageId ~= nil then
    oprot:writeFieldBegin('packageId', TType.I64, 10)
    oprot:writeI64(self.packageId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

PaymentReservationResult = __TObject:new{
  orderId,
  confirmUrl,
  extras
}

function PaymentReservationResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.orderId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.confirmUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.extras = {}
        local _ktype183, _vtype184, _size182 = iprot:readMapBegin() 
        for _i=1,_size182 do
          local _key186 = iprot:readString()
          local _val187 = iprot:readString()
          self.extras[_key186] = _val187
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function PaymentReservationResult:write(oprot)
  oprot:writeStructBegin('PaymentReservationResult')
  if self.orderId ~= nil then
    oprot:writeFieldBegin('orderId', TType.STRING, 1)
    oprot:writeString(self.orderId)
    oprot:writeFieldEnd()
  end
  if self.confirmUrl ~= nil then
    oprot:writeFieldBegin('confirmUrl', TType.STRING, 2)
    oprot:writeString(self.confirmUrl)
    oprot:writeFieldEnd()
  end
  if self.extras ~= nil then
    oprot:writeFieldBegin('extras', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extras))
    for kiter188,viter189 in pairs(self.extras) do
      oprot:writeString(kiter188)
      oprot:writeString(viter189)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Product = __TObject:new{
  productId,
  packageId,
  version,
  authorName,
  onSale,
  validDays,
  saleType,
  copyright,
  title,
  descriptionText,
  shopOrderId,
  fromMid,
  toMid,
  validUntil,
  priceTier,
  price,
  currency,
  currencySymbol,
  paymentType,
  createDate,
  ownFlag,
  eventType,
  urlSchema,
  downloadUrl,
  buddyMid,
  publishSince,
  newFlag,
  missionFlag
}

function Product:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.productId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.packageId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.version = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.authorName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.BOOL then
        self.onSale = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.validDays = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.saleType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.copyright = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRING then
        self.title = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.descriptionText = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.shopOrderId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.fromMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.STRING then
        self.toMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I64 then
        self.validUntil = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I32 then
        self.priceTier = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRING then
        self.price = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.STRING then
        self.currency = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.STRING then
        self.currencySymbol = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 19 then
      if ftype == TType.I32 then
        self.paymentType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.I64 then
        self.createDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.BOOL then
        self.ownFlag = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.I32 then
        self.eventType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.STRING then
        self.urlSchema = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.STRING then
        self.downloadUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.STRING then
        self.buddyMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.I64 then
        self.publishSince = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 27 then
      if ftype == TType.BOOL then
        self.newFlag = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 28 then
      if ftype == TType.BOOL then
        self.missionFlag = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Product:write(oprot)
  oprot:writeStructBegin('Product')
  if self.productId ~= nil then
    oprot:writeFieldBegin('productId', TType.STRING, 1)
    oprot:writeString(self.productId)
    oprot:writeFieldEnd()
  end
  if self.packageId ~= nil then
    oprot:writeFieldBegin('packageId', TType.I64, 2)
    oprot:writeI64(self.packageId)
    oprot:writeFieldEnd()
  end
  if self.version ~= nil then
    oprot:writeFieldBegin('version', TType.I32, 3)
    oprot:writeI32(self.version)
    oprot:writeFieldEnd()
  end
  if self.authorName ~= nil then
    oprot:writeFieldBegin('authorName', TType.STRING, 4)
    oprot:writeString(self.authorName)
    oprot:writeFieldEnd()
  end
  if self.onSale ~= nil then
    oprot:writeFieldBegin('onSale', TType.BOOL, 5)
    oprot:writeBool(self.onSale)
    oprot:writeFieldEnd()
  end
  if self.validDays ~= nil then
    oprot:writeFieldBegin('validDays', TType.I32, 6)
    oprot:writeI32(self.validDays)
    oprot:writeFieldEnd()
  end
  if self.saleType ~= nil then
    oprot:writeFieldBegin('saleType', TType.I32, 7)
    oprot:writeI32(self.saleType)
    oprot:writeFieldEnd()
  end
  if self.copyright ~= nil then
    oprot:writeFieldBegin('copyright', TType.STRING, 8)
    oprot:writeString(self.copyright)
    oprot:writeFieldEnd()
  end
  if self.title ~= nil then
    oprot:writeFieldBegin('title', TType.STRING, 9)
    oprot:writeString(self.title)
    oprot:writeFieldEnd()
  end
  if self.descriptionText ~= nil then
    oprot:writeFieldBegin('descriptionText', TType.STRING, 10)
    oprot:writeString(self.descriptionText)
    oprot:writeFieldEnd()
  end
  if self.shopOrderId ~= nil then
    oprot:writeFieldBegin('shopOrderId', TType.I64, 11)
    oprot:writeI64(self.shopOrderId)
    oprot:writeFieldEnd()
  end
  if self.fromMid ~= nil then
    oprot:writeFieldBegin('fromMid', TType.STRING, 12)
    oprot:writeString(self.fromMid)
    oprot:writeFieldEnd()
  end
  if self.toMid ~= nil then
    oprot:writeFieldBegin('toMid', TType.STRING, 13)
    oprot:writeString(self.toMid)
    oprot:writeFieldEnd()
  end
  if self.validUntil ~= nil then
    oprot:writeFieldBegin('validUntil', TType.I64, 14)
    oprot:writeI64(self.validUntil)
    oprot:writeFieldEnd()
  end
  if self.priceTier ~= nil then
    oprot:writeFieldBegin('priceTier', TType.I32, 15)
    oprot:writeI32(self.priceTier)
    oprot:writeFieldEnd()
  end
  if self.price ~= nil then
    oprot:writeFieldBegin('price', TType.STRING, 16)
    oprot:writeString(self.price)
    oprot:writeFieldEnd()
  end
  if self.currency ~= nil then
    oprot:writeFieldBegin('currency', TType.STRING, 17)
    oprot:writeString(self.currency)
    oprot:writeFieldEnd()
  end
  if self.currencySymbol ~= nil then
    oprot:writeFieldBegin('currencySymbol', TType.STRING, 18)
    oprot:writeString(self.currencySymbol)
    oprot:writeFieldEnd()
  end
  if self.paymentType ~= nil then
    oprot:writeFieldBegin('paymentType', TType.I32, 19)
    oprot:writeI32(self.paymentType)
    oprot:writeFieldEnd()
  end
  if self.createDate ~= nil then
    oprot:writeFieldBegin('createDate', TType.I64, 20)
    oprot:writeI64(self.createDate)
    oprot:writeFieldEnd()
  end
  if self.ownFlag ~= nil then
    oprot:writeFieldBegin('ownFlag', TType.BOOL, 21)
    oprot:writeBool(self.ownFlag)
    oprot:writeFieldEnd()
  end
  if self.eventType ~= nil then
    oprot:writeFieldBegin('eventType', TType.I32, 22)
    oprot:writeI32(self.eventType)
    oprot:writeFieldEnd()
  end
  if self.urlSchema ~= nil then
    oprot:writeFieldBegin('urlSchema', TType.STRING, 23)
    oprot:writeString(self.urlSchema)
    oprot:writeFieldEnd()
  end
  if self.downloadUrl ~= nil then
    oprot:writeFieldBegin('downloadUrl', TType.STRING, 24)
    oprot:writeString(self.downloadUrl)
    oprot:writeFieldEnd()
  end
  if self.buddyMid ~= nil then
    oprot:writeFieldBegin('buddyMid', TType.STRING, 25)
    oprot:writeString(self.buddyMid)
    oprot:writeFieldEnd()
  end
  if self.publishSince ~= nil then
    oprot:writeFieldBegin('publishSince', TType.I64, 26)
    oprot:writeI64(self.publishSince)
    oprot:writeFieldEnd()
  end
  if self.newFlag ~= nil then
    oprot:writeFieldBegin('newFlag', TType.BOOL, 27)
    oprot:writeBool(self.newFlag)
    oprot:writeFieldEnd()
  end
  if self.missionFlag ~= nil then
    oprot:writeFieldBegin('missionFlag', TType.BOOL, 28)
    oprot:writeBool(self.missionFlag)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ProductList = __TObject:new{
  hasNext,
  bannerSequence,
  bannerTargetType,
  bannerTargetPath,
  productList,
  bannerLang
}

function ProductList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.hasNext = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I64 then
        self.bannerSequence = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I32 then
        self.bannerTargetType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.bannerTargetPath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.LIST then
        self.productList = {}
        local _etype193, _size190 = iprot:readListBegin()
        for _i=1,_size190 do
          local _elem194 = Product:new{}
          _elem194:read(iprot)
          table.insert(self.productList, _elem194)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.bannerLang = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ProductList:write(oprot)
  oprot:writeStructBegin('ProductList')
  if self.hasNext ~= nil then
    oprot:writeFieldBegin('hasNext', TType.BOOL, 1)
    oprot:writeBool(self.hasNext)
    oprot:writeFieldEnd()
  end
  if self.bannerSequence ~= nil then
    oprot:writeFieldBegin('bannerSequence', TType.I64, 4)
    oprot:writeI64(self.bannerSequence)
    oprot:writeFieldEnd()
  end
  if self.bannerTargetType ~= nil then
    oprot:writeFieldBegin('bannerTargetType', TType.I32, 5)
    oprot:writeI32(self.bannerTargetType)
    oprot:writeFieldEnd()
  end
  if self.bannerTargetPath ~= nil then
    oprot:writeFieldBegin('bannerTargetPath', TType.STRING, 6)
    oprot:writeString(self.bannerTargetPath)
    oprot:writeFieldEnd()
  end
  if self.productList ~= nil then
    oprot:writeFieldBegin('productList', TType.LIST, 7)
    oprot:writeListBegin(TType.STRUCT, #self.productList)
    for _,iter195 in ipairs(self.productList) do
      iter195:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.bannerLang ~= nil then
    oprot:writeFieldBegin('bannerLang', TType.STRING, 8)
    oprot:writeString(self.bannerLang)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ProductSimple = __TObject:new{
  productId,
  packageId,
  version,
  onSale,
  validUntil
}

function ProductSimple:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.productId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.packageId = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.version = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.BOOL then
        self.onSale = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.validUntil = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ProductSimple:write(oprot)
  oprot:writeStructBegin('ProductSimple')
  if self.productId ~= nil then
    oprot:writeFieldBegin('productId', TType.STRING, 1)
    oprot:writeString(self.productId)
    oprot:writeFieldEnd()
  end
  if self.packageId ~= nil then
    oprot:writeFieldBegin('packageId', TType.I64, 2)
    oprot:writeI64(self.packageId)
    oprot:writeFieldEnd()
  end
  if self.version ~= nil then
    oprot:writeFieldBegin('version', TType.I32, 3)
    oprot:writeI32(self.version)
    oprot:writeFieldEnd()
  end
  if self.onSale ~= nil then
    oprot:writeFieldBegin('onSale', TType.BOOL, 4)
    oprot:writeBool(self.onSale)
    oprot:writeFieldEnd()
  end
  if self.validUntil ~= nil then
    oprot:writeFieldBegin('validUntil', TType.I64, 5)
    oprot:writeI64(self.validUntil)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ProductSimpleList = __TObject:new{
  hasNext,
  reinvokeHour,
  lastVersionSeq,
  productList,
  recentNewReleaseDate,
  recentEventReleaseDate
}

function ProductSimpleList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.hasNext = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.reinvokeHour = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.lastVersionSeq = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.productList = {}
        local _etype199, _size196 = iprot:readListBegin()
        for _i=1,_size196 do
          local _elem200 = ProductSimple:new{}
          _elem200:read(iprot)
          table.insert(self.productList, _elem200)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.recentNewReleaseDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I64 then
        self.recentEventReleaseDate = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ProductSimpleList:write(oprot)
  oprot:writeStructBegin('ProductSimpleList')
  if self.hasNext ~= nil then
    oprot:writeFieldBegin('hasNext', TType.BOOL, 1)
    oprot:writeBool(self.hasNext)
    oprot:writeFieldEnd()
  end
  if self.reinvokeHour ~= nil then
    oprot:writeFieldBegin('reinvokeHour', TType.I32, 2)
    oprot:writeI32(self.reinvokeHour)
    oprot:writeFieldEnd()
  end
  if self.lastVersionSeq ~= nil then
    oprot:writeFieldBegin('lastVersionSeq', TType.I64, 3)
    oprot:writeI64(self.lastVersionSeq)
    oprot:writeFieldEnd()
  end
  if self.productList ~= nil then
    oprot:writeFieldBegin('productList', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.productList)
    for _,iter201 in ipairs(self.productList) do
      iter201:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.recentNewReleaseDate ~= nil then
    oprot:writeFieldBegin('recentNewReleaseDate', TType.I64, 5)
    oprot:writeI64(self.recentNewReleaseDate)
    oprot:writeFieldEnd()
  end
  if self.recentEventReleaseDate ~= nil then
    oprot:writeFieldBegin('recentEventReleaseDate', TType.I64, 6)
    oprot:writeI64(self.recentEventReleaseDate)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Profile = __TObject:new{
  mid,
  userid,
  phone,
  email,
  regionCode,
  displayName,
  phoneticName,
  pictureStatus,
  thumbnailUrl,
  statusMessage,
  allowSearchByUserid,
  allowSearchByEmail,
  picturePath
}

function Profile:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.userid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.phone = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.email = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.regionCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.STRING then
        self.phoneticName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.pictureStatus = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.STRING then
        self.thumbnailUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.STRING then
        self.statusMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.BOOL then
        self.allowSearchByUserid = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 32 then
      if ftype == TType.BOOL then
        self.allowSearchByEmail = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 33 then
      if ftype == TType.STRING then
        self.picturePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Profile:write(oprot)
  oprot:writeStructBegin('Profile')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.userid ~= nil then
    oprot:writeFieldBegin('userid', TType.STRING, 3)
    oprot:writeString(self.userid)
    oprot:writeFieldEnd()
  end
  if self.phone ~= nil then
    oprot:writeFieldBegin('phone', TType.STRING, 10)
    oprot:writeString(self.phone)
    oprot:writeFieldEnd()
  end
  if self.email ~= nil then
    oprot:writeFieldBegin('email', TType.STRING, 11)
    oprot:writeString(self.email)
    oprot:writeFieldEnd()
  end
  if self.regionCode ~= nil then
    oprot:writeFieldBegin('regionCode', TType.STRING, 12)
    oprot:writeString(self.regionCode)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 20)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.phoneticName ~= nil then
    oprot:writeFieldBegin('phoneticName', TType.STRING, 21)
    oprot:writeString(self.phoneticName)
    oprot:writeFieldEnd()
  end
  if self.pictureStatus ~= nil then
    oprot:writeFieldBegin('pictureStatus', TType.STRING, 22)
    oprot:writeString(self.pictureStatus)
    oprot:writeFieldEnd()
  end
  if self.thumbnailUrl ~= nil then
    oprot:writeFieldBegin('thumbnailUrl', TType.STRING, 23)
    oprot:writeString(self.thumbnailUrl)
    oprot:writeFieldEnd()
  end
  if self.statusMessage ~= nil then
    oprot:writeFieldBegin('statusMessage', TType.STRING, 24)
    oprot:writeString(self.statusMessage)
    oprot:writeFieldEnd()
  end
  if self.allowSearchByUserid ~= nil then
    oprot:writeFieldBegin('allowSearchByUserid', TType.BOOL, 31)
    oprot:writeBool(self.allowSearchByUserid)
    oprot:writeFieldEnd()
  end
  if self.allowSearchByEmail ~= nil then
    oprot:writeFieldBegin('allowSearchByEmail', TType.BOOL, 32)
    oprot:writeBool(self.allowSearchByEmail)
    oprot:writeFieldEnd()
  end
  if self.picturePath ~= nil then
    oprot:writeFieldBegin('picturePath', TType.STRING, 33)
    oprot:writeString(self.picturePath)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ProximityMatchCandidateResult = __TObject:new{
  users,
  buddies
}

function ProximityMatchCandidateResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.users = {}
        local _etype205, _size202 = iprot:readListBegin()
        for _i=1,_size202 do
          local _elem206 = Contact:new{}
          _elem206:read(iprot)
          table.insert(self.users, _elem206)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.buddies = {}
        local _etype210, _size207 = iprot:readListBegin()
        for _i=1,_size207 do
          local _elem211 = Contact:new{}
          _elem211:read(iprot)
          table.insert(self.buddies, _elem211)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ProximityMatchCandidateResult:write(oprot)
  oprot:writeStructBegin('ProximityMatchCandidateResult')
  if self.users ~= nil then
    oprot:writeFieldBegin('users', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.users)
    for _,iter212 in ipairs(self.users) do
      iter212:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.buddies ~= nil then
    oprot:writeFieldBegin('buddies', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.buddies)
    for _,iter213 in ipairs(self.buddies) do
      iter213:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RegisterWithSnsIdResult = __TObject:new{
  authToken,
  userCreated
}

function RegisterWithSnsIdResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.authToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.userCreated = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RegisterWithSnsIdResult:write(oprot)
  oprot:writeStructBegin('RegisterWithSnsIdResult')
  if self.authToken ~= nil then
    oprot:writeFieldBegin('authToken', TType.STRING, 1)
    oprot:writeString(self.authToken)
    oprot:writeFieldEnd()
  end
  if self.userCreated ~= nil then
    oprot:writeFieldBegin('userCreated', TType.BOOL, 2)
    oprot:writeBool(self.userCreated)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RequestTokenResponse = __TObject:new{
  requestToken,
  returnUrl
}

function RequestTokenResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestToken = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.returnUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RequestTokenResponse:write(oprot)
  oprot:writeStructBegin('RequestTokenResponse')
  if self.requestToken ~= nil then
    oprot:writeFieldBegin('requestToken', TType.STRING, 1)
    oprot:writeString(self.requestToken)
    oprot:writeFieldEnd()
  end
  if self.returnUrl ~= nil then
    oprot:writeFieldBegin('returnUrl', TType.STRING, 2)
    oprot:writeString(self.returnUrl)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Room = __TObject:new{
  mid,
  createdTime,
  contacts,
  notificationDisabled
}

function Room:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.createdTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.contacts = {}
        local _etype217, _size214 = iprot:readListBegin()
        for _i=1,_size214 do
          local _elem218 = Contact:new{}
          _elem218:read(iprot)
          table.insert(self.contacts, _elem218)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 31 then
      if ftype == TType.BOOL then
        self.notificationDisabled = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Room:write(oprot)
  oprot:writeStructBegin('Room')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.createdTime ~= nil then
    oprot:writeFieldBegin('createdTime', TType.I64, 2)
    oprot:writeI64(self.createdTime)
    oprot:writeFieldEnd()
  end
  if self.contacts ~= nil then
    oprot:writeFieldBegin('contacts', TType.LIST, 10)
    oprot:writeListBegin(TType.STRUCT, #self.contacts)
    for _,iter219 in ipairs(self.contacts) do
      iter219:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.notificationDisabled ~= nil then
    oprot:writeFieldBegin('notificationDisabled', TType.BOOL, 31)
    oprot:writeBool(self.notificationDisabled)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RSAKey = __TObject:new{
  keynm,
  nvalue,
  evalue,
  sessionKey
}

function RSAKey:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.keynm = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.nvalue = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.evalue = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.sessionKey = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RSAKey:write(oprot)
  oprot:writeStructBegin('RSAKey')
  if self.keynm ~= nil then
    oprot:writeFieldBegin('keynm', TType.STRING, 1)
    oprot:writeString(self.keynm)
    oprot:writeFieldEnd()
  end
  if self.nvalue ~= nil then
    oprot:writeFieldBegin('nvalue', TType.STRING, 2)
    oprot:writeString(self.nvalue)
    oprot:writeFieldEnd()
  end
  if self.evalue ~= nil then
    oprot:writeFieldBegin('evalue', TType.STRING, 3)
    oprot:writeString(self.evalue)
    oprot:writeFieldEnd()
  end
  if self.sessionKey ~= nil then
    oprot:writeFieldBegin('sessionKey', TType.STRING, 4)
    oprot:writeString(self.sessionKey)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SendBuddyMessageResult = __TObject:new{
  requestId,
  state,
  messageId,
  eventNo,
  receiverCount,
  successCount,
  failCount,
  cancelCount,
  blockCount,
  unregisterCount,
  timestamp,
  message
}

function SendBuddyMessageResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.state = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.messageId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.eventNo = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.receiverCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I64 then
        self.successCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I64 then
        self.failCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I64 then
        self.cancelCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I64 then
        self.blockCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.I64 then
        self.unregisterCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I64 then
        self.timestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.message = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SendBuddyMessageResult:write(oprot)
  oprot:writeStructBegin('SendBuddyMessageResult')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.state ~= nil then
    oprot:writeFieldBegin('state', TType.I32, 2)
    oprot:writeI32(self.state)
    oprot:writeFieldEnd()
  end
  if self.messageId ~= nil then
    oprot:writeFieldBegin('messageId', TType.STRING, 3)
    oprot:writeString(self.messageId)
    oprot:writeFieldEnd()
  end
  if self.eventNo ~= nil then
    oprot:writeFieldBegin('eventNo', TType.I32, 4)
    oprot:writeI32(self.eventNo)
    oprot:writeFieldEnd()
  end
  if self.receiverCount ~= nil then
    oprot:writeFieldBegin('receiverCount', TType.I64, 11)
    oprot:writeI64(self.receiverCount)
    oprot:writeFieldEnd()
  end
  if self.successCount ~= nil then
    oprot:writeFieldBegin('successCount', TType.I64, 12)
    oprot:writeI64(self.successCount)
    oprot:writeFieldEnd()
  end
  if self.failCount ~= nil then
    oprot:writeFieldBegin('failCount', TType.I64, 13)
    oprot:writeI64(self.failCount)
    oprot:writeFieldEnd()
  end
  if self.cancelCount ~= nil then
    oprot:writeFieldBegin('cancelCount', TType.I64, 14)
    oprot:writeI64(self.cancelCount)
    oprot:writeFieldEnd()
  end
  if self.blockCount ~= nil then
    oprot:writeFieldBegin('blockCount', TType.I64, 15)
    oprot:writeI64(self.blockCount)
    oprot:writeFieldEnd()
  end
  if self.unregisterCount ~= nil then
    oprot:writeFieldBegin('unregisterCount', TType.I64, 16)
    oprot:writeI64(self.unregisterCount)
    oprot:writeFieldEnd()
  end
  if self.timestamp ~= nil then
    oprot:writeFieldBegin('timestamp', TType.I64, 21)
    oprot:writeI64(self.timestamp)
    oprot:writeFieldEnd()
  end
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRING, 22)
    oprot:writeString(self.message)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SetBuddyOnAirResult = __TObject:new{
  requestId,
  state,
  eventNo,
  receiverCount,
  successCount,
  failCount,
  cancelCount,
  unregisterCount,
  timestamp,
  message
}

function SetBuddyOnAirResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.state = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.eventNo = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.receiverCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I64 then
        self.successCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I64 then
        self.failCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I64 then
        self.cancelCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I64 then
        self.unregisterCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I64 then
        self.timestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.message = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SetBuddyOnAirResult:write(oprot)
  oprot:writeStructBegin('SetBuddyOnAirResult')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.state ~= nil then
    oprot:writeFieldBegin('state', TType.I32, 2)
    oprot:writeI32(self.state)
    oprot:writeFieldEnd()
  end
  if self.eventNo ~= nil then
    oprot:writeFieldBegin('eventNo', TType.I32, 3)
    oprot:writeI32(self.eventNo)
    oprot:writeFieldEnd()
  end
  if self.receiverCount ~= nil then
    oprot:writeFieldBegin('receiverCount', TType.I64, 11)
    oprot:writeI64(self.receiverCount)
    oprot:writeFieldEnd()
  end
  if self.successCount ~= nil then
    oprot:writeFieldBegin('successCount', TType.I64, 12)
    oprot:writeI64(self.successCount)
    oprot:writeFieldEnd()
  end
  if self.failCount ~= nil then
    oprot:writeFieldBegin('failCount', TType.I64, 13)
    oprot:writeI64(self.failCount)
    oprot:writeFieldEnd()
  end
  if self.cancelCount ~= nil then
    oprot:writeFieldBegin('cancelCount', TType.I64, 14)
    oprot:writeI64(self.cancelCount)
    oprot:writeFieldEnd()
  end
  if self.unregisterCount ~= nil then
    oprot:writeFieldBegin('unregisterCount', TType.I64, 15)
    oprot:writeI64(self.unregisterCount)
    oprot:writeFieldEnd()
  end
  if self.timestamp ~= nil then
    oprot:writeFieldBegin('timestamp', TType.I64, 21)
    oprot:writeI64(self.timestamp)
    oprot:writeFieldEnd()
  end
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRING, 22)
    oprot:writeString(self.message)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Settings = __TObject:new{
  notificationEnable,
  notificationMuteExpiration,
  notificationNewMessage,
  notificationGroupInvitation,
  notificationShowMessage,
  notificationIncomingCall,
  notificationSoundMessage,
  notificationSoundGroup,
  notificationDisabledWithSub,
  privacySyncContacts,
  privacySearchByPhoneNumber,
  privacySearchByUserid,
  privacySearchByEmail,
  privacyAllowSecondaryDeviceLogin,
  privacyProfileImagePostToMyhome,
  privacyReceiveMessagesFromNotFriend,
  contactMyTicket,
  identityProvider,
  identityIdentifier,
  snsAccounts,
  phoneRegistration,
  emailConfirmationStatus,
  preferenceLocale,
  customModes
}

function Settings:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 10 then
      if ftype == TType.BOOL then
        self.notificationEnable = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.notificationMuteExpiration = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.BOOL then
        self.notificationNewMessage = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.BOOL then
        self.notificationGroupInvitation = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.BOOL then
        self.notificationShowMessage = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.BOOL then
        self.notificationIncomingCall = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 16 then
      if ftype == TType.STRING then
        self.notificationSoundMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 17 then
      if ftype == TType.STRING then
        self.notificationSoundGroup = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 18 then
      if ftype == TType.BOOL then
        self.notificationDisabledWithSub = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 20 then
      if ftype == TType.BOOL then
        self.privacySyncContacts = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.BOOL then
        self.privacySearchByPhoneNumber = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.BOOL then
        self.privacySearchByUserid = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 23 then
      if ftype == TType.BOOL then
        self.privacySearchByEmail = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 24 then
      if ftype == TType.BOOL then
        self.privacyAllowSecondaryDeviceLogin = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 25 then
      if ftype == TType.BOOL then
        self.privacyProfileImagePostToMyhome = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 26 then
      if ftype == TType.BOOL then
        self.privacyReceiveMessagesFromNotFriend = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 30 then
      if ftype == TType.STRING then
        self.contactMyTicket = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 40 then
      if ftype == TType.I32 then
        self.identityProvider = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 41 then
      if ftype == TType.STRING then
        self.identityIdentifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 42 then
      if ftype == TType.MAP then
        self.snsAccounts = {}
        local _ktype221, _vtype222, _size220 = iprot:readMapBegin() 
        for _i=1,_size220 do
          local _key224 = iprot:readI32()
          local _val225 = iprot:readString()
          self.snsAccounts[_key224] = _val225
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 43 then
      if ftype == TType.BOOL then
        self.phoneRegistration = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 44 then
      if ftype == TType.I32 then
        self.emailConfirmationStatus = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 50 then
      if ftype == TType.STRING then
        self.preferenceLocale = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 60 then
      if ftype == TType.MAP then
        self.customModes = {}
        local _ktype227, _vtype228, _size226 = iprot:readMapBegin() 
        for _i=1,_size226 do
          local _key230 = iprot:readI32()
          local _val231 = iprot:readString()
          self.customModes[_key230] = _val231
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Settings:write(oprot)
  oprot:writeStructBegin('Settings')
  if self.notificationEnable ~= nil then
    oprot:writeFieldBegin('notificationEnable', TType.BOOL, 10)
    oprot:writeBool(self.notificationEnable)
    oprot:writeFieldEnd()
  end
  if self.notificationMuteExpiration ~= nil then
    oprot:writeFieldBegin('notificationMuteExpiration', TType.I64, 11)
    oprot:writeI64(self.notificationMuteExpiration)
    oprot:writeFieldEnd()
  end
  if self.notificationNewMessage ~= nil then
    oprot:writeFieldBegin('notificationNewMessage', TType.BOOL, 12)
    oprot:writeBool(self.notificationNewMessage)
    oprot:writeFieldEnd()
  end
  if self.notificationGroupInvitation ~= nil then
    oprot:writeFieldBegin('notificationGroupInvitation', TType.BOOL, 13)
    oprot:writeBool(self.notificationGroupInvitation)
    oprot:writeFieldEnd()
  end
  if self.notificationShowMessage ~= nil then
    oprot:writeFieldBegin('notificationShowMessage', TType.BOOL, 14)
    oprot:writeBool(self.notificationShowMessage)
    oprot:writeFieldEnd()
  end
  if self.notificationIncomingCall ~= nil then
    oprot:writeFieldBegin('notificationIncomingCall', TType.BOOL, 15)
    oprot:writeBool(self.notificationIncomingCall)
    oprot:writeFieldEnd()
  end
  if self.notificationSoundMessage ~= nil then
    oprot:writeFieldBegin('notificationSoundMessage', TType.STRING, 16)
    oprot:writeString(self.notificationSoundMessage)
    oprot:writeFieldEnd()
  end
  if self.notificationSoundGroup ~= nil then
    oprot:writeFieldBegin('notificationSoundGroup', TType.STRING, 17)
    oprot:writeString(self.notificationSoundGroup)
    oprot:writeFieldEnd()
  end
  if self.notificationDisabledWithSub ~= nil then
    oprot:writeFieldBegin('notificationDisabledWithSub', TType.BOOL, 18)
    oprot:writeBool(self.notificationDisabledWithSub)
    oprot:writeFieldEnd()
  end
  if self.privacySyncContacts ~= nil then
    oprot:writeFieldBegin('privacySyncContacts', TType.BOOL, 20)
    oprot:writeBool(self.privacySyncContacts)
    oprot:writeFieldEnd()
  end
  if self.privacySearchByPhoneNumber ~= nil then
    oprot:writeFieldBegin('privacySearchByPhoneNumber', TType.BOOL, 21)
    oprot:writeBool(self.privacySearchByPhoneNumber)
    oprot:writeFieldEnd()
  end
  if self.privacySearchByUserid ~= nil then
    oprot:writeFieldBegin('privacySearchByUserid', TType.BOOL, 22)
    oprot:writeBool(self.privacySearchByUserid)
    oprot:writeFieldEnd()
  end
  if self.privacySearchByEmail ~= nil then
    oprot:writeFieldBegin('privacySearchByEmail', TType.BOOL, 23)
    oprot:writeBool(self.privacySearchByEmail)
    oprot:writeFieldEnd()
  end
  if self.privacyAllowSecondaryDeviceLogin ~= nil then
    oprot:writeFieldBegin('privacyAllowSecondaryDeviceLogin', TType.BOOL, 24)
    oprot:writeBool(self.privacyAllowSecondaryDeviceLogin)
    oprot:writeFieldEnd()
  end
  if self.privacyProfileImagePostToMyhome ~= nil then
    oprot:writeFieldBegin('privacyProfileImagePostToMyhome', TType.BOOL, 25)
    oprot:writeBool(self.privacyProfileImagePostToMyhome)
    oprot:writeFieldEnd()
  end
  if self.privacyReceiveMessagesFromNotFriend ~= nil then
    oprot:writeFieldBegin('privacyReceiveMessagesFromNotFriend', TType.BOOL, 26)
    oprot:writeBool(self.privacyReceiveMessagesFromNotFriend)
    oprot:writeFieldEnd()
  end
  if self.contactMyTicket ~= nil then
    oprot:writeFieldBegin('contactMyTicket', TType.STRING, 30)
    oprot:writeString(self.contactMyTicket)
    oprot:writeFieldEnd()
  end
  if self.identityProvider ~= nil then
    oprot:writeFieldBegin('identityProvider', TType.I32, 40)
    oprot:writeI32(self.identityProvider)
    oprot:writeFieldEnd()
  end
  if self.identityIdentifier ~= nil then
    oprot:writeFieldBegin('identityIdentifier', TType.STRING, 41)
    oprot:writeString(self.identityIdentifier)
    oprot:writeFieldEnd()
  end
  if self.snsAccounts ~= nil then
    oprot:writeFieldBegin('snsAccounts', TType.MAP, 42)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.snsAccounts))
    for kiter232,viter233 in pairs(self.snsAccounts) do
      oprot:writeI32(kiter232)
      oprot:writeString(viter233)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.phoneRegistration ~= nil then
    oprot:writeFieldBegin('phoneRegistration', TType.BOOL, 43)
    oprot:writeBool(self.phoneRegistration)
    oprot:writeFieldEnd()
  end
  if self.emailConfirmationStatus ~= nil then
    oprot:writeFieldBegin('emailConfirmationStatus', TType.I32, 44)
    oprot:writeI32(self.emailConfirmationStatus)
    oprot:writeFieldEnd()
  end
  if self.preferenceLocale ~= nil then
    oprot:writeFieldBegin('preferenceLocale', TType.STRING, 50)
    oprot:writeString(self.preferenceLocale)
    oprot:writeFieldEnd()
  end
  if self.customModes ~= nil then
    oprot:writeFieldBegin('customModes', TType.MAP, 60)
    oprot:writeMapBegin(TType.I32, TType.STRING, ttable_size(self.customModes))
    for kiter234,viter235 in pairs(self.customModes) do
      oprot:writeI32(kiter234)
      oprot:writeString(viter235)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SimpleChannelClient = __TObject:new{
  applicationType,
  applicationVersion,
  locale
}

function SimpleChannelClient:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.applicationType = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.applicationVersion = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.locale = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SimpleChannelClient:write(oprot)
  oprot:writeStructBegin('SimpleChannelClient')
  if self.applicationType ~= nil then
    oprot:writeFieldBegin('applicationType', TType.STRING, 1)
    oprot:writeString(self.applicationType)
    oprot:writeFieldEnd()
  end
  if self.applicationVersion ~= nil then
    oprot:writeFieldBegin('applicationVersion', TType.STRING, 2)
    oprot:writeString(self.applicationVersion)
    oprot:writeFieldEnd()
  end
  if self.locale ~= nil then
    oprot:writeFieldBegin('locale', TType.STRING, 3)
    oprot:writeString(self.locale)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SimpleChannelContact = __TObject:new{
  mid,
  displayName,
  pictureStatus,
  picturePath,
  statusMessage
}

function SimpleChannelContact:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.displayName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.pictureStatus = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.picturePath = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.statusMessage = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SimpleChannelContact:write(oprot)
  oprot:writeStructBegin('SimpleChannelContact')
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 1)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.displayName ~= nil then
    oprot:writeFieldBegin('displayName', TType.STRING, 2)
    oprot:writeString(self.displayName)
    oprot:writeFieldEnd()
  end
  if self.pictureStatus ~= nil then
    oprot:writeFieldBegin('pictureStatus', TType.STRING, 3)
    oprot:writeString(self.pictureStatus)
    oprot:writeFieldEnd()
  end
  if self.picturePath ~= nil then
    oprot:writeFieldBegin('picturePath', TType.STRING, 4)
    oprot:writeString(self.picturePath)
    oprot:writeFieldEnd()
  end
  if self.statusMessage ~= nil then
    oprot:writeFieldBegin('statusMessage', TType.STRING, 5)
    oprot:writeString(self.statusMessage)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SnsFriend = __TObject:new{
  snsUserId,
  snsUserName,
  snsIdType
}

function SnsFriend:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.snsUserId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.snsUserName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.snsIdType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SnsFriend:write(oprot)
  oprot:writeStructBegin('SnsFriend')
  if self.snsUserId ~= nil then
    oprot:writeFieldBegin('snsUserId', TType.STRING, 1)
    oprot:writeString(self.snsUserId)
    oprot:writeFieldEnd()
  end
  if self.snsUserName ~= nil then
    oprot:writeFieldBegin('snsUserName', TType.STRING, 2)
    oprot:writeString(self.snsUserName)
    oprot:writeFieldEnd()
  end
  if self.snsIdType ~= nil then
    oprot:writeFieldBegin('snsIdType', TType.I32, 3)
    oprot:writeI32(self.snsIdType)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SnsFriendContactRegistration = __TObject:new{
  contact,
  snsIdType,
  snsUserId
}

function SnsFriendContactRegistration:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.contact = Contact:new{}
        self.contact:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.snsIdType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.snsUserId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SnsFriendContactRegistration:write(oprot)
  oprot:writeStructBegin('SnsFriendContactRegistration')
  if self.contact ~= nil then
    oprot:writeFieldBegin('contact', TType.STRUCT, 1)
    self.contact:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.snsIdType ~= nil then
    oprot:writeFieldBegin('snsIdType', TType.I32, 2)
    oprot:writeI32(self.snsIdType)
    oprot:writeFieldEnd()
  end
  if self.snsUserId ~= nil then
    oprot:writeFieldBegin('snsUserId', TType.STRING, 3)
    oprot:writeString(self.snsUserId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SnsFriendModification = __TObject:new{
  type,
  snsFriend
}

function SnsFriendModification:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.snsFriend = SnsFriend:new{}
        self.snsFriend:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SnsFriendModification:write(oprot)
  oprot:writeStructBegin('SnsFriendModification')
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.snsFriend ~= nil then
    oprot:writeFieldBegin('snsFriend', TType.STRUCT, 2)
    self.snsFriend:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SnsFriends = __TObject:new{
  snsFriends,
  hasMore
}

function SnsFriends:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.snsFriends = {}
        local _etype239, _size236 = iprot:readListBegin()
        for _i=1,_size236 do
          local _elem240 = SnsFriend:new{}
          _elem240:read(iprot)
          table.insert(self.snsFriends, _elem240)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.hasMore = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SnsFriends:write(oprot)
  oprot:writeStructBegin('SnsFriends')
  if self.snsFriends ~= nil then
    oprot:writeFieldBegin('snsFriends', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.snsFriends)
    for _,iter241 in ipairs(self.snsFriends) do
      iter241:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.hasMore ~= nil then
    oprot:writeFieldBegin('hasMore', TType.BOOL, 2)
    oprot:writeBool(self.hasMore)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SnsIdUserStatus = __TObject:new{
  userExisting,
  phoneNumberRegistered,
  sameDevice
}

function SnsIdUserStatus:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.userExisting = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.BOOL then
        self.phoneNumberRegistered = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.sameDevice = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SnsIdUserStatus:write(oprot)
  oprot:writeStructBegin('SnsIdUserStatus')
  if self.userExisting ~= nil then
    oprot:writeFieldBegin('userExisting', TType.BOOL, 1)
    oprot:writeBool(self.userExisting)
    oprot:writeFieldEnd()
  end
  if self.phoneNumberRegistered ~= nil then
    oprot:writeFieldBegin('phoneNumberRegistered', TType.BOOL, 2)
    oprot:writeBool(self.phoneNumberRegistered)
    oprot:writeFieldEnd()
  end
  if self.sameDevice ~= nil then
    oprot:writeFieldBegin('sameDevice', TType.BOOL, 3)
    oprot:writeBool(self.sameDevice)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SnsProfile = __TObject:new{
  snsUserId,
  snsUserName,
  email,
  thumbnailUrl
}

function SnsProfile:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.snsUserId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.snsUserName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.email = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.thumbnailUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SnsProfile:write(oprot)
  oprot:writeStructBegin('SnsProfile')
  if self.snsUserId ~= nil then
    oprot:writeFieldBegin('snsUserId', TType.STRING, 1)
    oprot:writeString(self.snsUserId)
    oprot:writeFieldEnd()
  end
  if self.snsUserName ~= nil then
    oprot:writeFieldBegin('snsUserName', TType.STRING, 2)
    oprot:writeString(self.snsUserName)
    oprot:writeFieldEnd()
  end
  if self.email ~= nil then
    oprot:writeFieldBegin('email', TType.STRING, 3)
    oprot:writeString(self.email)
    oprot:writeFieldEnd()
  end
  if self.thumbnailUrl ~= nil then
    oprot:writeFieldBegin('thumbnailUrl', TType.STRING, 4)
    oprot:writeString(self.thumbnailUrl)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

SystemConfiguration = __TObject:new{
  endpoint,
  endpointSsl,
  updateUrl,
  c2dmAccount,
  nniServer
}

function SystemConfiguration:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.endpoint = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.endpointSsl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.updateUrl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.c2dmAccount = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.nniServer = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function SystemConfiguration:write(oprot)
  oprot:writeStructBegin('SystemConfiguration')
  if self.endpoint ~= nil then
    oprot:writeFieldBegin('endpoint', TType.STRING, 1)
    oprot:writeString(self.endpoint)
    oprot:writeFieldEnd()
  end
  if self.endpointSsl ~= nil then
    oprot:writeFieldBegin('endpointSsl', TType.STRING, 2)
    oprot:writeString(self.endpointSsl)
    oprot:writeFieldEnd()
  end
  if self.updateUrl ~= nil then
    oprot:writeFieldBegin('updateUrl', TType.STRING, 3)
    oprot:writeString(self.updateUrl)
    oprot:writeFieldEnd()
  end
  if self.c2dmAccount ~= nil then
    oprot:writeFieldBegin('c2dmAccount', TType.STRING, 11)
    oprot:writeString(self.c2dmAccount)
    oprot:writeFieldEnd()
  end
  if self.nniServer ~= nil then
    oprot:writeFieldBegin('nniServer', TType.STRING, 12)
    oprot:writeString(self.nniServer)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TalkException = TException:new{
  __type = 'TalkException',
  code,
  reason,
  parameterMap
}

function TalkException:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.code = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.reason = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.parameterMap = {}
        local _ktype243, _vtype244, _size242 = iprot:readMapBegin() 
        for _i=1,_size242 do
          local _key246 = iprot:readString()
          local _val247 = iprot:readString()
          self.parameterMap[_key246] = _val247
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TalkException:write(oprot)
  oprot:writeStructBegin('TalkException')
  if self.code ~= nil then
    oprot:writeFieldBegin('code', TType.I32, 1)
    oprot:writeI32(self.code)
    oprot:writeFieldEnd()
  end
  if self.reason ~= nil then
    oprot:writeFieldBegin('reason', TType.STRING, 2)
    oprot:writeString(self.reason)
    oprot:writeFieldEnd()
  end
  if self.parameterMap ~= nil then
    oprot:writeFieldBegin('parameterMap', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.parameterMap))
    for kiter248,viter249 in pairs(self.parameterMap) do
      oprot:writeString(kiter248)
      oprot:writeString(viter249)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Ticket = __TObject:new{
  id,
  expirationTime,
  maxUseCount
}

function Ticket:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.I64 then
        self.expirationTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I32 then
        self.maxUseCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Ticket:write(oprot)
  oprot:writeStructBegin('Ticket')
  if self.id ~= nil then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.expirationTime ~= nil then
    oprot:writeFieldBegin('expirationTime', TType.I64, 10)
    oprot:writeI64(self.expirationTime)
    oprot:writeFieldEnd()
  end
  if self.maxUseCount ~= nil then
    oprot:writeFieldBegin('maxUseCount', TType.I32, 21)
    oprot:writeI32(self.maxUseCount)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TMessageBox = __TObject:new{
  id,
  channelId,
  lastSeq,
  unreadCount,
  lastModifiedTime,
  status,
  midType,
  lastMessages
}

function TMessageBox:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.channelId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I64 then
        self.lastSeq = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I64 then
        self.unreadCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I64 then
        self.lastModifiedTime = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.I32 then
        self.status = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.I32 then
        self.midType = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.lastMessages = {}
        local _etype253, _size250 = iprot:readListBegin()
        for _i=1,_size250 do
          local _elem254 = Message:new{}
          _elem254:read(iprot)
          table.insert(self.lastMessages, _elem254)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TMessageBox:write(oprot)
  oprot:writeStructBegin('TMessageBox')
  if self.id ~= nil then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.channelId ~= nil then
    oprot:writeFieldBegin('channelId', TType.STRING, 2)
    oprot:writeString(self.channelId)
    oprot:writeFieldEnd()
  end
  if self.lastSeq ~= nil then
    oprot:writeFieldBegin('lastSeq', TType.I64, 5)
    oprot:writeI64(self.lastSeq)
    oprot:writeFieldEnd()
  end
  if self.unreadCount ~= nil then
    oprot:writeFieldBegin('unreadCount', TType.I64, 6)
    oprot:writeI64(self.unreadCount)
    oprot:writeFieldEnd()
  end
  if self.lastModifiedTime ~= nil then
    oprot:writeFieldBegin('lastModifiedTime', TType.I64, 7)
    oprot:writeI64(self.lastModifiedTime)
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.I32, 8)
    oprot:writeI32(self.status)
    oprot:writeFieldEnd()
  end
  if self.midType ~= nil then
    oprot:writeFieldBegin('midType', TType.I32, 9)
    oprot:writeI32(self.midType)
    oprot:writeFieldEnd()
  end
  if self.lastMessages ~= nil then
    oprot:writeFieldBegin('lastMessages', TType.LIST, 10)
    oprot:writeListBegin(TType.STRUCT, #self.lastMessages)
    for _,iter255 in ipairs(self.lastMessages) do
      iter255:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TMessageBoxWrapUp = __TObject:new{
  messageBox,
  name,
  contacts,
  pictureRevision
}

function TMessageBoxWrapUp:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.messageBox = TMessageBox:new{}
        self.messageBox:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.contacts = {}
        local _etype259, _size256 = iprot:readListBegin()
        for _i=1,_size256 do
          local _elem260 = Contact:new{}
          _elem260:read(iprot)
          table.insert(self.contacts, _elem260)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.pictureRevision = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TMessageBoxWrapUp:write(oprot)
  oprot:writeStructBegin('TMessageBoxWrapUp')
  if self.messageBox ~= nil then
    oprot:writeFieldBegin('messageBox', TType.STRUCT, 1)
    self.messageBox:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 2)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.contacts ~= nil then
    oprot:writeFieldBegin('contacts', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.contacts)
    for _,iter261 in ipairs(self.contacts) do
      iter261:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.pictureRevision ~= nil then
    oprot:writeFieldBegin('pictureRevision', TType.STRING, 4)
    oprot:writeString(self.pictureRevision)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TMessageBoxWrapUpResponse = __TObject:new{
  messageBoxWrapUpList,
  totalSize
}

function TMessageBoxWrapUpResponse:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.messageBoxWrapUpList = {}
        local _etype265, _size262 = iprot:readListBegin()
        for _i=1,_size262 do
          local _elem266 = TMessageBoxWrapUp:new{}
          _elem266:read(iprot)
          table.insert(self.messageBoxWrapUpList, _elem266)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.totalSize = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TMessageBoxWrapUpResponse:write(oprot)
  oprot:writeStructBegin('TMessageBoxWrapUpResponse')
  if self.messageBoxWrapUpList ~= nil then
    oprot:writeFieldBegin('messageBoxWrapUpList', TType.LIST, 1)
    oprot:writeListBegin(TType.STRUCT, #self.messageBoxWrapUpList)
    for _,iter267 in ipairs(self.messageBoxWrapUpList) do
      iter267:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.totalSize ~= nil then
    oprot:writeFieldBegin('totalSize', TType.I32, 2)
    oprot:writeI32(self.totalSize)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UniversalNotificationServiceException = TException:new{
  __type = 'UniversalNotificationServiceException',
  code,
  reason,
  parameterMap
}

function UniversalNotificationServiceException:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.code = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.reason = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.parameterMap = {}
        local _ktype269, _vtype270, _size268 = iprot:readMapBegin() 
        for _i=1,_size268 do
          local _key272 = iprot:readString()
          local _val273 = iprot:readString()
          self.parameterMap[_key272] = _val273
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UniversalNotificationServiceException:write(oprot)
  oprot:writeStructBegin('UniversalNotificationServiceException')
  if self.code ~= nil then
    oprot:writeFieldBegin('code', TType.I32, 1)
    oprot:writeI32(self.code)
    oprot:writeFieldEnd()
  end
  if self.reason ~= nil then
    oprot:writeFieldBegin('reason', TType.STRING, 2)
    oprot:writeString(self.reason)
    oprot:writeFieldEnd()
  end
  if self.parameterMap ~= nil then
    oprot:writeFieldBegin('parameterMap', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.parameterMap))
    for kiter274,viter275 in pairs(self.parameterMap) do
      oprot:writeString(kiter274)
      oprot:writeString(viter275)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UpdateBuddyProfileResult = __TObject:new{
  requestId,
  state,
  eventNo,
  receiverCount,
  successCount,
  failCount,
  cancelCount,
  unregisterCount,
  timestamp,
  message
}

function UpdateBuddyProfileResult:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.requestId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.state = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.eventNo = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.I64 then
        self.receiverCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.I64 then
        self.successCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.I64 then
        self.failCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I64 then
        self.cancelCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 15 then
      if ftype == TType.I64 then
        self.unregisterCount = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 21 then
      if ftype == TType.I64 then
        self.timestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 22 then
      if ftype == TType.STRING then
        self.message = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UpdateBuddyProfileResult:write(oprot)
  oprot:writeStructBegin('UpdateBuddyProfileResult')
  if self.requestId ~= nil then
    oprot:writeFieldBegin('requestId', TType.STRING, 1)
    oprot:writeString(self.requestId)
    oprot:writeFieldEnd()
  end
  if self.state ~= nil then
    oprot:writeFieldBegin('state', TType.I32, 2)
    oprot:writeI32(self.state)
    oprot:writeFieldEnd()
  end
  if self.eventNo ~= nil then
    oprot:writeFieldBegin('eventNo', TType.I32, 3)
    oprot:writeI32(self.eventNo)
    oprot:writeFieldEnd()
  end
  if self.receiverCount ~= nil then
    oprot:writeFieldBegin('receiverCount', TType.I64, 11)
    oprot:writeI64(self.receiverCount)
    oprot:writeFieldEnd()
  end
  if self.successCount ~= nil then
    oprot:writeFieldBegin('successCount', TType.I64, 12)
    oprot:writeI64(self.successCount)
    oprot:writeFieldEnd()
  end
  if self.failCount ~= nil then
    oprot:writeFieldBegin('failCount', TType.I64, 13)
    oprot:writeI64(self.failCount)
    oprot:writeFieldEnd()
  end
  if self.cancelCount ~= nil then
    oprot:writeFieldBegin('cancelCount', TType.I64, 14)
    oprot:writeI64(self.cancelCount)
    oprot:writeFieldEnd()
  end
  if self.unregisterCount ~= nil then
    oprot:writeFieldBegin('unregisterCount', TType.I64, 15)
    oprot:writeI64(self.unregisterCount)
    oprot:writeFieldEnd()
  end
  if self.timestamp ~= nil then
    oprot:writeFieldBegin('timestamp', TType.I64, 21)
    oprot:writeI64(self.timestamp)
    oprot:writeFieldEnd()
  end
  if self.message ~= nil then
    oprot:writeFieldBegin('message', TType.STRING, 22)
    oprot:writeString(self.message)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UserAuthStatus = __TObject:new{
  phoneNumberRegistered,
  registeredSnsIdTypes
}

function UserAuthStatus:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BOOL then
        self.phoneNumberRegistered = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.registeredSnsIdTypes = {}
        local _etype279, _size276 = iprot:readListBegin()
        for _i=1,_size276 do
          local _elem280 = iprot:readI32()
          table.insert(self.registeredSnsIdTypes, _elem280)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UserAuthStatus:write(oprot)
  oprot:writeStructBegin('UserAuthStatus')
  if self.phoneNumberRegistered ~= nil then
    oprot:writeFieldBegin('phoneNumberRegistered', TType.BOOL, 1)
    oprot:writeBool(self.phoneNumberRegistered)
    oprot:writeFieldEnd()
  end
  if self.registeredSnsIdTypes ~= nil then
    oprot:writeFieldBegin('registeredSnsIdTypes', TType.LIST, 2)
    oprot:writeListBegin(TType.I32, #self.registeredSnsIdTypes)
    for _,iter281 in ipairs(self.registeredSnsIdTypes) do
      oprot:writeI32(iter281)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

VerificationSessionData = __TObject:new{
  sessionId,
  method,
  callback,
  normalizedPhone,
  countryCode,
  nationalSignificantNumber,
  availableVerificationMethods
}

function VerificationSessionData:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.sessionId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.method = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.callback = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.normalizedPhone = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.countryCode = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.nationalSignificantNumber = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.LIST then
        self.availableVerificationMethods = {}
        local _etype285, _size282 = iprot:readListBegin()
        for _i=1,_size282 do
          local _elem286 = iprot:readI32()
          table.insert(self.availableVerificationMethods, _elem286)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function VerificationSessionData:write(oprot)
  oprot:writeStructBegin('VerificationSessionData')
  if self.sessionId ~= nil then
    oprot:writeFieldBegin('sessionId', TType.STRING, 1)
    oprot:writeString(self.sessionId)
    oprot:writeFieldEnd()
  end
  if self.method ~= nil then
    oprot:writeFieldBegin('method', TType.I32, 2)
    oprot:writeI32(self.method)
    oprot:writeFieldEnd()
  end
  if self.callback ~= nil then
    oprot:writeFieldBegin('callback', TType.STRING, 3)
    oprot:writeString(self.callback)
    oprot:writeFieldEnd()
  end
  if self.normalizedPhone ~= nil then
    oprot:writeFieldBegin('normalizedPhone', TType.STRING, 4)
    oprot:writeString(self.normalizedPhone)
    oprot:writeFieldEnd()
  end
  if self.countryCode ~= nil then
    oprot:writeFieldBegin('countryCode', TType.STRING, 5)
    oprot:writeString(self.countryCode)
    oprot:writeFieldEnd()
  end
  if self.nationalSignificantNumber ~= nil then
    oprot:writeFieldBegin('nationalSignificantNumber', TType.STRING, 6)
    oprot:writeString(self.nationalSignificantNumber)
    oprot:writeFieldEnd()
  end
  if self.availableVerificationMethods ~= nil then
    oprot:writeFieldBegin('availableVerificationMethods', TType.LIST, 7)
    oprot:writeListBegin(TType.I32, #self.availableVerificationMethods)
    for _,iter287 in ipairs(self.availableVerificationMethods) do
      oprot:writeI32(iter287)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

WapInvitation = __TObject:new{
  type,
  inviteeEmail,
  inviterMid,
  roomMid
}

function WapInvitation:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRING then
        self.inviteeEmail = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.inviterMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRING then
        self.roomMid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function WapInvitation:write(oprot)
  oprot:writeStructBegin('WapInvitation')
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.I32, 1)
    oprot:writeI32(self.type)
    oprot:writeFieldEnd()
  end
  if self.inviteeEmail ~= nil then
    oprot:writeFieldBegin('inviteeEmail', TType.STRING, 10)
    oprot:writeString(self.inviteeEmail)
    oprot:writeFieldEnd()
  end
  if self.inviterMid ~= nil then
    oprot:writeFieldBegin('inviterMid', TType.STRING, 11)
    oprot:writeString(self.inviterMid)
    oprot:writeFieldEnd()
  end
  if self.roomMid ~= nil then
    oprot:writeFieldBegin('roomMid', TType.STRING, 12)
    oprot:writeString(self.roomMid)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end