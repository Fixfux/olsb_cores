// Autogenerated by Thrift Compiler (0.14.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/star-inc/thrift_go/thrift"
	"line"
)

var _ = line.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void addBuddyMember(string requestId, string userMid)")
  fmt.Fprintln(os.Stderr, "  void addBuddyMembers(string requestId,  userMids)")
  fmt.Fprintln(os.Stderr, "  void blockBuddyMember(string requestId, string mid)")
  fmt.Fprintln(os.Stderr, "   commitSendMessagesToAll( requestIdList)")
  fmt.Fprintln(os.Stderr, "   commitSendMessagesToMids( requestIdList,  mids)")
  fmt.Fprintln(os.Stderr, "  bool containsBuddyMember(string requestId, string userMid)")
  fmt.Fprintln(os.Stderr, "  string downloadMessageContent(string requestId, string messageId)")
  fmt.Fprintln(os.Stderr, "  string downloadMessageContentPreview(string requestId, string messageId)")
  fmt.Fprintln(os.Stderr, "  string downloadProfileImage(string requestId)")
  fmt.Fprintln(os.Stderr, "  string downloadProfileImagePreview(string requestId)")
  fmt.Fprintln(os.Stderr, "  i64 getActiveMemberCountByBuddyMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "   getActiveMemberMidsByBuddyMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "   getAllBuddyMembers()")
  fmt.Fprintln(os.Stderr, "   getBlockedBuddyMembers()")
  fmt.Fprintln(os.Stderr, "  i64 getBlockerCountByBuddyMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "  BuddyDetail getBuddyDetailByMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "  BuddyProfile getBuddyProfile()")
  fmt.Fprintln(os.Stderr, "  Ticket getContactTicket()")
  fmt.Fprintln(os.Stderr, "  i64 getMemberCountByBuddyMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult getSendBuddyMessageResult(string sendBuddyMessageRequestId)")
  fmt.Fprintln(os.Stderr, "  SetBuddyOnAirResult getSetBuddyOnAirResult(string setBuddyOnAirRequestId)")
  fmt.Fprintln(os.Stderr, "  UpdateBuddyProfileResult getUpdateBuddyProfileResult(string updateBuddyProfileRequestId)")
  fmt.Fprintln(os.Stderr, "  bool isBuddyOnAirByMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "  string linkAndSendBuddyContentMessageToAllAsync(string requestId, Message msg, string sourceContentId)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult linkAndSendBuddyContentMessageToMids(string requestId, Message msg, string sourceContentId,  mids)")
  fmt.Fprintln(os.Stderr, "  void notifyBuddyBlocked(string buddyMid, string blockerMid)")
  fmt.Fprintln(os.Stderr, "  void notifyBuddyUnblocked(string buddyMid, string blockerMid)")
  fmt.Fprintln(os.Stderr, "  string registerBuddy(string buddyId, string searchId, string displayName, string statusMeessage, string picture,  settings)")
  fmt.Fprintln(os.Stderr, "  string registerBuddyAdmin(string buddyId, string searchId, string displayName, string statusMessage, string picture)")
  fmt.Fprintln(os.Stderr, "  string reissueContactTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "  void removeBuddyMember(string requestId, string userMid)")
  fmt.Fprintln(os.Stderr, "  void removeBuddyMembers(string requestId,  userMids)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult sendBuddyContentMessageToAll(string requestId, Message msg, string content)")
  fmt.Fprintln(os.Stderr, "  string sendBuddyContentMessageToAllAsync(string requestId, Message msg, string content)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult sendBuddyContentMessageToMids(string requestId, Message msg, string content,  mids)")
  fmt.Fprintln(os.Stderr, "  string sendBuddyContentMessageToMidsAsync(string requestId, Message msg, string content,  mids)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult sendBuddyMessageToAll(string requestId, Message msg)")
  fmt.Fprintln(os.Stderr, "  string sendBuddyMessageToAllAsync(string requestId, Message msg)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult sendBuddyMessageToMids(string requestId, Message msg,  mids)")
  fmt.Fprintln(os.Stderr, "  string sendBuddyMessageToMidsAsync(string requestId, Message msg,  mids)")
  fmt.Fprintln(os.Stderr, "  void sendIndividualEventToAllAsync(string requestId, string buddyMid, NotificationStatus notificationStatus)")
  fmt.Fprintln(os.Stderr, "  SetBuddyOnAirResult setBuddyOnAir(string requestId, bool onAir)")
  fmt.Fprintln(os.Stderr, "  string setBuddyOnAirAsync(string requestId, bool onAir)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult storeMessage(string requestId, BuddyMessageRequest messageRequest)")
  fmt.Fprintln(os.Stderr, "  void unblockBuddyMember(string requestId, string mid)")
  fmt.Fprintln(os.Stderr, "  void unregisterBuddy(string requestId)")
  fmt.Fprintln(os.Stderr, "  void unregisterBuddyAdmin(string requestId)")
  fmt.Fprintln(os.Stderr, "  void updateBuddyAdminProfileAttribute(string requestId,  attributes)")
  fmt.Fprintln(os.Stderr, "  void updateBuddyAdminProfileImage(string requestId, string picture)")
  fmt.Fprintln(os.Stderr, "  UpdateBuddyProfileResult updateBuddyProfileAttributes(string requestId,  attributes)")
  fmt.Fprintln(os.Stderr, "  string updateBuddyProfileAttributesAsync(string requestId,  attributes)")
  fmt.Fprintln(os.Stderr, "  UpdateBuddyProfileResult updateBuddyProfileImage(string requestId, string image)")
  fmt.Fprintln(os.Stderr, "  string updateBuddyProfileImageAsync(string requestId, string image)")
  fmt.Fprintln(os.Stderr, "  void updateBuddySearchId(string requestId, string searchId)")
  fmt.Fprintln(os.Stderr, "  void updateBuddySettings( settings)")
  fmt.Fprintln(os.Stderr, "  string uploadBuddyContent(ContentType contentType, string content)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := line.NewBuddyManagementServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "addBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AddBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "addBuddyMembers":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddBuddyMembers requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg247 := flag.Arg(2)
    mbTrans248 := thrift.NewTMemoryBufferLen(len(arg247))
    defer mbTrans248.Close()
    _, err249 := mbTrans248.WriteString(arg247)
    if err249 != nil { 
      Usage()
      return
    }
    factory250 := thrift.NewTJSONProtocolFactory()
    jsProt251 := factory250.GetProtocol(mbTrans248)
    containerStruct1 := line.NewBuddyManagementServiceAddBuddyMembersArgs()
    err252 := containerStruct1.ReadField2(jsProt251)
    if err252 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.UserMids
    value1 := argvalue1
    fmt.Print(client.AddBuddyMembers(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blockBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "commitSendMessagesToAll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CommitSendMessagesToAll requires 1 args")
      flag.Usage()
    }
    arg255 := flag.Arg(1)
    mbTrans256 := thrift.NewTMemoryBufferLen(len(arg255))
    defer mbTrans256.Close()
    _, err257 := mbTrans256.WriteString(arg255)
    if err257 != nil { 
      Usage()
      return
    }
    factory258 := thrift.NewTJSONProtocolFactory()
    jsProt259 := factory258.GetProtocol(mbTrans256)
    containerStruct0 := line.NewBuddyManagementServiceCommitSendMessagesToAllArgs()
    err260 := containerStruct0.ReadField1(jsProt259)
    if err260 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.RequestIdList
    value0 := argvalue0
    fmt.Print(client.CommitSendMessagesToAll(context.Background(), value0))
    fmt.Print("\n")
    break
  case "commitSendMessagesToMids":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CommitSendMessagesToMids requires 2 args")
      flag.Usage()
    }
    arg261 := flag.Arg(1)
    mbTrans262 := thrift.NewTMemoryBufferLen(len(arg261))
    defer mbTrans262.Close()
    _, err263 := mbTrans262.WriteString(arg261)
    if err263 != nil { 
      Usage()
      return
    }
    factory264 := thrift.NewTJSONProtocolFactory()
    jsProt265 := factory264.GetProtocol(mbTrans262)
    containerStruct0 := line.NewBuddyManagementServiceCommitSendMessagesToMidsArgs()
    err266 := containerStruct0.ReadField1(jsProt265)
    if err266 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.RequestIdList
    value0 := argvalue0
    arg267 := flag.Arg(2)
    mbTrans268 := thrift.NewTMemoryBufferLen(len(arg267))
    defer mbTrans268.Close()
    _, err269 := mbTrans268.WriteString(arg267)
    if err269 != nil { 
      Usage()
      return
    }
    factory270 := thrift.NewTJSONProtocolFactory()
    jsProt271 := factory270.GetProtocol(mbTrans268)
    containerStruct1 := line.NewBuddyManagementServiceCommitSendMessagesToMidsArgs()
    err272 := containerStruct1.ReadField2(jsProt271)
    if err272 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Mids
    value1 := argvalue1
    fmt.Print(client.CommitSendMessagesToMids(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "containsBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ContainsBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ContainsBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "downloadMessageContent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DownloadMessageContent requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DownloadMessageContent(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "downloadMessageContentPreview":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DownloadMessageContentPreview requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DownloadMessageContentPreview(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "downloadProfileImage":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DownloadProfileImage requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DownloadProfileImage(context.Background(), value0))
    fmt.Print("\n")
    break
  case "downloadProfileImagePreview":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DownloadProfileImagePreview requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DownloadProfileImagePreview(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getActiveMemberCountByBuddyMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetActiveMemberCountByBuddyMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetActiveMemberCountByBuddyMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getActiveMemberMidsByBuddyMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetActiveMemberMidsByBuddyMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetActiveMemberMidsByBuddyMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllBuddyMembers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllBuddyMembers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllBuddyMembers(context.Background()))
    fmt.Print("\n")
    break
  case "getBlockedBuddyMembers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockedBuddyMembers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockedBuddyMembers(context.Background()))
    fmt.Print("\n")
    break
  case "getBlockerCountByBuddyMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBlockerCountByBuddyMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetBlockerCountByBuddyMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBuddyDetailByMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBuddyDetailByMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetBuddyDetailByMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBuddyProfile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBuddyProfile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBuddyProfile(context.Background()))
    fmt.Print("\n")
    break
  case "getContactTicket":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetContactTicket requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetContactTicket(context.Background()))
    fmt.Print("\n")
    break
  case "getMemberCountByBuddyMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMemberCountByBuddyMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMemberCountByBuddyMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSendBuddyMessageResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSendBuddyMessageResult_ requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetSendBuddyMessageResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSetBuddyOnAirResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSetBuddyOnAirResult_ requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetSetBuddyOnAirResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUpdateBuddyProfileResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUpdateBuddyProfileResult_ requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetUpdateBuddyProfileResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isBuddyOnAirByMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsBuddyOnAirByMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsBuddyOnAirByMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "linkAndSendBuddyContentMessageToAllAsync":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "LinkAndSendBuddyContentMessageToAllAsync requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg291 := flag.Arg(2)
    mbTrans292 := thrift.NewTMemoryBufferLen(len(arg291))
    defer mbTrans292.Close()
    _, err293 := mbTrans292.WriteString(arg291)
    if err293 != nil {
      Usage()
      return
    }
    factory294 := thrift.NewTJSONProtocolFactory()
    jsProt295 := factory294.GetProtocol(mbTrans292)
    argvalue1 := line.NewMessage()
    err296 := argvalue1.Read(jsProt295)
    if err296 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.LinkAndSendBuddyContentMessageToAllAsync(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "linkAndSendBuddyContentMessageToMids":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "LinkAndSendBuddyContentMessageToMids requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg299 := flag.Arg(2)
    mbTrans300 := thrift.NewTMemoryBufferLen(len(arg299))
    defer mbTrans300.Close()
    _, err301 := mbTrans300.WriteString(arg299)
    if err301 != nil {
      Usage()
      return
    }
    factory302 := thrift.NewTJSONProtocolFactory()
    jsProt303 := factory302.GetProtocol(mbTrans300)
    argvalue1 := line.NewMessage()
    err304 := argvalue1.Read(jsProt303)
    if err304 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg306 := flag.Arg(4)
    mbTrans307 := thrift.NewTMemoryBufferLen(len(arg306))
    defer mbTrans307.Close()
    _, err308 := mbTrans307.WriteString(arg306)
    if err308 != nil { 
      Usage()
      return
    }
    factory309 := thrift.NewTJSONProtocolFactory()
    jsProt310 := factory309.GetProtocol(mbTrans307)
    containerStruct3 := line.NewBuddyManagementServiceLinkAndSendBuddyContentMessageToMidsArgs()
    err311 := containerStruct3.ReadField4(jsProt310)
    if err311 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Mids
    value3 := argvalue3
    fmt.Print(client.LinkAndSendBuddyContentMessageToMids(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "notifyBuddyBlocked":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyBuddyBlocked requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyBuddyBlocked(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyBuddyUnblocked":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyBuddyUnblocked requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyBuddyUnblocked(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerBuddy":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "RegisterBuddy requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    arg321 := flag.Arg(6)
    mbTrans322 := thrift.NewTMemoryBufferLen(len(arg321))
    defer mbTrans322.Close()
    _, err323 := mbTrans322.WriteString(arg321)
    if err323 != nil { 
      Usage()
      return
    }
    factory324 := thrift.NewTJSONProtocolFactory()
    jsProt325 := factory324.GetProtocol(mbTrans322)
    containerStruct5 := line.NewBuddyManagementServiceRegisterBuddyArgs()
    err326 := containerStruct5.ReadField6(jsProt325)
    if err326 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.Settings
    value5 := argvalue5
    fmt.Print(client.RegisterBuddy(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "registerBuddyAdmin":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RegisterBuddyAdmin requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.RegisterBuddyAdmin(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "reissueContactTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReissueContactTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err332 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err332 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err333 := (strconv.Atoi(flag.Arg(2)))
    if err333 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.ReissueContactTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeBuddyMembers":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveBuddyMembers requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg337 := flag.Arg(2)
    mbTrans338 := thrift.NewTMemoryBufferLen(len(arg337))
    defer mbTrans338.Close()
    _, err339 := mbTrans338.WriteString(arg337)
    if err339 != nil { 
      Usage()
      return
    }
    factory340 := thrift.NewTJSONProtocolFactory()
    jsProt341 := factory340.GetProtocol(mbTrans338)
    containerStruct1 := line.NewBuddyManagementServiceRemoveBuddyMembersArgs()
    err342 := containerStruct1.ReadField2(jsProt341)
    if err342 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.UserMids
    value1 := argvalue1
    fmt.Print(client.RemoveBuddyMembers(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendBuddyContentMessageToAll":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendBuddyContentMessageToAll requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg344 := flag.Arg(2)
    mbTrans345 := thrift.NewTMemoryBufferLen(len(arg344))
    defer mbTrans345.Close()
    _, err346 := mbTrans345.WriteString(arg344)
    if err346 != nil {
      Usage()
      return
    }
    factory347 := thrift.NewTJSONProtocolFactory()
    jsProt348 := factory347.GetProtocol(mbTrans345)
    argvalue1 := line.NewMessage()
    err349 := argvalue1.Read(jsProt348)
    if err349 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.SendBuddyContentMessageToAll(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendBuddyContentMessageToAllAsync":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendBuddyContentMessageToAllAsync requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg352 := flag.Arg(2)
    mbTrans353 := thrift.NewTMemoryBufferLen(len(arg352))
    defer mbTrans353.Close()
    _, err354 := mbTrans353.WriteString(arg352)
    if err354 != nil {
      Usage()
      return
    }
    factory355 := thrift.NewTJSONProtocolFactory()
    jsProt356 := factory355.GetProtocol(mbTrans353)
    argvalue1 := line.NewMessage()
    err357 := argvalue1.Read(jsProt356)
    if err357 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.SendBuddyContentMessageToAllAsync(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendBuddyContentMessageToMids":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendBuddyContentMessageToMids requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg360 := flag.Arg(2)
    mbTrans361 := thrift.NewTMemoryBufferLen(len(arg360))
    defer mbTrans361.Close()
    _, err362 := mbTrans361.WriteString(arg360)
    if err362 != nil {
      Usage()
      return
    }
    factory363 := thrift.NewTJSONProtocolFactory()
    jsProt364 := factory363.GetProtocol(mbTrans361)
    argvalue1 := line.NewMessage()
    err365 := argvalue1.Read(jsProt364)
    if err365 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    arg367 := flag.Arg(4)
    mbTrans368 := thrift.NewTMemoryBufferLen(len(arg367))
    defer mbTrans368.Close()
    _, err369 := mbTrans368.WriteString(arg367)
    if err369 != nil { 
      Usage()
      return
    }
    factory370 := thrift.NewTJSONProtocolFactory()
    jsProt371 := factory370.GetProtocol(mbTrans368)
    containerStruct3 := line.NewBuddyManagementServiceSendBuddyContentMessageToMidsArgs()
    err372 := containerStruct3.ReadField4(jsProt371)
    if err372 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Mids
    value3 := argvalue3
    fmt.Print(client.SendBuddyContentMessageToMids(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sendBuddyContentMessageToMidsAsync":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendBuddyContentMessageToMidsAsync requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg374 := flag.Arg(2)
    mbTrans375 := thrift.NewTMemoryBufferLen(len(arg374))
    defer mbTrans375.Close()
    _, err376 := mbTrans375.WriteString(arg374)
    if err376 != nil {
      Usage()
      return
    }
    factory377 := thrift.NewTJSONProtocolFactory()
    jsProt378 := factory377.GetProtocol(mbTrans375)
    argvalue1 := line.NewMessage()
    err379 := argvalue1.Read(jsProt378)
    if err379 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    arg381 := flag.Arg(4)
    mbTrans382 := thrift.NewTMemoryBufferLen(len(arg381))
    defer mbTrans382.Close()
    _, err383 := mbTrans382.WriteString(arg381)
    if err383 != nil { 
      Usage()
      return
    }
    factory384 := thrift.NewTJSONProtocolFactory()
    jsProt385 := factory384.GetProtocol(mbTrans382)
    containerStruct3 := line.NewBuddyManagementServiceSendBuddyContentMessageToMidsAsyncArgs()
    err386 := containerStruct3.ReadField4(jsProt385)
    if err386 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Mids
    value3 := argvalue3
    fmt.Print(client.SendBuddyContentMessageToMidsAsync(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sendBuddyMessageToAll":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendBuddyMessageToAll requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg388 := flag.Arg(2)
    mbTrans389 := thrift.NewTMemoryBufferLen(len(arg388))
    defer mbTrans389.Close()
    _, err390 := mbTrans389.WriteString(arg388)
    if err390 != nil {
      Usage()
      return
    }
    factory391 := thrift.NewTJSONProtocolFactory()
    jsProt392 := factory391.GetProtocol(mbTrans389)
    argvalue1 := line.NewMessage()
    err393 := argvalue1.Read(jsProt392)
    if err393 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendBuddyMessageToAll(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendBuddyMessageToAllAsync":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendBuddyMessageToAllAsync requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg395 := flag.Arg(2)
    mbTrans396 := thrift.NewTMemoryBufferLen(len(arg395))
    defer mbTrans396.Close()
    _, err397 := mbTrans396.WriteString(arg395)
    if err397 != nil {
      Usage()
      return
    }
    factory398 := thrift.NewTJSONProtocolFactory()
    jsProt399 := factory398.GetProtocol(mbTrans396)
    argvalue1 := line.NewMessage()
    err400 := argvalue1.Read(jsProt399)
    if err400 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendBuddyMessageToAllAsync(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendBuddyMessageToMids":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendBuddyMessageToMids requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg402 := flag.Arg(2)
    mbTrans403 := thrift.NewTMemoryBufferLen(len(arg402))
    defer mbTrans403.Close()
    _, err404 := mbTrans403.WriteString(arg402)
    if err404 != nil {
      Usage()
      return
    }
    factory405 := thrift.NewTJSONProtocolFactory()
    jsProt406 := factory405.GetProtocol(mbTrans403)
    argvalue1 := line.NewMessage()
    err407 := argvalue1.Read(jsProt406)
    if err407 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg408 := flag.Arg(3)
    mbTrans409 := thrift.NewTMemoryBufferLen(len(arg408))
    defer mbTrans409.Close()
    _, err410 := mbTrans409.WriteString(arg408)
    if err410 != nil { 
      Usage()
      return
    }
    factory411 := thrift.NewTJSONProtocolFactory()
    jsProt412 := factory411.GetProtocol(mbTrans409)
    containerStruct2 := line.NewBuddyManagementServiceSendBuddyMessageToMidsArgs()
    err413 := containerStruct2.ReadField3(jsProt412)
    if err413 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Mids
    value2 := argvalue2
    fmt.Print(client.SendBuddyMessageToMids(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendBuddyMessageToMidsAsync":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendBuddyMessageToMidsAsync requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg415 := flag.Arg(2)
    mbTrans416 := thrift.NewTMemoryBufferLen(len(arg415))
    defer mbTrans416.Close()
    _, err417 := mbTrans416.WriteString(arg415)
    if err417 != nil {
      Usage()
      return
    }
    factory418 := thrift.NewTJSONProtocolFactory()
    jsProt419 := factory418.GetProtocol(mbTrans416)
    argvalue1 := line.NewMessage()
    err420 := argvalue1.Read(jsProt419)
    if err420 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg421 := flag.Arg(3)
    mbTrans422 := thrift.NewTMemoryBufferLen(len(arg421))
    defer mbTrans422.Close()
    _, err423 := mbTrans422.WriteString(arg421)
    if err423 != nil { 
      Usage()
      return
    }
    factory424 := thrift.NewTJSONProtocolFactory()
    jsProt425 := factory424.GetProtocol(mbTrans422)
    containerStruct2 := line.NewBuddyManagementServiceSendBuddyMessageToMidsAsyncArgs()
    err426 := containerStruct2.ReadField3(jsProt425)
    if err426 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Mids
    value2 := argvalue2
    fmt.Print(client.SendBuddyMessageToMidsAsync(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendIndividualEventToAllAsync":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendIndividualEventToAllAsync requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.NotificationStatus(tmp2)
    value2 := argvalue2
    fmt.Print(client.SendIndividualEventToAllAsync(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "setBuddyOnAir":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetBuddyOnAir requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetBuddyOnAir(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "setBuddyOnAirAsync":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetBuddyOnAirAsync requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetBuddyOnAirAsync(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "storeMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "StoreMessage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg434 := flag.Arg(2)
    mbTrans435 := thrift.NewTMemoryBufferLen(len(arg434))
    defer mbTrans435.Close()
    _, err436 := mbTrans435.WriteString(arg434)
    if err436 != nil {
      Usage()
      return
    }
    factory437 := thrift.NewTJSONProtocolFactory()
    jsProt438 := factory437.GetProtocol(mbTrans435)
    argvalue1 := line.NewBuddyMessageRequest()
    err439 := argvalue1.Read(jsProt438)
    if err439 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.StoreMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unregisterBuddy":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UnregisterBuddy requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UnregisterBuddy(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unregisterBuddyAdmin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UnregisterBuddyAdmin requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UnregisterBuddyAdmin(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateBuddyAdminProfileAttribute":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyAdminProfileAttribute requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg445 := flag.Arg(2)
    mbTrans446 := thrift.NewTMemoryBufferLen(len(arg445))
    defer mbTrans446.Close()
    _, err447 := mbTrans446.WriteString(arg445)
    if err447 != nil { 
      Usage()
      return
    }
    factory448 := thrift.NewTJSONProtocolFactory()
    jsProt449 := factory448.GetProtocol(mbTrans446)
    containerStruct1 := line.NewBuddyManagementServiceUpdateBuddyAdminProfileAttributeArgs()
    err450 := containerStruct1.ReadField2(jsProt449)
    if err450 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Attributes
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyAdminProfileAttribute(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyAdminProfileImage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyAdminProfileImage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyAdminProfileImage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyProfileAttributes":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyProfileAttributes requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg454 := flag.Arg(2)
    mbTrans455 := thrift.NewTMemoryBufferLen(len(arg454))
    defer mbTrans455.Close()
    _, err456 := mbTrans455.WriteString(arg454)
    if err456 != nil { 
      Usage()
      return
    }
    factory457 := thrift.NewTJSONProtocolFactory()
    jsProt458 := factory457.GetProtocol(mbTrans455)
    containerStruct1 := line.NewBuddyManagementServiceUpdateBuddyProfileAttributesArgs()
    err459 := containerStruct1.ReadField2(jsProt458)
    if err459 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Attributes
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyProfileAttributes(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyProfileAttributesAsync":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyProfileAttributesAsync requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg461 := flag.Arg(2)
    mbTrans462 := thrift.NewTMemoryBufferLen(len(arg461))
    defer mbTrans462.Close()
    _, err463 := mbTrans462.WriteString(arg461)
    if err463 != nil { 
      Usage()
      return
    }
    factory464 := thrift.NewTJSONProtocolFactory()
    jsProt465 := factory464.GetProtocol(mbTrans462)
    containerStruct1 := line.NewBuddyManagementServiceUpdateBuddyProfileAttributesAsyncArgs()
    err466 := containerStruct1.ReadField2(jsProt465)
    if err466 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Attributes
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyProfileAttributesAsync(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyProfileImage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyProfileImage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyProfileImage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyProfileImageAsync":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyProfileImageAsync requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyProfileImageAsync(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddySearchId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddySearchId requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateBuddySearchId(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddySettings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateBuddySettings requires 1 args")
      flag.Usage()
    }
    arg473 := flag.Arg(1)
    mbTrans474 := thrift.NewTMemoryBufferLen(len(arg473))
    defer mbTrans474.Close()
    _, err475 := mbTrans474.WriteString(arg473)
    if err475 != nil { 
      Usage()
      return
    }
    factory476 := thrift.NewTJSONProtocolFactory()
    jsProt477 := factory476.GetProtocol(mbTrans474)
    containerStruct0 := line.NewBuddyManagementServiceUpdateBuddySettingsArgs()
    err478 := containerStruct0.ReadField1(jsProt477)
    if err478 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Settings
    value0 := argvalue0
    fmt.Print(client.UpdateBuddySettings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "uploadBuddyContent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UploadBuddyContent requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.ContentType(tmp0)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UploadBuddyContent(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
