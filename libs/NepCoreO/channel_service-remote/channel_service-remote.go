// Autogenerated by Thrift Compiler (0.14.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/star-inc/thrift_go/thrift"
	"line"
)

var _ = line.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  ChannelToken approveChannelAndIssueChannelToken(string channelId)")
  fmt.Fprintln(os.Stderr, "  string approveChannelAndIssueRequestToken(string channelId, string otpId)")
  fmt.Fprintln(os.Stderr, "  NotificationFetchResult fetchNotificationItems(i64 localRev)")
  fmt.Fprintln(os.Stderr, "  ApprovedChannelInfos getApprovedChannels(i64 lastSynced, string locale)")
  fmt.Fprintln(os.Stderr, "  ChannelInfo getChannelInfo(string channelId, string locale)")
  fmt.Fprintln(os.Stderr, "  ChannelNotificationSetting getChannelNotificationSetting(string channelId, string locale)")
  fmt.Fprintln(os.Stderr, "   getChannelNotificationSettings(string locale)")
  fmt.Fprintln(os.Stderr, "  ChannelInfos getChannels(i64 lastSynced, string locale)")
  fmt.Fprintln(os.Stderr, "  ChannelDomains getDomains(i64 lastSynced)")
  fmt.Fprintln(os.Stderr, "  FriendChannelMatricesResponse getFriendChannelMatrices( channelIds)")
  fmt.Fprintln(os.Stderr, "  i32 getNotificationBadgeCount(i64 localRev)")
  fmt.Fprintln(os.Stderr, "  ChannelToken issueChannelToken(string channelId)")
  fmt.Fprintln(os.Stderr, "  string issueRequestToken(string channelId, string otpId)")
  fmt.Fprintln(os.Stderr, "  RequestTokenResponse issueRequestTokenWithAuthScheme(string channelId, string otpId,  authScheme, string returnUrl)")
  fmt.Fprintln(os.Stderr, "  string reserveCoinUse(CoinUseReservation request, string locale)")
  fmt.Fprintln(os.Stderr, "  void revokeChannel(string channelId)")
  fmt.Fprintln(os.Stderr, "  ChannelSyncDatas syncChannelData(i64 lastSynced, string locale)")
  fmt.Fprintln(os.Stderr, "  void updateChannelNotificationSetting( setting)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := line.NewChannelServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "approveChannelAndIssueChannelToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ApproveChannelAndIssueChannelToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ApproveChannelAndIssueChannelToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "approveChannelAndIssueRequestToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ApproveChannelAndIssueRequestToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ApproveChannelAndIssueRequestToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "fetchNotificationItems":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FetchNotificationItems requires 1 args")
      flag.Usage()
    }
    argvalue0, err690 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err690 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FetchNotificationItems(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getApprovedChannels":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetApprovedChannels requires 2 args")
      flag.Usage()
    }
    argvalue0, err691 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err691 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetApprovedChannels(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChannelInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChannelInfo requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetChannelInfo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChannelNotificationSetting":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChannelNotificationSetting requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetChannelNotificationSetting(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChannelNotificationSettings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChannelNotificationSettings requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetChannelNotificationSettings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChannels":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChannels requires 2 args")
      flag.Usage()
    }
    argvalue0, err698 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err698 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetChannels(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getDomains":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDomains requires 1 args")
      flag.Usage()
    }
    argvalue0, err700 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err700 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetDomains(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFriendChannelMatrices":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFriendChannelMatrices requires 1 args")
      flag.Usage()
    }
    arg701 := flag.Arg(1)
    mbTrans702 := thrift.NewTMemoryBufferLen(len(arg701))
    defer mbTrans702.Close()
    _, err703 := mbTrans702.WriteString(arg701)
    if err703 != nil { 
      Usage()
      return
    }
    factory704 := thrift.NewTJSONProtocolFactory()
    jsProt705 := factory704.GetProtocol(mbTrans702)
    containerStruct0 := line.NewChannelServiceGetFriendChannelMatricesArgs()
    err706 := containerStruct0.ReadField1(jsProt705)
    if err706 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChannelIds
    value0 := argvalue0
    fmt.Print(client.GetFriendChannelMatrices(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getNotificationBadgeCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNotificationBadgeCount requires 1 args")
      flag.Usage()
    }
    argvalue0, err707 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err707 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNotificationBadgeCount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "issueChannelToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IssueChannelToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IssueChannelToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "issueRequestToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "IssueRequestToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.IssueRequestToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "issueRequestTokenWithAuthScheme":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "IssueRequestTokenWithAuthScheme requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg713 := flag.Arg(3)
    mbTrans714 := thrift.NewTMemoryBufferLen(len(arg713))
    defer mbTrans714.Close()
    _, err715 := mbTrans714.WriteString(arg713)
    if err715 != nil { 
      Usage()
      return
    }
    factory716 := thrift.NewTJSONProtocolFactory()
    jsProt717 := factory716.GetProtocol(mbTrans714)
    containerStruct2 := line.NewChannelServiceIssueRequestTokenWithAuthSchemeArgs()
    err718 := containerStruct2.ReadField3(jsProt717)
    if err718 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.AuthScheme
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.IssueRequestTokenWithAuthScheme(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "reserveCoinUse":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReserveCoinUse requires 2 args")
      flag.Usage()
    }
    arg720 := flag.Arg(1)
    mbTrans721 := thrift.NewTMemoryBufferLen(len(arg720))
    defer mbTrans721.Close()
    _, err722 := mbTrans721.WriteString(arg720)
    if err722 != nil {
      Usage()
      return
    }
    factory723 := thrift.NewTJSONProtocolFactory()
    jsProt724 := factory723.GetProtocol(mbTrans721)
    argvalue0 := line.NewCoinUseReservation()
    err725 := argvalue0.Read(jsProt724)
    if err725 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ReserveCoinUse(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "revokeChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokeChannel requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RevokeChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "syncChannelData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SyncChannelData requires 2 args")
      flag.Usage()
    }
    argvalue0, err728 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err728 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SyncChannelData(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateChannelNotificationSetting":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateChannelNotificationSetting requires 1 args")
      flag.Usage()
    }
    arg730 := flag.Arg(1)
    mbTrans731 := thrift.NewTMemoryBufferLen(len(arg730))
    defer mbTrans731.Close()
    _, err732 := mbTrans731.WriteString(arg730)
    if err732 != nil { 
      Usage()
      return
    }
    factory733 := thrift.NewTJSONProtocolFactory()
    jsProt734 := factory733.GetProtocol(mbTrans731)
    containerStruct0 := line.NewChannelServiceUpdateChannelNotificationSettingArgs()
    err735 := containerStruct0.ReadField1(jsProt734)
    if err735 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Setting
    value0 := argvalue0
    fmt.Print(client.UpdateChannelNotificationSetting(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
