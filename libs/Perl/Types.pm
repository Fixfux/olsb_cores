#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
use 5.10.0;
use strict;
use warnings;
use Thrift::Exception;
use Thrift::MessageType;
use Thrift::Type;

package ApplicationType;
use constant IOS => 16;
use constant IOS_RC => 17;
use constant IOS_BETA => 18;
use constant IOS_ALPHA => 19;
use constant ANDROID => 32;
use constant ANDROID_RC => 33;
use constant ANDROID_BETA => 34;
use constant ANDROID_ALPHA => 35;
use constant WAP => 48;
use constant WAP_RC => 49;
use constant WAP_BETA => 50;
use constant WAP_ALPHA => 51;
use constant BOT => 64;
use constant BOT_RC => 65;
use constant BOT_BETA => 66;
use constant BOT_ALPHA => 67;
use constant WEB => 80;
use constant WEB_RC => 81;
use constant WEB_BETA => 82;
use constant WEB_ALPHA => 83;
use constant DESKTOPWIN => 96;
use constant DESKTOPWIN_RC => 97;
use constant DESKTOPWIN_BETA => 98;
use constant DESKTOPWIN_ALPHA => 99;
use constant DESKTOPMAC => 112;
use constant DESKTOPMAC_RC => 113;
use constant DESKTOPMAC_BETA => 114;
use constant DESKTOPMAC_ALPHA => 115;
use constant CHANNELGW => 128;
use constant CHANNELGW_RC => 129;
use constant CHANNELGW_BETA => 130;
use constant CHANNELGW_ALPHA => 131;
use constant CHANNELCP => 144;
use constant CHANNELCP_RC => 145;
use constant CHANNELCP_BETA => 146;
use constant CHANNELCP_ALPHA => 147;
use constant WINPHONE => 160;
use constant WINPHONE_RC => 161;
use constant WINPHONE_BETA => 162;
use constant WINPHONE_ALPHA => 163;
use constant BLACKBERRY => 176;
use constant BLACKBERRY_RC => 177;
use constant BLACKBERRY_BETA => 178;
use constant BLACKBERRY_ALPHA => 179;
use constant WINMETRO => 192;
use constant WINMETRO_RC => 193;
use constant WINMETRO_BETA => 194;
use constant WINMETRO_ALPHA => 195;
use constant S40 => 208;
use constant S40_RC => 209;
use constant S40_BETA => 210;
use constant S40_ALPHA => 211;
use constant CHRONO => 224;
use constant CHRONO_RC => 225;
use constant CHRONO_BETA => 226;
use constant CHRONO_ALPHA => 227;
use constant TIZEN => 256;
use constant TIZEN_RC => 257;
use constant TIZEN_BETA => 258;
use constant TIZEN_ALPHA => 259;
use constant VIRTUAL => 272;
package BuddyBannerLinkType;
use constant BUDDY_BANNER_LINK_HIDDEN => 0;
use constant BUDDY_BANNER_LINK_MID => 1;
use constant BUDDY_BANNER_LINK_URL => 2;
package BuddyOnAirType;
use constant NORMAL => 0;
use constant LIVE => 1;
use constant VOIP => 2;
package BuddyResultState;
use constant ACCEPTED => 1;
use constant SUCCEEDED => 2;
use constant FAILED => 3;
use constant CANCELLED => 4;
use constant NOTIFY_FAILED => 5;
use constant STORING => 11;
use constant UPLOADING => 21;
use constant NOTIFYING => 31;
package BuddySearchRequestSource;
use constant NA => 0;
use constant FRIEND_VIEW => 1;
use constant OFFICIAL_ACCOUNT_VIEW => 2;
package CarrierCode;
use constant NOT_SPECIFIED => 0;
use constant JP_DOCOMO => 1;
use constant JP_AU => 2;
use constant JP_SOFTBANK => 3;
use constant KR_SKT => 17;
use constant KR_KT => 18;
use constant KR_LGT => 19;
package ChannelConfiguration;
use constant MESSAGE => 0;
use constant MESSAGE_NOTIFICATION => 1;
use constant NOTIFICATION_CENTER => 2;
package ChannelErrorCode;
use constant ILLEGAL_ARGUMENT => 0;
use constant INTERNAL_ERROR => 1;
use constant CONNECTION_ERROR => 2;
use constant AUTHENTICATIONI_FAILED => 3;
use constant NEED_PERMISSION_APPROVAL => 4;
use constant COIN_NOT_USABLE => 5;
package ChannelSyncType;
use constant SYNC => 0;
use constant REMOVE => 1;
package ContactAttribute;
use constant CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL => 1;
use constant CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL => 2;
use constant CONTACT_ATTRIBUTE_CAPABLE_MY_HOME => 16;
use constant CONTACT_ATTRIBUTE_CAPABLE_BUDDY => 32;
package ContactCategory;
use constant NORMAL => 0;
use constant RECOMMEND => 1;
package ContactRelation;
use constant ONEWAY => 0;
use constant BOTH => 1;
use constant NOT_REGISTERED => 2;
package ContactSetting;
use constant CONTACT_SETTING_NOTIFICATION_DISABLE => 1;
use constant CONTACT_SETTING_DISPLAY_NAME_OVERRIDE => 2;
use constant CONTACT_SETTING_CONTACT_HIDE => 4;
use constant CONTACT_SETTING_FAVORITE => 8;
use constant CONTACT_SETTING_DELETE => 16;
package ContactStatus;
use constant UNSPECIFIED => 0;
use constant FRIEND => 1;
use constant FRIEND_BLOCKED => 2;
use constant RECOMMEND => 3;
use constant RECOMMEND_BLOCKED => 4;
use constant DELETED => 5;
use constant DELETED_BLOCKED => 6;
package ContactType;
use constant MID => 0;
use constant PHONE => 1;
use constant EMAIL => 2;
use constant USERID => 3;
use constant PROXIMITY => 4;
use constant GROUP => 5;
use constant USER => 6;
use constant QRCODE => 7;
use constant PROMOTION_BOT => 8;
use constant REPAIR => 128;
use constant FACEBOOK => 2305;
use constant SINA => 2306;
use constant RENREN => 2307;
use constant FEIXIN => 2308;
package ContentType;
use constant NONE => 0;
use constant IMAGE => 1;
use constant VIDEO => 2;
use constant AUDIO => 3;
use constant HTML => 4;
use constant PDF => 5;
use constant CALL => 6;
use constant STICKER => 7;
use constant PRESENCE => 8;
use constant GIFT => 9;
use constant GROUPBOARD => 10;
use constant APPLINK => 11;
use constant LINK => 12;
use constant CONTACT => 13;
use constant FILE => 14;
use constant LOCATION => 15;
use constant POSTNOTIFICATION => 16;
use constant RICH => 17;
use constant CHATEVENT => 18;
package CustomMode;
use constant PROMOTION_FRIENDS_INVITE => 1;
use constant CAPABILITY_SERVER_SIDE_SMS => 2;
use constant LINE_CLIENT_ANALYTICS_CONFIGURATION => 3;
package EmailConfirmationStatus;
use constant NOT_SPECIFIED => 0;
use constant NOT_YET => 1;
use constant DONE => 3;
package EmailConfirmationType;
use constant SERVER_SIDE_EMAIL => 0;
use constant CLIENT_SIDE_EMAIL => 1;
package ErrorCode;
use constant ILLEGAL_ARGUMENT => 0;
use constant AUTHENTICATION_FAILED => 1;
use constant DB_FAILED => 2;
use constant INVALID_STATE => 3;
use constant EXCESSIVE_ACCESS => 4;
use constant NOT_FOUND => 5;
use constant INVALID_LENGTH => 6;
use constant NOT_AVAILABLE_USER => 7;
use constant NOT_AUTHORIZED_DEVICE => 8;
use constant INVALID_MID => 9;
use constant NOT_A_MEMBER => 10;
use constant INCOMPATIBLE_APP_VERSION => 11;
use constant NOT_READY => 12;
use constant NOT_AVAILABLE_SESSION => 13;
use constant NOT_AUTHORIZED_SESSION => 14;
use constant SYSTEM_ERROR => 15;
use constant NO_AVAILABLE_VERIFICATION_METHOD => 16;
use constant NOT_AUTHENTICATED => 17;
use constant INVALID_IDENTITY_CREDENTIAL => 18;
use constant NOT_AVAILABLE_IDENTITY_IDENTIFIER => 19;
use constant INTERNAL_ERROR => 20;
use constant NO_SUCH_IDENTITY_IDENFIER => 21;
use constant DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY => 22;
use constant ILLEGAL_IDENTITY_CREDENTIAL => 23;
use constant UNKNOWN_CHANNEL => 24;
use constant NO_SUCH_MESSAGE_BOX => 25;
use constant NOT_AVAILABLE_MESSAGE_BOX => 26;
use constant CHANNEL_DOES_NOT_MATCH => 27;
use constant NOT_YOUR_MESSAGE => 28;
use constant MESSAGE_DEFINED_ERROR => 29;
use constant USER_CANNOT_ACCEPT_PRESENTS => 30;
use constant USER_NOT_STICKER_OWNER => 32;
use constant MAINTENANCE_ERROR => 33;
use constant ACCOUNT_NOT_MATCHED => 34;
use constant ABUSE_BLOCK => 35;
use constant NOT_FRIEND => 36;
use constant NOT_ALLOWED_CALL => 37;
use constant BLOCK_FRIEND => 38;
use constant INCOMPATIBLE_VOIP_VERSION => 39;
use constant INVALID_SNS_ACCESS_TOKEN => 40;
use constant EXTERNAL_SERVICE_NOT_AVAILABLE => 41;
use constant NOT_ALLOWED_ADD_CONTACT => 42;
use constant NOT_CERTIFICATED => 43;
use constant NOT_ALLOWED_SECONDARY_DEVICE => 44;
use constant INVALID_PIN_CODE => 45;
use constant NOT_FOUND_IDENTITY_CREDENTIAL => 46;
use constant EXCEED_FILE_MAX_SIZE => 47;
use constant EXCEED_DAILY_QUOTA => 48;
use constant NOT_SUPPORT_SEND_FILE => 49;
use constant MUST_UPGRADE => 50;
use constant NOT_AVAILABLE_PIN_CODE_SESSION => 51;
package FeatureType;
use constant OBJECT_STORAGE => 1;
package GroupAttribute;
use constant NAME => 1;
use constant PICTURE_STATUS => 2;
use constant ALL => 255;
package IdentityProvider;
use constant UNKNOWN => 0;
use constant LINE => 1;
use constant NAVER_KR => 2;
package LoginResultType;
use constant SUCCESS => 1;
use constant REQUIRE_QRCODE => 2;
use constant REQUIRE_DEVICE_CONFIRM => 3;
package MessageOperationType;
use constant SEND_MESSAGE => 1;
use constant RECEIVE_MESSAGE => 2;
use constant READ_MESSAGE => 3;
use constant NOTIFIED_READ_MESSAGE => 4;
use constant NOTIFIED_JOIN_CHAT => 5;
use constant FAILED_SEND_MESSAGE => 6;
use constant SEND_CONTENT => 7;
use constant SEND_CONTENT_RECEIPT => 8;
use constant SEND_CHAT_REMOVED => 9;
use constant REMOVE_ALL_MESSAGES => 10;
package MIDType;
use constant USER => 0;
use constant ROOM => 1;
use constant GROUP => 2;
package ModificationType;
use constant ADD => 0;
use constant REMOVE => 1;
use constant MODIFY => 2;
package NotificationItemFetchMode;
use constant ALL => 0;
use constant APPEND => 1;
package NotificationQueueType;
use constant GLOBAL => 1;
use constant MESSAGE => 2;
use constant PRIMARY => 3;
package NotificationStatus;
use constant NOTIFICATION_ITEM_EXIST => 1;
use constant TIMELINE_ITEM_EXIST => 2;
use constant NOTE_GROUP_NEW_ITEM_EXIST => 4;
use constant TIMELINE_BUDDYGROUP_CHANGED => 8;
use constant NOTE_ONE_TO_ONE_NEW_ITEM_EXIST => 16;
use constant ALBUM_ITEM_EXIST => 32;
use constant TIMELINE_ITEM_DELETED => 64;
package NotificationType;
use constant APPLE_APNS => 1;
use constant GOOGLE_C2DM => 2;
use constant NHN_NNI => 3;
use constant SKT_AOM => 4;
use constant MS_MPNS => 5;
use constant RIM_BIS => 6;
use constant GOOGLE_GCM => 7;
use constant NOKIA_NNAPI => 8;
use constant TIZEN => 9;
use constant LINE_BOT => 17;
use constant LINE_WAP => 18;
package OpStatus;
use constant NORMAL => 0;
use constant ALERT_DISABLED => 1;
package OpType;
use constant END_OF_OPERATION => 0;
use constant UPDATE_PROFILE => 1;
use constant NOTIFIED_UPDATE_PROFILE => 2;
use constant REGISTER_USERID => 3;
use constant ADD_CONTACT => 4;
use constant NOTIFIED_ADD_CONTACT => 5;
use constant BLOCK_CONTACT => 6;
use constant UNBLOCK_CONTACT => 7;
use constant NOTIFIED_RECOMMEND_CONTACT => 8;
use constant CREATE_GROUP => 9;
use constant UPDATE_GROUP => 10;
use constant NOTIFIED_UPDATE_GROUP => 11;
use constant INVITE_INTO_GROUP => 12;
use constant NOTIFIED_INVITE_INTO_GROUP => 13;
use constant LEAVE_GROUP => 14;
use constant NOTIFIED_LEAVE_GROUP => 15;
use constant ACCEPT_GROUP_INVITATION => 16;
use constant NOTIFIED_ACCEPT_GROUP_INVITATION => 17;
use constant KICKOUT_FROM_GROUP => 18;
use constant NOTIFIED_KICKOUT_FROM_GROUP => 19;
use constant CREATE_ROOM => 20;
use constant INVITE_INTO_ROOM => 21;
use constant NOTIFIED_INVITE_INTO_ROOM => 22;
use constant LEAVE_ROOM => 23;
use constant NOTIFIED_LEAVE_ROOM => 24;
use constant SEND_MESSAGE => 25;
use constant RECEIVE_MESSAGE => 26;
use constant SEND_MESSAGE_RECEIPT => 27;
use constant RECEIVE_MESSAGE_RECEIPT => 28;
use constant SEND_CONTENT_RECEIPT => 29;
use constant RECEIVE_ANNOUNCEMENT => 30;
use constant CANCEL_INVITATION_GROUP => 31;
use constant NOTIFIED_CANCEL_INVITATION_GROUP => 32;
use constant NOTIFIED_UNREGISTER_USER => 33;
use constant REJECT_GROUP_INVITATION => 34;
use constant NOTIFIED_REJECT_GROUP_INVITATION => 35;
use constant UPDATE_SETTINGS => 36;
use constant NOTIFIED_REGISTER_USER => 37;
use constant INVITE_VIA_EMAIL => 38;
use constant NOTIFIED_REQUEST_RECOVERY => 39;
use constant SEND_CHAT_CHECKED => 40;
use constant SEND_CHAT_REMOVED => 41;
use constant NOTIFIED_FORCE_SYNC => 42;
use constant SEND_CONTENT => 43;
use constant SEND_MESSAGE_MYHOME => 44;
use constant NOTIFIED_UPDATE_CONTENT_PREVIEW => 45;
use constant REMOVE_ALL_MESSAGES => 46;
use constant NOTIFIED_UPDATE_PURCHASES => 47;
use constant DUMMY => 48;
use constant UPDATE_CONTACT => 49;
use constant NOTIFIED_RECEIVED_CALL => 50;
use constant CANCEL_CALL => 51;
use constant NOTIFIED_REDIRECT => 52;
use constant NOTIFIED_CHANNEL_SYNC => 53;
use constant FAILED_SEND_MESSAGE => 54;
use constant NOTIFIED_READ_MESSAGE => 55;
use constant FAILED_EMAIL_CONFIRMATION => 56;
use constant NOTIFIED_CHAT_CONTENT => 58;
use constant NOTIFIED_PUSH_NOTICENTER_ITEM => 59;
package PayloadType;
use constant PAYLOAD_BUY => 101;
use constant PAYLOAD_CS => 111;
use constant PAYLOAD_BONUS => 121;
use constant PAYLOAD_EVENT => 131;
package PaymentPgType;
use constant PAYMENT_PG_NONE => 0;
use constant PAYMENT_PG_AU => 1;
use constant PAYMENT_PG_AL => 2;
package PaymentType;
use constant PAYMENT_APPLE => 1;
use constant PAYMENT_GOOGLE => 2;
package ProductBannerLinkType;
use constant BANNER_LINK_NONE => 0;
use constant BANNER_LINK_ITEM => 1;
use constant BANNER_LINK_URL => 2;
use constant BANNER_LINK_CATEGORY => 3;
package ProductEventType;
use constant NO_EVENT => 0;
use constant CARRIER_ANY => 65537;
use constant BUDDY_ANY => 131073;
use constant INSTALL_IOS => 196609;
use constant INSTALL_ANDROID => 196610;
use constant MISSION_ANY => 262145;
use constant MUSTBUY_ANY => 327681;
package ProfileAttribute;
use constant EMAIL => 1;
use constant DISPLAY_NAME => 2;
use constant PHONETIC_NAME => 4;
use constant PICTURE => 8;
use constant STATUS_MESSAGE => 16;
use constant ALLOW_SEARCH_BY_USERID => 32;
use constant ALLOW_SEARCH_BY_EMAIL => 64;
use constant BUDDY_STATUS => 128;
use constant ALL => 255;
package PublicType;
use constant HIDDEN => 0;
use constant PUBLIC => 1000;
package RedirectType;
use constant NONE => 0;
use constant EXPIRE_SECOND => 1;
package RegistrationType;
use constant PHONE => 0;
use constant EMAIL_WAP => 1;
use constant FACEBOOK => 2305;
use constant SINA => 2306;
use constant RENREN => 2307;
use constant FEIXIN => 2308;
package SettingsAttribute;
use constant NOTIFICATION_ENABLE => 1;
use constant NOTIFICATION_MUTE_EXPIRATION => 2;
use constant NOTIFICATION_NEW_MESSAGE => 4;
use constant NOTIFICATION_GROUP_INVITATION => 8;
use constant NOTIFICATION_SHOW_MESSAGE => 16;
use constant NOTIFICATION_INCOMING_CALL => 32;
use constant PRIVACY_SYNC_CONTACTS => 64;
use constant PRIVACY_SEARCH_BY_PHONE_NUMBER => 128;
use constant NOTIFICATION_SOUND_MESSAGE => 256;
use constant NOTIFICATION_SOUND_GROUP => 512;
use constant CONTACT_MY_TICKET => 1024;
use constant IDENTITY_PROVIDER => 2048;
use constant IDENTITY_IDENTIFIER => 4096;
use constant PRIVACY_SEARCH_BY_USERID => 8192;
use constant PRIVACY_SEARCH_BY_EMAIL => 16384;
use constant PREFERENCE_LOCALE => 32768;
use constant NOTIFICATION_DISABLED_WITH_SUB => 65536;
use constant SNS_ACCOUNT => 524288;
use constant PHONE_REGISTRATION => 1048576;
use constant PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN => 2097152;
use constant CUSTOM_MODE => 4194304;
use constant PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME => 8388608;
use constant EMAIL_CONFIRMATION_STATUS => 16777216;
use constant PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND => 33554432;
use constant ALL => 2147483647;
package SnsIdType;
use constant FACEBOOK => 1;
use constant SINA => 2;
use constant RENREN => 3;
use constant FEIXIN => 4;
package SpammerReason;
use constant OTHER => 0;
use constant ADVERTISING => 1;
use constant GENDER_HARASSMENT => 2;
use constant HARASSMENT => 3;
package SyncActionType;
use constant SYNC => 0;
use constant REPORT => 1;
package SyncCategory;
use constant PROFILE => 0;
use constant SETTINGS => 1;
use constant OPS => 2;
use constant CONTACT => 3;
use constant RECOMMEND => 4;
use constant BLOCK => 5;
use constant GROUP => 6;
use constant ROOM => 7;
use constant NOTIFICATION => 8;
package TMessageBoxStatus;
use constant ACTIVATED => 1;
use constant UNREAD => 2;
package UniversalNotificationServiceErrorCode;
use constant INTERNAL_ERROR => 0;
use constant INVALID_KEY => 1;
use constant ILLEGAL_ARGUMENT => 2;
use constant TOO_MANY_REQUEST => 3;
use constant AUTHENTICATION_FAILED => 4;
use constant NO_WRITE_PERMISSION => 5;
package UnregistrationReason;
use constant UNREGISTRATION_REASON_UNREGISTER_USER => 1;
use constant UNREGISTRATION_REASON_UNBIND_DEVICE => 2;
package UserAgeType;
use constant OVER => 1;
use constant UNDER => 2;
use constant UNDEFINED => 3;
package VerificationMethod;
use constant NO_AVAILABLE => 0;
use constant PIN_VIA_SMS => 1;
use constant CALLERID_INDIGO => 2;
use constant PIN_VIA_TTS => 4;
use constant SKIP => 10;
package VerificationResult;
use constant FAILED => 0;
use constant OK_NOT_REGISTERED_YET => 1;
use constant OK_REGISTERED_WITH_SAME_DEVICE => 2;
use constant OK_REGISTERED_WITH_ANOTHER_DEVICE => 3;
package WapInvitationType;
use constant REGISTRATION => 1;
use constant CHAT => 2;

package AgeCheckDocomoResult;
use base qw(Class::Accessor);
AgeCheckDocomoResult->mk_accessors( qw( authUrl userAgeType ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{authUrl} = undef;
  $self->{userAgeType} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{authUrl}) {
      $self->{authUrl} = $vals->{authUrl};
    }
    if (defined $vals->{userAgeType}) {
      $self->{userAgeType} = $vals->{userAgeType};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AgeCheckDocomoResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{authUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{userAgeType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AgeCheckDocomoResult');
  if (defined $self->{authUrl}) {
    $xfer += $output->writeFieldBegin('authUrl', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{authUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{userAgeType}) {
    $xfer += $output->writeFieldBegin('userAgeType', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{userAgeType});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AgeCheckRequestResult;
use base qw(Class::Accessor);
AgeCheckRequestResult->mk_accessors( qw( authUrl sessionId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{authUrl} = undef;
  $self->{sessionId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{authUrl}) {
      $self->{authUrl} = $vals->{authUrl};
    }
    if (defined $vals->{sessionId}) {
      $self->{sessionId} = $vals->{sessionId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AgeCheckRequestResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{authUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{sessionId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AgeCheckRequestResult');
  if (defined $self->{authUrl}) {
    $xfer += $output->writeFieldBegin('authUrl', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{authUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sessionId}) {
    $xfer += $output->writeFieldBegin('sessionId', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{sessionId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Announcement;
use base qw(Class::Accessor);
Announcement->mk_accessors( qw( index forceUpdate title text createdTime pictureUrl thumbnailUrl ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{index} = undef;
  $self->{forceUpdate} = undef;
  $self->{title} = undef;
  $self->{text} = undef;
  $self->{createdTime} = undef;
  $self->{pictureUrl} = undef;
  $self->{thumbnailUrl} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{index}) {
      $self->{index} = $vals->{index};
    }
    if (defined $vals->{forceUpdate}) {
      $self->{forceUpdate} = $vals->{forceUpdate};
    }
    if (defined $vals->{title}) {
      $self->{title} = $vals->{title};
    }
    if (defined $vals->{text}) {
      $self->{text} = $vals->{text};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{pictureUrl}) {
      $self->{pictureUrl} = $vals->{pictureUrl};
    }
    if (defined $vals->{thumbnailUrl}) {
      $self->{thumbnailUrl} = $vals->{thumbnailUrl};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Announcement';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{index});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{forceUpdate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{title});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{text});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{thumbnailUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Announcement');
  if (defined $self->{index}) {
    $xfer += $output->writeFieldBegin('index', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{index});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{forceUpdate}) {
    $xfer += $output->writeFieldBegin('forceUpdate', Thrift::TType::BOOL, 10);
    $xfer += $output->writeBool($self->{forceUpdate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{title}) {
    $xfer += $output->writeFieldBegin('title', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{title});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{text}) {
    $xfer += $output->writeFieldBegin('text', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{text});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 13);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureUrl}) {
    $xfer += $output->writeFieldBegin('pictureUrl', Thrift::TType::STRING, 14);
    $xfer += $output->writeString($self->{pictureUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{thumbnailUrl}) {
    $xfer += $output->writeFieldBegin('thumbnailUrl', Thrift::TType::STRING, 15);
    $xfer += $output->writeString($self->{thumbnailUrl});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelProvider;
use base qw(Class::Accessor);
ChannelProvider->mk_accessors( qw( name ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{name} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelProvider';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelProvider');
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelInfo;
use base qw(Class::Accessor);
ChannelInfo->mk_accessors( qw( channelId name entryPageUrl descriptionText provider publicType iconImage permissions iconThumbnailImage channelConfigurations ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelId} = undef;
  $self->{name} = undef;
  $self->{entryPageUrl} = undef;
  $self->{descriptionText} = undef;
  $self->{provider} = undef;
  $self->{publicType} = undef;
  $self->{iconImage} = undef;
  $self->{permissions} = undef;
  $self->{iconThumbnailImage} = undef;
  $self->{channelConfigurations} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelId}) {
      $self->{channelId} = $vals->{channelId};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{entryPageUrl}) {
      $self->{entryPageUrl} = $vals->{entryPageUrl};
    }
    if (defined $vals->{descriptionText}) {
      $self->{descriptionText} = $vals->{descriptionText};
    }
    if (defined $vals->{provider}) {
      $self->{provider} = $vals->{provider};
    }
    if (defined $vals->{publicType}) {
      $self->{publicType} = $vals->{publicType};
    }
    if (defined $vals->{iconImage}) {
      $self->{iconImage} = $vals->{iconImage};
    }
    if (defined $vals->{permissions}) {
      $self->{permissions} = $vals->{permissions};
    }
    if (defined $vals->{iconThumbnailImage}) {
      $self->{iconThumbnailImage} = $vals->{iconThumbnailImage};
    }
    if (defined $vals->{channelConfigurations}) {
      $self->{channelConfigurations} = $vals->{channelConfigurations};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelInfo';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{entryPageUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{descriptionText});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{provider} = ChannelProvider->new();
        $xfer += $self->{provider}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{publicType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{iconImage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size0 = 0;
          $self->{permissions} = [];
          my $_etype3 = 0;
          $xfer += $input->readListBegin(\$_etype3, \$_size0);
          for (my $_i4 = 0; $_i4 < $_size0; ++$_i4)
          {
            my $elem5 = undef;
            $xfer += $input->readString(\$elem5);
            push(@{$self->{permissions}},$elem5);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{iconThumbnailImage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size6 = 0;
          $self->{channelConfigurations} = [];
          my $_etype9 = 0;
          $xfer += $input->readListBegin(\$_etype9, \$_size6);
          for (my $_i10 = 0; $_i10 < $_size6; ++$_i10)
          {
            my $elem11 = undef;
            $xfer += $input->readI32(\$elem11);
            push(@{$self->{channelConfigurations}},$elem11);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelInfo');
  if (defined $self->{channelId}) {
    $xfer += $output->writeFieldBegin('channelId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{channelId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{entryPageUrl}) {
    $xfer += $output->writeFieldBegin('entryPageUrl', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{entryPageUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{descriptionText}) {
    $xfer += $output->writeFieldBegin('descriptionText', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{descriptionText});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{provider}) {
    $xfer += $output->writeFieldBegin('provider', Thrift::TType::STRUCT, 6);
    $xfer += $self->{provider}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{publicType}) {
    $xfer += $output->writeFieldBegin('publicType', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{publicType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{iconImage}) {
    $xfer += $output->writeFieldBegin('iconImage', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{iconImage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{permissions}) {
    $xfer += $output->writeFieldBegin('permissions', Thrift::TType::LIST, 9);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{permissions}}));
      {
        foreach my $iter12 (@{$self->{permissions}}) 
        {
          $xfer += $output->writeString($iter12);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{iconThumbnailImage}) {
    $xfer += $output->writeFieldBegin('iconThumbnailImage', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{iconThumbnailImage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{channelConfigurations}) {
    $xfer += $output->writeFieldBegin('channelConfigurations', Thrift::TType::LIST, 12);
    {
      $xfer += $output->writeListBegin(Thrift::TType::I32, scalar(@{$self->{channelConfigurations}}));
      {
        foreach my $iter13 (@{$self->{channelConfigurations}}) 
        {
          $xfer += $output->writeI32($iter13);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ApprovedChannelInfo;
use base qw(Class::Accessor);
ApprovedChannelInfo->mk_accessors( qw( channelInfo approvedAt ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelInfo} = undef;
  $self->{approvedAt} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelInfo}) {
      $self->{channelInfo} = $vals->{channelInfo};
    }
    if (defined $vals->{approvedAt}) {
      $self->{approvedAt} = $vals->{approvedAt};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ApprovedChannelInfo';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{channelInfo} = ChannelInfo->new();
        $xfer += $self->{channelInfo}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{approvedAt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ApprovedChannelInfo');
  if (defined $self->{channelInfo}) {
    $xfer += $output->writeFieldBegin('channelInfo', Thrift::TType::STRUCT, 1);
    $xfer += $self->{channelInfo}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{approvedAt}) {
    $xfer += $output->writeFieldBegin('approvedAt', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{approvedAt});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ApprovedChannelInfos;
use base qw(Class::Accessor);
ApprovedChannelInfos->mk_accessors( qw( approvedChannelInfos revision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{approvedChannelInfos} = undef;
  $self->{revision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{approvedChannelInfos}) {
      $self->{approvedChannelInfos} = $vals->{approvedChannelInfos};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ApprovedChannelInfos';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size14 = 0;
          $self->{approvedChannelInfos} = [];
          my $_etype17 = 0;
          $xfer += $input->readListBegin(\$_etype17, \$_size14);
          for (my $_i18 = 0; $_i18 < $_size14; ++$_i18)
          {
            my $elem19 = undef;
            $elem19 = ApprovedChannelInfo->new();
            $xfer += $elem19->read($input);
            push(@{$self->{approvedChannelInfos}},$elem19);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ApprovedChannelInfos');
  if (defined $self->{approvedChannelInfos}) {
    $xfer += $output->writeFieldBegin('approvedChannelInfos', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{approvedChannelInfos}}));
      {
        foreach my $iter20 (@{$self->{approvedChannelInfos}}) 
        {
          $xfer += ${iter20}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AuthQrcode;
use base qw(Class::Accessor);
AuthQrcode->mk_accessors( qw( qrcode verifier ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{qrcode} = undef;
  $self->{verifier} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{qrcode}) {
      $self->{qrcode} = $vals->{qrcode};
    }
    if (defined $vals->{verifier}) {
      $self->{verifier} = $vals->{verifier};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'AuthQrcode';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{qrcode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{verifier});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('AuthQrcode');
  if (defined $self->{qrcode}) {
    $xfer += $output->writeFieldBegin('qrcode', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{qrcode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{verifier}) {
    $xfer += $output->writeFieldBegin('verifier', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{verifier});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddyBanner;
use base qw(Class::Accessor);
BuddyBanner->mk_accessors( qw( buddyBannerLinkType buddyBannerLink buddyBannerImageUrl ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{buddyBannerLinkType} = undef;
  $self->{buddyBannerLink} = undef;
  $self->{buddyBannerImageUrl} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{buddyBannerLinkType}) {
      $self->{buddyBannerLinkType} = $vals->{buddyBannerLinkType};
    }
    if (defined $vals->{buddyBannerLink}) {
      $self->{buddyBannerLink} = $vals->{buddyBannerLink};
    }
    if (defined $vals->{buddyBannerImageUrl}) {
      $self->{buddyBannerImageUrl} = $vals->{buddyBannerImageUrl};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddyBanner';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{buddyBannerLinkType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{buddyBannerLink});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{buddyBannerImageUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddyBanner');
  if (defined $self->{buddyBannerLinkType}) {
    $xfer += $output->writeFieldBegin('buddyBannerLinkType', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{buddyBannerLinkType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{buddyBannerLink}) {
    $xfer += $output->writeFieldBegin('buddyBannerLink', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{buddyBannerLink});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{buddyBannerImageUrl}) {
    $xfer += $output->writeFieldBegin('buddyBannerImageUrl', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{buddyBannerImageUrl});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddyDetail;
use base qw(Class::Accessor);
BuddyDetail->mk_accessors( qw( mid memberCount onAir businessAccount addable acceptableContentTypes capableMyhome ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{memberCount} = undef;
  $self->{onAir} = undef;
  $self->{businessAccount} = undef;
  $self->{addable} = undef;
  $self->{acceptableContentTypes} = undef;
  $self->{capableMyhome} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{memberCount}) {
      $self->{memberCount} = $vals->{memberCount};
    }
    if (defined $vals->{onAir}) {
      $self->{onAir} = $vals->{onAir};
    }
    if (defined $vals->{businessAccount}) {
      $self->{businessAccount} = $vals->{businessAccount};
    }
    if (defined $vals->{addable}) {
      $self->{addable} = $vals->{addable};
    }
    if (defined $vals->{acceptableContentTypes}) {
      $self->{acceptableContentTypes} = $vals->{acceptableContentTypes};
    }
    if (defined $vals->{capableMyhome}) {
      $self->{capableMyhome} = $vals->{capableMyhome};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddyDetail';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{memberCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{onAir});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{businessAccount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{addable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::SET) {
        {
          my $_size21 = 0;
          $self->{acceptableContentTypes} = {};
          my $_etype24 = 0;
          $xfer += $input->readSetBegin(\$_etype24, \$_size21);
          for (my $_i25 = 0; $_i25 < $_size21; ++$_i25)
          {
            my $elem26 = undef;
            $xfer += $input->readI32(\$elem26);
            $self->{acceptableContentTypes}->{$elem26} = 1;
          }
          $xfer += $input->readSetEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{capableMyhome});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddyDetail');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{memberCount}) {
    $xfer += $output->writeFieldBegin('memberCount', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{memberCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{onAir}) {
    $xfer += $output->writeFieldBegin('onAir', Thrift::TType::BOOL, 3);
    $xfer += $output->writeBool($self->{onAir});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{businessAccount}) {
    $xfer += $output->writeFieldBegin('businessAccount', Thrift::TType::BOOL, 4);
    $xfer += $output->writeBool($self->{businessAccount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{addable}) {
    $xfer += $output->writeFieldBegin('addable', Thrift::TType::BOOL, 5);
    $xfer += $output->writeBool($self->{addable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{acceptableContentTypes}) {
    $xfer += $output->writeFieldBegin('acceptableContentTypes', Thrift::TType::SET, 6);
    {
      $xfer += $output->writeSetBegin(Thrift::TType::I32, scalar(@{$self->{acceptableContentTypes}}));
      {
        foreach my $iter27 (@{$self->{acceptableContentTypes}})
        {
          $xfer += $output->writeI32($iter27);
        }
      }
      $xfer += $output->writeSetEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{capableMyhome}) {
    $xfer += $output->writeFieldBegin('capableMyhome', Thrift::TType::BOOL, 7);
    $xfer += $output->writeBool($self->{capableMyhome});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Contact;
use base qw(Class::Accessor);
Contact->mk_accessors( qw( mid createdTime type status relation displayName phoneticName pictureStatus thumbnailUrl statusMessage displayNameOverridden favoriteTime capableVoiceCall capableVideoCall capableMyhome capableBuddy attributes settings picturePath ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{createdTime} = undef;
  $self->{type} = undef;
  $self->{status} = undef;
  $self->{relation} = undef;
  $self->{displayName} = undef;
  $self->{phoneticName} = undef;
  $self->{pictureStatus} = undef;
  $self->{thumbnailUrl} = undef;
  $self->{statusMessage} = undef;
  $self->{displayNameOverridden} = undef;
  $self->{favoriteTime} = undef;
  $self->{capableVoiceCall} = undef;
  $self->{capableVideoCall} = undef;
  $self->{capableMyhome} = undef;
  $self->{capableBuddy} = undef;
  $self->{attributes} = undef;
  $self->{settings} = undef;
  $self->{picturePath} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
    if (defined $vals->{relation}) {
      $self->{relation} = $vals->{relation};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{phoneticName}) {
      $self->{phoneticName} = $vals->{phoneticName};
    }
    if (defined $vals->{pictureStatus}) {
      $self->{pictureStatus} = $vals->{pictureStatus};
    }
    if (defined $vals->{thumbnailUrl}) {
      $self->{thumbnailUrl} = $vals->{thumbnailUrl};
    }
    if (defined $vals->{statusMessage}) {
      $self->{statusMessage} = $vals->{statusMessage};
    }
    if (defined $vals->{displayNameOverridden}) {
      $self->{displayNameOverridden} = $vals->{displayNameOverridden};
    }
    if (defined $vals->{favoriteTime}) {
      $self->{favoriteTime} = $vals->{favoriteTime};
    }
    if (defined $vals->{capableVoiceCall}) {
      $self->{capableVoiceCall} = $vals->{capableVoiceCall};
    }
    if (defined $vals->{capableVideoCall}) {
      $self->{capableVideoCall} = $vals->{capableVideoCall};
    }
    if (defined $vals->{capableMyhome}) {
      $self->{capableMyhome} = $vals->{capableMyhome};
    }
    if (defined $vals->{capableBuddy}) {
      $self->{capableBuddy} = $vals->{capableBuddy};
    }
    if (defined $vals->{attributes}) {
      $self->{attributes} = $vals->{attributes};
    }
    if (defined $vals->{settings}) {
      $self->{settings} = $vals->{settings};
    }
    if (defined $vals->{picturePath}) {
      $self->{picturePath} = $vals->{picturePath};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Contact';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{status});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{relation});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^23$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{phoneticName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^24$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^25$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{thumbnailUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^26$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{statusMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^27$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayNameOverridden});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^28$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{favoriteTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^31$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{capableVoiceCall});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^32$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{capableVideoCall});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^33$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{capableMyhome});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^34$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{capableBuddy});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^35$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{attributes});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^36$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{settings});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^37$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{picturePath});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Contact');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 10);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::I32, 11);
    $xfer += $output->writeI32($self->{status});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{relation}) {
    $xfer += $output->writeFieldBegin('relation', Thrift::TType::I32, 21);
    $xfer += $output->writeI32($self->{relation});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 22);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phoneticName}) {
    $xfer += $output->writeFieldBegin('phoneticName', Thrift::TType::STRING, 23);
    $xfer += $output->writeString($self->{phoneticName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureStatus}) {
    $xfer += $output->writeFieldBegin('pictureStatus', Thrift::TType::STRING, 24);
    $xfer += $output->writeString($self->{pictureStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{thumbnailUrl}) {
    $xfer += $output->writeFieldBegin('thumbnailUrl', Thrift::TType::STRING, 25);
    $xfer += $output->writeString($self->{thumbnailUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{statusMessage}) {
    $xfer += $output->writeFieldBegin('statusMessage', Thrift::TType::STRING, 26);
    $xfer += $output->writeString($self->{statusMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayNameOverridden}) {
    $xfer += $output->writeFieldBegin('displayNameOverridden', Thrift::TType::STRING, 27);
    $xfer += $output->writeString($self->{displayNameOverridden});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{favoriteTime}) {
    $xfer += $output->writeFieldBegin('favoriteTime', Thrift::TType::I64, 28);
    $xfer += $output->writeI64($self->{favoriteTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{capableVoiceCall}) {
    $xfer += $output->writeFieldBegin('capableVoiceCall', Thrift::TType::BOOL, 31);
    $xfer += $output->writeBool($self->{capableVoiceCall});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{capableVideoCall}) {
    $xfer += $output->writeFieldBegin('capableVideoCall', Thrift::TType::BOOL, 32);
    $xfer += $output->writeBool($self->{capableVideoCall});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{capableMyhome}) {
    $xfer += $output->writeFieldBegin('capableMyhome', Thrift::TType::BOOL, 33);
    $xfer += $output->writeBool($self->{capableMyhome});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{capableBuddy}) {
    $xfer += $output->writeFieldBegin('capableBuddy', Thrift::TType::BOOL, 34);
    $xfer += $output->writeBool($self->{capableBuddy});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attributes}) {
    $xfer += $output->writeFieldBegin('attributes', Thrift::TType::I32, 35);
    $xfer += $output->writeI32($self->{attributes});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{settings}) {
    $xfer += $output->writeFieldBegin('settings', Thrift::TType::I64, 36);
    $xfer += $output->writeI64($self->{settings});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{picturePath}) {
    $xfer += $output->writeFieldBegin('picturePath', Thrift::TType::STRING, 37);
    $xfer += $output->writeString($self->{picturePath});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddyList;
use base qw(Class::Accessor);
BuddyList->mk_accessors( qw( classification displayName totalBuddyCount popularContacts ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{classification} = undef;
  $self->{displayName} = undef;
  $self->{totalBuddyCount} = undef;
  $self->{popularContacts} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{classification}) {
      $self->{classification} = $vals->{classification};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{totalBuddyCount}) {
      $self->{totalBuddyCount} = $vals->{totalBuddyCount};
    }
    if (defined $vals->{popularContacts}) {
      $self->{popularContacts} = $vals->{popularContacts};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddyList';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{classification});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{totalBuddyCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size28 = 0;
          $self->{popularContacts} = [];
          my $_etype31 = 0;
          $xfer += $input->readListBegin(\$_etype31, \$_size28);
          for (my $_i32 = 0; $_i32 < $_size28; ++$_i32)
          {
            my $elem33 = undef;
            $elem33 = Contact->new();
            $xfer += $elem33->read($input);
            push(@{$self->{popularContacts}},$elem33);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddyList');
  if (defined $self->{classification}) {
    $xfer += $output->writeFieldBegin('classification', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{classification});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{totalBuddyCount}) {
    $xfer += $output->writeFieldBegin('totalBuddyCount', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{totalBuddyCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{popularContacts}) {
    $xfer += $output->writeFieldBegin('popularContacts', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{popularContacts}}));
      {
        foreach my $iter34 (@{$self->{popularContacts}}) 
        {
          $xfer += ${iter34}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Location;
use base qw(Class::Accessor);
Location->mk_accessors( qw( title address latitude longitude phone ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{title} = undef;
  $self->{address} = undef;
  $self->{latitude} = undef;
  $self->{longitude} = undef;
  $self->{phone} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{title}) {
      $self->{title} = $vals->{title};
    }
    if (defined $vals->{address}) {
      $self->{address} = $vals->{address};
    }
    if (defined $vals->{latitude}) {
      $self->{latitude} = $vals->{latitude};
    }
    if (defined $vals->{longitude}) {
      $self->{longitude} = $vals->{longitude};
    }
    if (defined $vals->{phone}) {
      $self->{phone} = $vals->{phone};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Location';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{title});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{address});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{latitude});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{longitude});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{phone});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Location');
  if (defined $self->{title}) {
    $xfer += $output->writeFieldBegin('title', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{title});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{address}) {
    $xfer += $output->writeFieldBegin('address', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{address});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{latitude}) {
    $xfer += $output->writeFieldBegin('latitude', Thrift::TType::DOUBLE, 3);
    $xfer += $output->writeDouble($self->{latitude});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{longitude}) {
    $xfer += $output->writeFieldBegin('longitude', Thrift::TType::DOUBLE, 4);
    $xfer += $output->writeDouble($self->{longitude});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phone}) {
    $xfer += $output->writeFieldBegin('phone', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{phone});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddyMessageRequest;
use base qw(Class::Accessor);
BuddyMessageRequest->mk_accessors( qw( contentType text location content contentMetadata ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{contentType} = undef;
  $self->{text} = undef;
  $self->{location} = undef;
  $self->{content} = undef;
  $self->{contentMetadata} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{contentType}) {
      $self->{contentType} = $vals->{contentType};
    }
    if (defined $vals->{text}) {
      $self->{text} = $vals->{text};
    }
    if (defined $vals->{location}) {
      $self->{location} = $vals->{location};
    }
    if (defined $vals->{content}) {
      $self->{content} = $vals->{content};
    }
    if (defined $vals->{contentMetadata}) {
      $self->{contentMetadata} = $vals->{contentMetadata};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddyMessageRequest';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{contentType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{text});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{location} = Location->new();
        $xfer += $self->{location}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{content});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size35 = 0;
          $self->{contentMetadata} = {};
          my $_ktype36 = 0;
          my $_vtype37 = 0;
          $xfer += $input->readMapBegin(\$_ktype36, \$_vtype37, \$_size35);
          for (my $_i39 = 0; $_i39 < $_size35; ++$_i39)
          {
            my $key40 = '';
            my $val41 = '';
            $xfer += $input->readString(\$key40);
            $xfer += $input->readString(\$val41);
            $self->{contentMetadata}->{$key40} = $val41;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddyMessageRequest');
  if (defined $self->{contentType}) {
    $xfer += $output->writeFieldBegin('contentType', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{contentType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{text}) {
    $xfer += $output->writeFieldBegin('text', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{text});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{location}) {
    $xfer += $output->writeFieldBegin('location', Thrift::TType::STRUCT, 3);
    $xfer += $self->{location}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{content}) {
    $xfer += $output->writeFieldBegin('content', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{content});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contentMetadata}) {
    $xfer += $output->writeFieldBegin('contentMetadata', Thrift::TType::MAP, 5);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{contentMetadata}}));
      {
        while( my ($kiter42,$viter43) = each %{$self->{contentMetadata}}) 
        {
          $xfer += $output->writeString($kiter42);
          $xfer += $output->writeString($viter43);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddyOnAirUrls;
use base qw(Class::Accessor);
BuddyOnAirUrls->mk_accessors( qw( hls smoothStreaming ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{hls} = undef;
  $self->{smoothStreaming} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{hls}) {
      $self->{hls} = $vals->{hls};
    }
    if (defined $vals->{smoothStreaming}) {
      $self->{smoothStreaming} = $vals->{smoothStreaming};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddyOnAirUrls';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size44 = 0;
          $self->{hls} = {};
          my $_ktype45 = 0;
          my $_vtype46 = 0;
          $xfer += $input->readMapBegin(\$_ktype45, \$_vtype46, \$_size44);
          for (my $_i48 = 0; $_i48 < $_size44; ++$_i48)
          {
            my $key49 = '';
            my $val50 = '';
            $xfer += $input->readString(\$key49);
            $xfer += $input->readString(\$val50);
            $self->{hls}->{$key49} = $val50;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size51 = 0;
          $self->{smoothStreaming} = {};
          my $_ktype52 = 0;
          my $_vtype53 = 0;
          $xfer += $input->readMapBegin(\$_ktype52, \$_vtype53, \$_size51);
          for (my $_i55 = 0; $_i55 < $_size51; ++$_i55)
          {
            my $key56 = '';
            my $val57 = '';
            $xfer += $input->readString(\$key56);
            $xfer += $input->readString(\$val57);
            $self->{smoothStreaming}->{$key56} = $val57;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddyOnAirUrls');
  if (defined $self->{hls}) {
    $xfer += $output->writeFieldBegin('hls', Thrift::TType::MAP, 1);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{hls}}));
      {
        while( my ($kiter58,$viter59) = each %{$self->{hls}}) 
        {
          $xfer += $output->writeString($kiter58);
          $xfer += $output->writeString($viter59);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{smoothStreaming}) {
    $xfer += $output->writeFieldBegin('smoothStreaming', Thrift::TType::MAP, 2);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{smoothStreaming}}));
      {
        while( my ($kiter60,$viter61) = each %{$self->{smoothStreaming}}) 
        {
          $xfer += $output->writeString($kiter60);
          $xfer += $output->writeString($viter61);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddyOnAir;
use base qw(Class::Accessor);
BuddyOnAir->mk_accessors( qw( mid freshnessLifetime onAirId onAir text viewerCount targetCount onAirType onAirUrls ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{freshnessLifetime} = undef;
  $self->{onAirId} = undef;
  $self->{onAir} = undef;
  $self->{text} = undef;
  $self->{viewerCount} = undef;
  $self->{targetCount} = undef;
  $self->{onAirType} = undef;
  $self->{onAirUrls} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{freshnessLifetime}) {
      $self->{freshnessLifetime} = $vals->{freshnessLifetime};
    }
    if (defined $vals->{onAirId}) {
      $self->{onAirId} = $vals->{onAirId};
    }
    if (defined $vals->{onAir}) {
      $self->{onAir} = $vals->{onAir};
    }
    if (defined $vals->{text}) {
      $self->{text} = $vals->{text};
    }
    if (defined $vals->{viewerCount}) {
      $self->{viewerCount} = $vals->{viewerCount};
    }
    if (defined $vals->{targetCount}) {
      $self->{targetCount} = $vals->{targetCount};
    }
    if (defined $vals->{onAirType}) {
      $self->{onAirType} = $vals->{onAirType};
    }
    if (defined $vals->{onAirUrls}) {
      $self->{onAirUrls} = $vals->{onAirUrls};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddyOnAir';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{freshnessLifetime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{onAirId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{onAir});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{text});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{viewerCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{targetCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^31$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{onAirType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^32$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{onAirUrls} = BuddyOnAirUrls->new();
        $xfer += $self->{onAirUrls}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddyOnAir');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{freshnessLifetime}) {
    $xfer += $output->writeFieldBegin('freshnessLifetime', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{freshnessLifetime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{onAirId}) {
    $xfer += $output->writeFieldBegin('onAirId', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{onAirId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{onAir}) {
    $xfer += $output->writeFieldBegin('onAir', Thrift::TType::BOOL, 5);
    $xfer += $output->writeBool($self->{onAir});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{text}) {
    $xfer += $output->writeFieldBegin('text', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{text});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{viewerCount}) {
    $xfer += $output->writeFieldBegin('viewerCount', Thrift::TType::I64, 12);
    $xfer += $output->writeI64($self->{viewerCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{targetCount}) {
    $xfer += $output->writeFieldBegin('targetCount', Thrift::TType::I64, 13);
    $xfer += $output->writeI64($self->{targetCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{onAirType}) {
    $xfer += $output->writeFieldBegin('onAirType', Thrift::TType::I32, 31);
    $xfer += $output->writeI32($self->{onAirType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{onAirUrls}) {
    $xfer += $output->writeFieldBegin('onAirUrls', Thrift::TType::STRUCT, 32);
    $xfer += $self->{onAirUrls}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddyProfile;
use base qw(Class::Accessor);
BuddyProfile->mk_accessors( qw( buddyId mid searchId displayName statusMessage contactCount ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{buddyId} = undef;
  $self->{mid} = undef;
  $self->{searchId} = undef;
  $self->{displayName} = undef;
  $self->{statusMessage} = undef;
  $self->{contactCount} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{buddyId}) {
      $self->{buddyId} = $vals->{buddyId};
    }
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{searchId}) {
      $self->{searchId} = $vals->{searchId};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{statusMessage}) {
      $self->{statusMessage} = $vals->{statusMessage};
    }
    if (defined $vals->{contactCount}) {
      $self->{contactCount} = $vals->{contactCount};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddyProfile';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{buddyId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{searchId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{statusMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{contactCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddyProfile');
  if (defined $self->{buddyId}) {
    $xfer += $output->writeFieldBegin('buddyId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{buddyId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{searchId}) {
    $xfer += $output->writeFieldBegin('searchId', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{searchId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{statusMessage}) {
    $xfer += $output->writeFieldBegin('statusMessage', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{statusMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contactCount}) {
    $xfer += $output->writeFieldBegin('contactCount', Thrift::TType::I64, 11);
    $xfer += $output->writeI64($self->{contactCount});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package BuddySearchResult;
use base qw(Class::Accessor);
BuddySearchResult->mk_accessors( qw( mid displayName pictureStatus picturePath statusMessage businessAccount ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{displayName} = undef;
  $self->{pictureStatus} = undef;
  $self->{picturePath} = undef;
  $self->{statusMessage} = undef;
  $self->{businessAccount} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{pictureStatus}) {
      $self->{pictureStatus} = $vals->{pictureStatus};
    }
    if (defined $vals->{picturePath}) {
      $self->{picturePath} = $vals->{picturePath};
    }
    if (defined $vals->{statusMessage}) {
      $self->{statusMessage} = $vals->{statusMessage};
    }
    if (defined $vals->{businessAccount}) {
      $self->{businessAccount} = $vals->{businessAccount};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BuddySearchResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{picturePath});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{statusMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{businessAccount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BuddySearchResult');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureStatus}) {
    $xfer += $output->writeFieldBegin('pictureStatus', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{pictureStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{picturePath}) {
    $xfer += $output->writeFieldBegin('picturePath', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{picturePath});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{statusMessage}) {
    $xfer += $output->writeFieldBegin('statusMessage', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{statusMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{businessAccount}) {
    $xfer += $output->writeFieldBegin('businessAccount', Thrift::TType::BOOL, 6);
    $xfer += $output->writeBool($self->{businessAccount});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelDomain;
use base qw(Class::Accessor);
ChannelDomain->mk_accessors( qw( host removed ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{host} = undef;
  $self->{removed} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{host}) {
      $self->{host} = $vals->{host};
    }
    if (defined $vals->{removed}) {
      $self->{removed} = $vals->{removed};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelDomain';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{host});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{removed});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelDomain');
  if (defined $self->{host}) {
    $xfer += $output->writeFieldBegin('host', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{host});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{removed}) {
    $xfer += $output->writeFieldBegin('removed', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{removed});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelDomains;
use base qw(Class::Accessor);
ChannelDomains->mk_accessors( qw( channelDomains revision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelDomains} = undef;
  $self->{revision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelDomains}) {
      $self->{channelDomains} = $vals->{channelDomains};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelDomains';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size62 = 0;
          $self->{channelDomains} = [];
          my $_etype65 = 0;
          $xfer += $input->readListBegin(\$_etype65, \$_size62);
          for (my $_i66 = 0; $_i66 < $_size62; ++$_i66)
          {
            my $elem67 = undef;
            $elem67 = ChannelDomain->new();
            $xfer += $elem67->read($input);
            push(@{$self->{channelDomains}},$elem67);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelDomains');
  if (defined $self->{channelDomains}) {
    $xfer += $output->writeFieldBegin('channelDomains', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{channelDomains}}));
      {
        foreach my $iter68 (@{$self->{channelDomains}}) 
        {
          $xfer += ${iter68}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
ChannelException->mk_accessors( qw( code reason parameterMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{code} = undef;
  $self->{reason} = undef;
  $self->{parameterMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{code}) {
      $self->{code} = $vals->{code};
    }
    if (defined $vals->{reason}) {
      $self->{reason} = $vals->{reason};
    }
    if (defined $vals->{parameterMap}) {
      $self->{parameterMap} = $vals->{parameterMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{code});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{reason});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size69 = 0;
          $self->{parameterMap} = {};
          my $_ktype70 = 0;
          my $_vtype71 = 0;
          $xfer += $input->readMapBegin(\$_ktype70, \$_vtype71, \$_size69);
          for (my $_i73 = 0; $_i73 < $_size69; ++$_i73)
          {
            my $key74 = '';
            my $val75 = '';
            $xfer += $input->readString(\$key74);
            $xfer += $input->readString(\$val75);
            $self->{parameterMap}->{$key74} = $val75;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelException');
  if (defined $self->{code}) {
    $xfer += $output->writeFieldBegin('code', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{code});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reason}) {
    $xfer += $output->writeFieldBegin('reason', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{reason});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{parameterMap}) {
    $xfer += $output->writeFieldBegin('parameterMap', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{parameterMap}}));
      {
        while( my ($kiter76,$viter77) = each %{$self->{parameterMap}}) 
        {
          $xfer += $output->writeString($kiter76);
          $xfer += $output->writeString($viter77);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelInfos;
use base qw(Class::Accessor);
ChannelInfos->mk_accessors( qw( channelInfos revision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelInfos} = undef;
  $self->{revision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelInfos}) {
      $self->{channelInfos} = $vals->{channelInfos};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelInfos';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size78 = 0;
          $self->{channelInfos} = [];
          my $_etype81 = 0;
          $xfer += $input->readListBegin(\$_etype81, \$_size78);
          for (my $_i82 = 0; $_i82 < $_size78; ++$_i82)
          {
            my $elem83 = undef;
            $elem83 = ChannelInfo->new();
            $xfer += $elem83->read($input);
            push(@{$self->{channelInfos}},$elem83);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelInfos');
  if (defined $self->{channelInfos}) {
    $xfer += $output->writeFieldBegin('channelInfos', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{channelInfos}}));
      {
        foreach my $iter84 (@{$self->{channelInfos}}) 
        {
          $xfer += ${iter84}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelNotificationSetting;
use base qw(Class::Accessor);
ChannelNotificationSetting->mk_accessors( qw( channelId name notificationReceivable messageReceivable showDefault ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelId} = undef;
  $self->{name} = undef;
  $self->{notificationReceivable} = undef;
  $self->{messageReceivable} = undef;
  $self->{showDefault} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelId}) {
      $self->{channelId} = $vals->{channelId};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{notificationReceivable}) {
      $self->{notificationReceivable} = $vals->{notificationReceivable};
    }
    if (defined $vals->{messageReceivable}) {
      $self->{messageReceivable} = $vals->{messageReceivable};
    }
    if (defined $vals->{showDefault}) {
      $self->{showDefault} = $vals->{showDefault};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelNotificationSetting';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationReceivable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{messageReceivable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{showDefault});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelNotificationSetting');
  if (defined $self->{channelId}) {
    $xfer += $output->writeFieldBegin('channelId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{channelId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationReceivable}) {
    $xfer += $output->writeFieldBegin('notificationReceivable', Thrift::TType::BOOL, 3);
    $xfer += $output->writeBool($self->{notificationReceivable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageReceivable}) {
    $xfer += $output->writeFieldBegin('messageReceivable', Thrift::TType::BOOL, 4);
    $xfer += $output->writeBool($self->{messageReceivable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{showDefault}) {
    $xfer += $output->writeFieldBegin('showDefault', Thrift::TType::BOOL, 5);
    $xfer += $output->writeBool($self->{showDefault});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelSyncDatas;
use base qw(Class::Accessor);
ChannelSyncDatas->mk_accessors( qw( channelInfos channelDomains revision expires ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelInfos} = undef;
  $self->{channelDomains} = undef;
  $self->{revision} = undef;
  $self->{expires} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelInfos}) {
      $self->{channelInfos} = $vals->{channelInfos};
    }
    if (defined $vals->{channelDomains}) {
      $self->{channelDomains} = $vals->{channelDomains};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{expires}) {
      $self->{expires} = $vals->{expires};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelSyncDatas';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size85 = 0;
          $self->{channelInfos} = [];
          my $_etype88 = 0;
          $xfer += $input->readListBegin(\$_etype88, \$_size85);
          for (my $_i89 = 0; $_i89 < $_size85; ++$_i89)
          {
            my $elem90 = undef;
            $elem90 = ChannelInfo->new();
            $xfer += $elem90->read($input);
            push(@{$self->{channelInfos}},$elem90);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size91 = 0;
          $self->{channelDomains} = [];
          my $_etype94 = 0;
          $xfer += $input->readListBegin(\$_etype94, \$_size91);
          for (my $_i95 = 0; $_i95 < $_size91; ++$_i95)
          {
            my $elem96 = undef;
            $elem96 = ChannelDomain->new();
            $xfer += $elem96->read($input);
            push(@{$self->{channelDomains}},$elem96);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{expires});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelSyncDatas');
  if (defined $self->{channelInfos}) {
    $xfer += $output->writeFieldBegin('channelInfos', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{channelInfos}}));
      {
        foreach my $iter97 (@{$self->{channelInfos}}) 
        {
          $xfer += ${iter97}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{channelDomains}) {
    $xfer += $output->writeFieldBegin('channelDomains', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{channelDomains}}));
      {
        foreach my $iter98 (@{$self->{channelDomains}}) 
        {
          $xfer += ${iter98}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{expires}) {
    $xfer += $output->writeFieldBegin('expires', Thrift::TType::I64, 4);
    $xfer += $output->writeI64($self->{expires});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ChannelToken;
use base qw(Class::Accessor);
ChannelToken->mk_accessors( qw( token obsToken expiration refreshToken channelAccessToken ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{obsToken} = undef;
  $self->{expiration} = undef;
  $self->{refreshToken} = undef;
  $self->{channelAccessToken} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{obsToken}) {
      $self->{obsToken} = $vals->{obsToken};
    }
    if (defined $vals->{expiration}) {
      $self->{expiration} = $vals->{expiration};
    }
    if (defined $vals->{refreshToken}) {
      $self->{refreshToken} = $vals->{refreshToken};
    }
    if (defined $vals->{channelAccessToken}) {
      $self->{channelAccessToken} = $vals->{channelAccessToken};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ChannelToken';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{obsToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{expiration});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{refreshToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelAccessToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ChannelToken');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{obsToken}) {
    $xfer += $output->writeFieldBegin('obsToken', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{obsToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{expiration}) {
    $xfer += $output->writeFieldBegin('expiration', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{expiration});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{refreshToken}) {
    $xfer += $output->writeFieldBegin('refreshToken', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{refreshToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{channelAccessToken}) {
    $xfer += $output->writeFieldBegin('channelAccessToken', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{channelAccessToken});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Coin;
use base qw(Class::Accessor);
Coin->mk_accessors( qw( freeCoinBalance payedCoinBalance totalCoinBalance rewardCoinBalance ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{freeCoinBalance} = undef;
  $self->{payedCoinBalance} = undef;
  $self->{totalCoinBalance} = undef;
  $self->{rewardCoinBalance} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{freeCoinBalance}) {
      $self->{freeCoinBalance} = $vals->{freeCoinBalance};
    }
    if (defined $vals->{payedCoinBalance}) {
      $self->{payedCoinBalance} = $vals->{payedCoinBalance};
    }
    if (defined $vals->{totalCoinBalance}) {
      $self->{totalCoinBalance} = $vals->{totalCoinBalance};
    }
    if (defined $vals->{rewardCoinBalance}) {
      $self->{rewardCoinBalance} = $vals->{rewardCoinBalance};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Coin';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{freeCoinBalance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{payedCoinBalance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{totalCoinBalance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{rewardCoinBalance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Coin');
  if (defined $self->{freeCoinBalance}) {
    $xfer += $output->writeFieldBegin('freeCoinBalance', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{freeCoinBalance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{payedCoinBalance}) {
    $xfer += $output->writeFieldBegin('payedCoinBalance', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{payedCoinBalance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{totalCoinBalance}) {
    $xfer += $output->writeFieldBegin('totalCoinBalance', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{totalCoinBalance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{rewardCoinBalance}) {
    $xfer += $output->writeFieldBegin('rewardCoinBalance', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{rewardCoinBalance});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinPayLoad;
use base qw(Class::Accessor);
CoinPayLoad->mk_accessors( qw( payCoin freeCoin type rewardCoin ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{payCoin} = undef;
  $self->{freeCoin} = undef;
  $self->{type} = undef;
  $self->{rewardCoin} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{payCoin}) {
      $self->{payCoin} = $vals->{payCoin};
    }
    if (defined $vals->{freeCoin}) {
      $self->{freeCoin} = $vals->{freeCoin};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{rewardCoin}) {
      $self->{rewardCoin} = $vals->{rewardCoin};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinPayLoad';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{payCoin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{freeCoin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{rewardCoin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinPayLoad');
  if (defined $self->{payCoin}) {
    $xfer += $output->writeFieldBegin('payCoin', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{payCoin});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{freeCoin}) {
    $xfer += $output->writeFieldBegin('freeCoin', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{freeCoin});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{rewardCoin}) {
    $xfer += $output->writeFieldBegin('rewardCoin', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{rewardCoin});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinHistory;
use base qw(Class::Accessor);
CoinHistory->mk_accessors( qw( payDate coinBalance coin price title refund paySeq currency currencySign displayPrice payload channelId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{payDate} = undef;
  $self->{coinBalance} = undef;
  $self->{coin} = undef;
  $self->{price} = undef;
  $self->{title} = undef;
  $self->{refund} = undef;
  $self->{paySeq} = undef;
  $self->{currency} = undef;
  $self->{currencySign} = undef;
  $self->{displayPrice} = undef;
  $self->{payload} = undef;
  $self->{channelId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{payDate}) {
      $self->{payDate} = $vals->{payDate};
    }
    if (defined $vals->{coinBalance}) {
      $self->{coinBalance} = $vals->{coinBalance};
    }
    if (defined $vals->{coin}) {
      $self->{coin} = $vals->{coin};
    }
    if (defined $vals->{price}) {
      $self->{price} = $vals->{price};
    }
    if (defined $vals->{title}) {
      $self->{title} = $vals->{title};
    }
    if (defined $vals->{refund}) {
      $self->{refund} = $vals->{refund};
    }
    if (defined $vals->{paySeq}) {
      $self->{paySeq} = $vals->{paySeq};
    }
    if (defined $vals->{currency}) {
      $self->{currency} = $vals->{currency};
    }
    if (defined $vals->{currencySign}) {
      $self->{currencySign} = $vals->{currencySign};
    }
    if (defined $vals->{displayPrice}) {
      $self->{displayPrice} = $vals->{displayPrice};
    }
    if (defined $vals->{payload}) {
      $self->{payload} = $vals->{payload};
    }
    if (defined $vals->{channelId}) {
      $self->{channelId} = $vals->{channelId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinHistory';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{payDate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{coinBalance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{coin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{price});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{title});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{refund});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{paySeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currency});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currencySign});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayPrice});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{payload} = CoinPayLoad->new();
        $xfer += $self->{payload}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinHistory');
  if (defined $self->{payDate}) {
    $xfer += $output->writeFieldBegin('payDate', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{payDate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{coinBalance}) {
    $xfer += $output->writeFieldBegin('coinBalance', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{coinBalance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{coin}) {
    $xfer += $output->writeFieldBegin('coin', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{coin});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{price}) {
    $xfer += $output->writeFieldBegin('price', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{price});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{title}) {
    $xfer += $output->writeFieldBegin('title', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{title});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{refund}) {
    $xfer += $output->writeFieldBegin('refund', Thrift::TType::BOOL, 6);
    $xfer += $output->writeBool($self->{refund});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{paySeq}) {
    $xfer += $output->writeFieldBegin('paySeq', Thrift::TType::STRING, 7);
    $xfer += $output->writeString($self->{paySeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currency}) {
    $xfer += $output->writeFieldBegin('currency', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{currency});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currencySign}) {
    $xfer += $output->writeFieldBegin('currencySign', Thrift::TType::STRING, 9);
    $xfer += $output->writeString($self->{currencySign});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayPrice}) {
    $xfer += $output->writeFieldBegin('displayPrice', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{displayPrice});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{payload}) {
    $xfer += $output->writeFieldBegin('payload', Thrift::TType::STRUCT, 11);
    $xfer += $self->{payload}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{channelId}) {
    $xfer += $output->writeFieldBegin('channelId', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{channelId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinHistoryCondition;
use base qw(Class::Accessor);
CoinHistoryCondition->mk_accessors( qw( start size language eddt appStoreCode ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{start} = undef;
  $self->{size} = undef;
  $self->{language} = undef;
  $self->{eddt} = undef;
  $self->{appStoreCode} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{start}) {
      $self->{start} = $vals->{start};
    }
    if (defined $vals->{size}) {
      $self->{size} = $vals->{size};
    }
    if (defined $vals->{language}) {
      $self->{language} = $vals->{language};
    }
    if (defined $vals->{eddt}) {
      $self->{eddt} = $vals->{eddt};
    }
    if (defined $vals->{appStoreCode}) {
      $self->{appStoreCode} = $vals->{appStoreCode};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinHistoryCondition';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{start});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{size});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{language});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{eddt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{appStoreCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinHistoryCondition');
  if (defined $self->{start}) {
    $xfer += $output->writeFieldBegin('start', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{start});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{size}) {
    $xfer += $output->writeFieldBegin('size', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{size});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{language}) {
    $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{language});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{eddt}) {
    $xfer += $output->writeFieldBegin('eddt', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{eddt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{appStoreCode}) {
    $xfer += $output->writeFieldBegin('appStoreCode', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{appStoreCode});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinHistoryResult;
use base qw(Class::Accessor);
CoinHistoryResult->mk_accessors( qw( historys balance hasNext ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{historys} = undef;
  $self->{balance} = undef;
  $self->{hasNext} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{historys}) {
      $self->{historys} = $vals->{historys};
    }
    if (defined $vals->{balance}) {
      $self->{balance} = $vals->{balance};
    }
    if (defined $vals->{hasNext}) {
      $self->{hasNext} = $vals->{hasNext};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinHistoryResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size99 = 0;
          $self->{historys} = [];
          my $_etype102 = 0;
          $xfer += $input->readListBegin(\$_etype102, \$_size99);
          for (my $_i103 = 0; $_i103 < $_size99; ++$_i103)
          {
            my $elem104 = undef;
            $elem104 = CoinHistory->new();
            $xfer += $elem104->read($input);
            push(@{$self->{historys}},$elem104);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{balance} = Coin->new();
        $xfer += $self->{balance}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{hasNext});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinHistoryResult');
  if (defined $self->{historys}) {
    $xfer += $output->writeFieldBegin('historys', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{historys}}));
      {
        foreach my $iter105 (@{$self->{historys}}) 
        {
          $xfer += ${iter105}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{balance}) {
    $xfer += $output->writeFieldBegin('balance', Thrift::TType::STRUCT, 2);
    $xfer += $self->{balance}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{hasNext}) {
    $xfer += $output->writeFieldBegin('hasNext', Thrift::TType::BOOL, 3);
    $xfer += $output->writeBool($self->{hasNext});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinProductItem;
use base qw(Class::Accessor);
CoinProductItem->mk_accessors( qw( itemId coin freeCoin currency price displayPrice name desc ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{itemId} = undef;
  $self->{coin} = undef;
  $self->{freeCoin} = undef;
  $self->{currency} = undef;
  $self->{price} = undef;
  $self->{displayPrice} = undef;
  $self->{name} = undef;
  $self->{desc} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{itemId}) {
      $self->{itemId} = $vals->{itemId};
    }
    if (defined $vals->{coin}) {
      $self->{coin} = $vals->{coin};
    }
    if (defined $vals->{freeCoin}) {
      $self->{freeCoin} = $vals->{freeCoin};
    }
    if (defined $vals->{currency}) {
      $self->{currency} = $vals->{currency};
    }
    if (defined $vals->{price}) {
      $self->{price} = $vals->{price};
    }
    if (defined $vals->{displayPrice}) {
      $self->{displayPrice} = $vals->{displayPrice};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{desc}) {
      $self->{desc} = $vals->{desc};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinProductItem';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{itemId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{coin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{freeCoin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currency});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{price});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayPrice});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{desc});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinProductItem');
  if (defined $self->{itemId}) {
    $xfer += $output->writeFieldBegin('itemId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{itemId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{coin}) {
    $xfer += $output->writeFieldBegin('coin', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{coin});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{freeCoin}) {
    $xfer += $output->writeFieldBegin('freeCoin', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{freeCoin});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currency}) {
    $xfer += $output->writeFieldBegin('currency', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{currency});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{price}) {
    $xfer += $output->writeFieldBegin('price', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{price});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayPrice}) {
    $xfer += $output->writeFieldBegin('displayPrice', Thrift::TType::STRING, 7);
    $xfer += $output->writeString($self->{displayPrice});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{desc}) {
    $xfer += $output->writeFieldBegin('desc', Thrift::TType::STRING, 9);
    $xfer += $output->writeString($self->{desc});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinPurchaseConfirm;
use base qw(Class::Accessor);
CoinPurchaseConfirm->mk_accessors( qw( orderId appStoreCode receipt signature seller requestType ignoreReceipt ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{orderId} = undef;
  $self->{appStoreCode} = undef;
  $self->{receipt} = undef;
  $self->{signature} = undef;
  $self->{seller} = undef;
  $self->{requestType} = undef;
  $self->{ignoreReceipt} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{orderId}) {
      $self->{orderId} = $vals->{orderId};
    }
    if (defined $vals->{appStoreCode}) {
      $self->{appStoreCode} = $vals->{appStoreCode};
    }
    if (defined $vals->{receipt}) {
      $self->{receipt} = $vals->{receipt};
    }
    if (defined $vals->{signature}) {
      $self->{signature} = $vals->{signature};
    }
    if (defined $vals->{seller}) {
      $self->{seller} = $vals->{seller};
    }
    if (defined $vals->{requestType}) {
      $self->{requestType} = $vals->{requestType};
    }
    if (defined $vals->{ignoreReceipt}) {
      $self->{ignoreReceipt} = $vals->{ignoreReceipt};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinPurchaseConfirm';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{orderId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{appStoreCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{receipt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{signature});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{seller});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{requestType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{ignoreReceipt});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinPurchaseConfirm');
  if (defined $self->{orderId}) {
    $xfer += $output->writeFieldBegin('orderId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{orderId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{appStoreCode}) {
    $xfer += $output->writeFieldBegin('appStoreCode', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{appStoreCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{receipt}) {
    $xfer += $output->writeFieldBegin('receipt', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{receipt});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{signature}) {
    $xfer += $output->writeFieldBegin('signature', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{signature});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{seller}) {
    $xfer += $output->writeFieldBegin('seller', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{seller});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{requestType}) {
    $xfer += $output->writeFieldBegin('requestType', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{requestType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ignoreReceipt}) {
    $xfer += $output->writeFieldBegin('ignoreReceipt', Thrift::TType::BOOL, 7);
    $xfer += $output->writeBool($self->{ignoreReceipt});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinPurchaseReservation;
use base qw(Class::Accessor);
CoinPurchaseReservation->mk_accessors( qw( productId country currency price appStoreCode language pgCode redirectUrl ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{productId} = undef;
  $self->{country} = undef;
  $self->{currency} = undef;
  $self->{price} = undef;
  $self->{appStoreCode} = undef;
  $self->{language} = undef;
  $self->{pgCode} = undef;
  $self->{redirectUrl} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{productId}) {
      $self->{productId} = $vals->{productId};
    }
    if (defined $vals->{country}) {
      $self->{country} = $vals->{country};
    }
    if (defined $vals->{currency}) {
      $self->{currency} = $vals->{currency};
    }
    if (defined $vals->{price}) {
      $self->{price} = $vals->{price};
    }
    if (defined $vals->{appStoreCode}) {
      $self->{appStoreCode} = $vals->{appStoreCode};
    }
    if (defined $vals->{language}) {
      $self->{language} = $vals->{language};
    }
    if (defined $vals->{pgCode}) {
      $self->{pgCode} = $vals->{pgCode};
    }
    if (defined $vals->{redirectUrl}) {
      $self->{redirectUrl} = $vals->{redirectUrl};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinPurchaseReservation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{productId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{country});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currency});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{price});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{appStoreCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{language});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{pgCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{redirectUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinPurchaseReservation');
  if (defined $self->{productId}) {
    $xfer += $output->writeFieldBegin('productId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{productId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{country}) {
    $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{country});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currency}) {
    $xfer += $output->writeFieldBegin('currency', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{currency});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{price}) {
    $xfer += $output->writeFieldBegin('price', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{price});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{appStoreCode}) {
    $xfer += $output->writeFieldBegin('appStoreCode', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{appStoreCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{language}) {
    $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{language});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pgCode}) {
    $xfer += $output->writeFieldBegin('pgCode', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{pgCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{redirectUrl}) {
    $xfer += $output->writeFieldBegin('redirectUrl', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{redirectUrl});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinUseReservationItem;
use base qw(Class::Accessor);
CoinUseReservationItem->mk_accessors( qw( itemId itemName amount ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{itemId} = undef;
  $self->{itemName} = undef;
  $self->{amount} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{itemId}) {
      $self->{itemId} = $vals->{itemId};
    }
    if (defined $vals->{itemName}) {
      $self->{itemName} = $vals->{itemName};
    }
    if (defined $vals->{amount}) {
      $self->{amount} = $vals->{amount};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinUseReservationItem';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{itemId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{itemName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{amount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinUseReservationItem');
  if (defined $self->{itemId}) {
    $xfer += $output->writeFieldBegin('itemId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{itemId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{itemName}) {
    $xfer += $output->writeFieldBegin('itemName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{itemName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{amount}) {
    $xfer += $output->writeFieldBegin('amount', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{amount});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CoinUseReservation;
use base qw(Class::Accessor);
CoinUseReservation->mk_accessors( qw( channelId shopOrderId appStoreCode items country ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelId} = undef;
  $self->{shopOrderId} = undef;
  $self->{appStoreCode} = undef;
  $self->{items} = undef;
  $self->{country} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelId}) {
      $self->{channelId} = $vals->{channelId};
    }
    if (defined $vals->{shopOrderId}) {
      $self->{shopOrderId} = $vals->{shopOrderId};
    }
    if (defined $vals->{appStoreCode}) {
      $self->{appStoreCode} = $vals->{appStoreCode};
    }
    if (defined $vals->{items}) {
      $self->{items} = $vals->{items};
    }
    if (defined $vals->{country}) {
      $self->{country} = $vals->{country};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CoinUseReservation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{shopOrderId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{appStoreCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size106 = 0;
          $self->{items} = [];
          my $_etype109 = 0;
          $xfer += $input->readListBegin(\$_etype109, \$_size106);
          for (my $_i110 = 0; $_i110 < $_size106; ++$_i110)
          {
            my $elem111 = undef;
            $elem111 = CoinUseReservationItem->new();
            $xfer += $elem111->read($input);
            push(@{$self->{items}},$elem111);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{country});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CoinUseReservation');
  if (defined $self->{channelId}) {
    $xfer += $output->writeFieldBegin('channelId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{channelId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{shopOrderId}) {
    $xfer += $output->writeFieldBegin('shopOrderId', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{shopOrderId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{appStoreCode}) {
    $xfer += $output->writeFieldBegin('appStoreCode', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{appStoreCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{items}) {
    $xfer += $output->writeFieldBegin('items', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{items}}));
      {
        foreach my $iter112 (@{$self->{items}}) 
        {
          $xfer += ${iter112}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{country}) {
    $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{country});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CompactContact;
use base qw(Class::Accessor);
CompactContact->mk_accessors( qw( mid createdTime modifiedTime status settings displayNameOverridden ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{createdTime} = undef;
  $self->{modifiedTime} = undef;
  $self->{status} = undef;
  $self->{settings} = undef;
  $self->{displayNameOverridden} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{modifiedTime}) {
      $self->{modifiedTime} = $vals->{modifiedTime};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
    if (defined $vals->{settings}) {
      $self->{settings} = $vals->{settings};
    }
    if (defined $vals->{displayNameOverridden}) {
      $self->{displayNameOverridden} = $vals->{displayNameOverridden};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CompactContact';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{modifiedTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{status});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{settings});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayNameOverridden});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CompactContact');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{modifiedTime}) {
    $xfer += $output->writeFieldBegin('modifiedTime', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{modifiedTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{status});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{settings}) {
    $xfer += $output->writeFieldBegin('settings', Thrift::TType::I64, 5);
    $xfer += $output->writeI64($self->{settings});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayNameOverridden}) {
    $xfer += $output->writeFieldBegin('displayNameOverridden', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{displayNameOverridden});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ContactModification;
use base qw(Class::Accessor);
ContactModification->mk_accessors( qw( type luid phones emails userids ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{type} = undef;
  $self->{luid} = undef;
  $self->{phones} = undef;
  $self->{emails} = undef;
  $self->{userids} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{luid}) {
      $self->{luid} = $vals->{luid};
    }
    if (defined $vals->{phones}) {
      $self->{phones} = $vals->{phones};
    }
    if (defined $vals->{emails}) {
      $self->{emails} = $vals->{emails};
    }
    if (defined $vals->{userids}) {
      $self->{userids} = $vals->{userids};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ContactModification';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{luid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size113 = 0;
          $self->{phones} = [];
          my $_etype116 = 0;
          $xfer += $input->readListBegin(\$_etype116, \$_size113);
          for (my $_i117 = 0; $_i117 < $_size113; ++$_i117)
          {
            my $elem118 = undef;
            $xfer += $input->readString(\$elem118);
            push(@{$self->{phones}},$elem118);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size119 = 0;
          $self->{emails} = [];
          my $_etype122 = 0;
          $xfer += $input->readListBegin(\$_etype122, \$_size119);
          for (my $_i123 = 0; $_i123 < $_size119; ++$_i123)
          {
            my $elem124 = undef;
            $xfer += $input->readString(\$elem124);
            push(@{$self->{emails}},$elem124);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size125 = 0;
          $self->{userids} = [];
          my $_etype128 = 0;
          $xfer += $input->readListBegin(\$_etype128, \$_size125);
          for (my $_i129 = 0; $_i129 < $_size125; ++$_i129)
          {
            my $elem130 = undef;
            $xfer += $input->readString(\$elem130);
            push(@{$self->{userids}},$elem130);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ContactModification');
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{luid}) {
    $xfer += $output->writeFieldBegin('luid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{luid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phones}) {
    $xfer += $output->writeFieldBegin('phones', Thrift::TType::LIST, 11);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{phones}}));
      {
        foreach my $iter131 (@{$self->{phones}}) 
        {
          $xfer += $output->writeString($iter131);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{emails}) {
    $xfer += $output->writeFieldBegin('emails', Thrift::TType::LIST, 12);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{emails}}));
      {
        foreach my $iter132 (@{$self->{emails}}) 
        {
          $xfer += $output->writeString($iter132);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{userids}) {
    $xfer += $output->writeFieldBegin('userids', Thrift::TType::LIST, 13);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{userids}}));
      {
        foreach my $iter133 (@{$self->{userids}}) 
        {
          $xfer += $output->writeString($iter133);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ContactRegistration;
use base qw(Class::Accessor);
ContactRegistration->mk_accessors( qw( contact luid contactType contactKey ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{contact} = undef;
  $self->{luid} = undef;
  $self->{contactType} = undef;
  $self->{contactKey} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{contact}) {
      $self->{contact} = $vals->{contact};
    }
    if (defined $vals->{luid}) {
      $self->{luid} = $vals->{luid};
    }
    if (defined $vals->{contactType}) {
      $self->{contactType} = $vals->{contactType};
    }
    if (defined $vals->{contactKey}) {
      $self->{contactKey} = $vals->{contactKey};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ContactRegistration';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{contact} = Contact->new();
        $xfer += $self->{contact}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{luid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{contactType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{contactKey});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ContactRegistration');
  if (defined $self->{contact}) {
    $xfer += $output->writeFieldBegin('contact', Thrift::TType::STRUCT, 1);
    $xfer += $self->{contact}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{luid}) {
    $xfer += $output->writeFieldBegin('luid', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{luid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contactType}) {
    $xfer += $output->writeFieldBegin('contactType', Thrift::TType::I32, 11);
    $xfer += $output->writeI32($self->{contactType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contactKey}) {
    $xfer += $output->writeFieldBegin('contactKey', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{contactKey});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ContactReport;
use base qw(Class::Accessor);
ContactReport->mk_accessors( qw( mid exists contact ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{exists} = undef;
  $self->{contact} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{exists}) {
      $self->{exists} = $vals->{exists};
    }
    if (defined $vals->{contact}) {
      $self->{contact} = $vals->{contact};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ContactReport';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{exists});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{contact} = Contact->new();
        $xfer += $self->{contact}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ContactReport');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{exists}) {
    $xfer += $output->writeFieldBegin('exists', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{exists});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contact}) {
    $xfer += $output->writeFieldBegin('contact', Thrift::TType::STRUCT, 3);
    $xfer += $self->{contact}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ContactReportResult;
use base qw(Class::Accessor);
ContactReportResult->mk_accessors( qw( mid exists ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{exists} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{exists}) {
      $self->{exists} = $vals->{exists};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ContactReportResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{exists});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ContactReportResult');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{exists}) {
    $xfer += $output->writeFieldBegin('exists', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{exists});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DeviceInfo;
use base qw(Class::Accessor);
DeviceInfo->mk_accessors( qw( deviceName systemName systemVersion model carrierCode carrierName applicationType ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{deviceName} = undef;
  $self->{systemName} = undef;
  $self->{systemVersion} = undef;
  $self->{model} = undef;
  $self->{carrierCode} = undef;
  $self->{carrierName} = undef;
  $self->{applicationType} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{deviceName}) {
      $self->{deviceName} = $vals->{deviceName};
    }
    if (defined $vals->{systemName}) {
      $self->{systemName} = $vals->{systemName};
    }
    if (defined $vals->{systemVersion}) {
      $self->{systemVersion} = $vals->{systemVersion};
    }
    if (defined $vals->{model}) {
      $self->{model} = $vals->{model};
    }
    if (defined $vals->{carrierCode}) {
      $self->{carrierCode} = $vals->{carrierCode};
    }
    if (defined $vals->{carrierName}) {
      $self->{carrierName} = $vals->{carrierName};
    }
    if (defined $vals->{applicationType}) {
      $self->{applicationType} = $vals->{applicationType};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'DeviceInfo';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{deviceName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{systemName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{systemVersion});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{model});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{carrierCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{carrierName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{applicationType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('DeviceInfo');
  if (defined $self->{deviceName}) {
    $xfer += $output->writeFieldBegin('deviceName', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{deviceName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{systemName}) {
    $xfer += $output->writeFieldBegin('systemName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{systemName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{systemVersion}) {
    $xfer += $output->writeFieldBegin('systemVersion', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{systemVersion});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{model}) {
    $xfer += $output->writeFieldBegin('model', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{model});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{carrierCode}) {
    $xfer += $output->writeFieldBegin('carrierCode', Thrift::TType::I32, 10);
    $xfer += $output->writeI32($self->{carrierCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{carrierName}) {
    $xfer += $output->writeFieldBegin('carrierName', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{carrierName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{applicationType}) {
    $xfer += $output->writeFieldBegin('applicationType', Thrift::TType::I32, 20);
    $xfer += $output->writeI32($self->{applicationType});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package EmailConfirmation;
use base qw(Class::Accessor);
EmailConfirmation->mk_accessors( qw( usePasswordSet email password ignoreDuplication ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{usePasswordSet} = undef;
  $self->{email} = undef;
  $self->{password} = undef;
  $self->{ignoreDuplication} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{usePasswordSet}) {
      $self->{usePasswordSet} = $vals->{usePasswordSet};
    }
    if (defined $vals->{email}) {
      $self->{email} = $vals->{email};
    }
    if (defined $vals->{password}) {
      $self->{password} = $vals->{password};
    }
    if (defined $vals->{ignoreDuplication}) {
      $self->{ignoreDuplication} = $vals->{ignoreDuplication};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'EmailConfirmation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{usePasswordSet});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{email});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{password});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{ignoreDuplication});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('EmailConfirmation');
  if (defined $self->{usePasswordSet}) {
    $xfer += $output->writeFieldBegin('usePasswordSet', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{usePasswordSet});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{email}) {
    $xfer += $output->writeFieldBegin('email', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{email});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{password}) {
    $xfer += $output->writeFieldBegin('password', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{password});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ignoreDuplication}) {
    $xfer += $output->writeFieldBegin('ignoreDuplication', Thrift::TType::BOOL, 4);
    $xfer += $output->writeBool($self->{ignoreDuplication});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package EmailConfirmationSession;
use base qw(Class::Accessor);
EmailConfirmationSession->mk_accessors( qw( emailConfirmationType verifier targetEmail ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{emailConfirmationType} = undef;
  $self->{verifier} = undef;
  $self->{targetEmail} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{emailConfirmationType}) {
      $self->{emailConfirmationType} = $vals->{emailConfirmationType};
    }
    if (defined $vals->{verifier}) {
      $self->{verifier} = $vals->{verifier};
    }
    if (defined $vals->{targetEmail}) {
      $self->{targetEmail} = $vals->{targetEmail};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'EmailConfirmationSession';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{emailConfirmationType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{verifier});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{targetEmail});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('EmailConfirmationSession');
  if (defined $self->{emailConfirmationType}) {
    $xfer += $output->writeFieldBegin('emailConfirmationType', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{emailConfirmationType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{verifier}) {
    $xfer += $output->writeFieldBegin('verifier', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{verifier});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{targetEmail}) {
    $xfer += $output->writeFieldBegin('targetEmail', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{targetEmail});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package FriendChannelMatrix;
use base qw(Class::Accessor);
FriendChannelMatrix->mk_accessors( qw( channelId representMid count ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{channelId} = undef;
  $self->{representMid} = undef;
  $self->{count} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{channelId}) {
      $self->{channelId} = $vals->{channelId};
    }
    if (defined $vals->{representMid}) {
      $self->{representMid} = $vals->{representMid};
    }
    if (defined $vals->{count}) {
      $self->{count} = $vals->{count};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'FriendChannelMatrix';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{representMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{count});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('FriendChannelMatrix');
  if (defined $self->{channelId}) {
    $xfer += $output->writeFieldBegin('channelId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{channelId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{representMid}) {
    $xfer += $output->writeFieldBegin('representMid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{representMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{count}) {
    $xfer += $output->writeFieldBegin('count', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{count});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package FriendChannelMatricesResponse;
use base qw(Class::Accessor);
FriendChannelMatricesResponse->mk_accessors( qw( expires matrices ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{expires} = undef;
  $self->{matrices} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{expires}) {
      $self->{expires} = $vals->{expires};
    }
    if (defined $vals->{matrices}) {
      $self->{matrices} = $vals->{matrices};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'FriendChannelMatricesResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{expires});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size134 = 0;
          $self->{matrices} = [];
          my $_etype137 = 0;
          $xfer += $input->readListBegin(\$_etype137, \$_size134);
          for (my $_i138 = 0; $_i138 < $_size134; ++$_i138)
          {
            my $elem139 = undef;
            $elem139 = FriendChannelMatrix->new();
            $xfer += $elem139->read($input);
            push(@{$self->{matrices}},$elem139);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('FriendChannelMatricesResponse');
  if (defined $self->{expires}) {
    $xfer += $output->writeFieldBegin('expires', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{expires});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{matrices}) {
    $xfer += $output->writeFieldBegin('matrices', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{matrices}}));
      {
        foreach my $iter140 (@{$self->{matrices}}) 
        {
          $xfer += ${iter140}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Geolocation;
use base qw(Class::Accessor);
Geolocation->mk_accessors( qw( longitude latitude ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{longitude} = undef;
  $self->{latitude} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{longitude}) {
      $self->{longitude} = $vals->{longitude};
    }
    if (defined $vals->{latitude}) {
      $self->{latitude} = $vals->{latitude};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Geolocation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{longitude});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{latitude});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Geolocation');
  if (defined $self->{longitude}) {
    $xfer += $output->writeFieldBegin('longitude', Thrift::TType::DOUBLE, 1);
    $xfer += $output->writeDouble($self->{longitude});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{latitude}) {
    $xfer += $output->writeFieldBegin('latitude', Thrift::TType::DOUBLE, 2);
    $xfer += $output->writeDouble($self->{latitude});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package NotificationTarget;
use base qw(Class::Accessor);
NotificationTarget->mk_accessors( qw( applicationType applicationVersion region ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{applicationType} = undef;
  $self->{applicationVersion} = undef;
  $self->{region} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{applicationType}) {
      $self->{applicationType} = $vals->{applicationType};
    }
    if (defined $vals->{applicationVersion}) {
      $self->{applicationVersion} = $vals->{applicationVersion};
    }
    if (defined $vals->{region}) {
      $self->{region} = $vals->{region};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'NotificationTarget';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{applicationType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{applicationVersion});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{region});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('NotificationTarget');
  if (defined $self->{applicationType}) {
    $xfer += $output->writeFieldBegin('applicationType', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{applicationType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{applicationVersion}) {
    $xfer += $output->writeFieldBegin('applicationVersion', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{applicationVersion});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{region}) {
    $xfer += $output->writeFieldBegin('region', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{region});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GlobalEvent;
use base qw(Class::Accessor);
GlobalEvent->mk_accessors( qw( key targets createdTime data maxDelay ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{key} = undef;
  $self->{targets} = undef;
  $self->{createdTime} = undef;
  $self->{data} = undef;
  $self->{maxDelay} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{key}) {
      $self->{key} = $vals->{key};
    }
    if (defined $vals->{targets}) {
      $self->{targets} = $vals->{targets};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{data}) {
      $self->{data} = $vals->{data};
    }
    if (defined $vals->{maxDelay}) {
      $self->{maxDelay} = $vals->{maxDelay};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'GlobalEvent';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{key});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size141 = 0;
          $self->{targets} = [];
          my $_etype144 = 0;
          $xfer += $input->readListBegin(\$_etype144, \$_size141);
          for (my $_i145 = 0; $_i145 < $_size141; ++$_i145)
          {
            my $elem146 = undef;
            $elem146 = NotificationTarget->new();
            $xfer += $elem146->read($input);
            push(@{$self->{targets}},$elem146);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{data});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{maxDelay});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GlobalEvent');
  if (defined $self->{key}) {
    $xfer += $output->writeFieldBegin('key', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{key});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{targets}) {
    $xfer += $output->writeFieldBegin('targets', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{targets}}));
      {
        foreach my $iter147 (@{$self->{targets}}) 
        {
          $xfer += ${iter147}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{data}) {
    $xfer += $output->writeFieldBegin('data', Thrift::TType::I64, 4);
    $xfer += $output->writeI64($self->{data});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{maxDelay}) {
    $xfer += $output->writeFieldBegin('maxDelay', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{maxDelay});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Group;
use base qw(Class::Accessor);
Group->mk_accessors( qw( id createdTime name pictureStatus members creator invitee notificationDisabled ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{createdTime} = undef;
  $self->{name} = undef;
  $self->{pictureStatus} = undef;
  $self->{members} = undef;
  $self->{creator} = undef;
  $self->{invitee} = undef;
  $self->{notificationDisabled} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{pictureStatus}) {
      $self->{pictureStatus} = $vals->{pictureStatus};
    }
    if (defined $vals->{members}) {
      $self->{members} = $vals->{members};
    }
    if (defined $vals->{creator}) {
      $self->{creator} = $vals->{creator};
    }
    if (defined $vals->{invitee}) {
      $self->{invitee} = $vals->{invitee};
    }
    if (defined $vals->{notificationDisabled}) {
      $self->{notificationDisabled} = $vals->{notificationDisabled};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Group';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size148 = 0;
          $self->{members} = [];
          my $_etype151 = 0;
          $xfer += $input->readListBegin(\$_etype151, \$_size148);
          for (my $_i152 = 0; $_i152 < $_size148; ++$_i152)
          {
            my $elem153 = undef;
            $elem153 = Contact->new();
            $xfer += $elem153->read($input);
            push(@{$self->{members}},$elem153);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{creator} = Contact->new();
        $xfer += $self->{creator}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size154 = 0;
          $self->{invitee} = [];
          my $_etype157 = 0;
          $xfer += $input->readListBegin(\$_etype157, \$_size154);
          for (my $_i158 = 0; $_i158 < $_size154; ++$_i158)
          {
            my $elem159 = undef;
            $elem159 = Contact->new();
            $xfer += $elem159->read($input);
            push(@{$self->{invitee}},$elem159);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^31$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationDisabled});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Group');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureStatus}) {
    $xfer += $output->writeFieldBegin('pictureStatus', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{pictureStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{members}) {
    $xfer += $output->writeFieldBegin('members', Thrift::TType::LIST, 20);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{members}}));
      {
        foreach my $iter160 (@{$self->{members}}) 
        {
          $xfer += ${iter160}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{creator}) {
    $xfer += $output->writeFieldBegin('creator', Thrift::TType::STRUCT, 21);
    $xfer += $self->{creator}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{invitee}) {
    $xfer += $output->writeFieldBegin('invitee', Thrift::TType::LIST, 22);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{invitee}}));
      {
        foreach my $iter161 (@{$self->{invitee}}) 
        {
          $xfer += ${iter161}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationDisabled}) {
    $xfer += $output->writeFieldBegin('notificationDisabled', Thrift::TType::BOOL, 31);
    $xfer += $output->writeBool($self->{notificationDisabled});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package IdentityCredential;
use base qw(Class::Accessor);
IdentityCredential->mk_accessors( qw( provider identifier password ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{provider} = undef;
  $self->{identifier} = undef;
  $self->{password} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{provider}) {
      $self->{provider} = $vals->{provider};
    }
    if (defined $vals->{identifier}) {
      $self->{identifier} = $vals->{identifier};
    }
    if (defined $vals->{password}) {
      $self->{password} = $vals->{password};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'IdentityCredential';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{provider});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{identifier});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{password});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('IdentityCredential');
  if (defined $self->{provider}) {
    $xfer += $output->writeFieldBegin('provider', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{provider});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{identifier}) {
    $xfer += $output->writeFieldBegin('identifier', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{identifier});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{password}) {
    $xfer += $output->writeFieldBegin('password', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{password});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package LastReadMessageId;
use base qw(Class::Accessor);
LastReadMessageId->mk_accessors( qw( mid lastReadMessageId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{lastReadMessageId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{lastReadMessageId}) {
      $self->{lastReadMessageId} = $vals->{lastReadMessageId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'LastReadMessageId';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{lastReadMessageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LastReadMessageId');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastReadMessageId}) {
    $xfer += $output->writeFieldBegin('lastReadMessageId', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{lastReadMessageId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package LastReadMessageIds;
use base qw(Class::Accessor);
LastReadMessageIds->mk_accessors( qw( chatId lastReadMessageIds ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{chatId} = undef;
  $self->{lastReadMessageIds} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{chatId}) {
      $self->{chatId} = $vals->{chatId};
    }
    if (defined $vals->{lastReadMessageIds}) {
      $self->{lastReadMessageIds} = $vals->{lastReadMessageIds};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'LastReadMessageIds';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{chatId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size162 = 0;
          $self->{lastReadMessageIds} = [];
          my $_etype165 = 0;
          $xfer += $input->readListBegin(\$_etype165, \$_size162);
          for (my $_i166 = 0; $_i166 < $_size162; ++$_i166)
          {
            my $elem167 = undef;
            $elem167 = LastReadMessageId->new();
            $xfer += $elem167->read($input);
            push(@{$self->{lastReadMessageIds}},$elem167);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LastReadMessageIds');
  if (defined $self->{chatId}) {
    $xfer += $output->writeFieldBegin('chatId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{chatId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastReadMessageIds}) {
    $xfer += $output->writeFieldBegin('lastReadMessageIds', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{lastReadMessageIds}}));
      {
        foreach my $iter168 (@{$self->{lastReadMessageIds}}) 
        {
          $xfer += ${iter168}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package LoginResult;
use base qw(Class::Accessor);
LoginResult->mk_accessors( qw( authToken certificate verifier pinCode type ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{authToken} = undef;
  $self->{certificate} = undef;
  $self->{verifier} = undef;
  $self->{pinCode} = undef;
  $self->{type} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{authToken}) {
      $self->{authToken} = $vals->{authToken};
    }
    if (defined $vals->{certificate}) {
      $self->{certificate} = $vals->{certificate};
    }
    if (defined $vals->{verifier}) {
      $self->{verifier} = $vals->{verifier};
    }
    if (defined $vals->{pinCode}) {
      $self->{pinCode} = $vals->{pinCode};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'LoginResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{authToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{certificate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{verifier});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pinCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LoginResult');
  if (defined $self->{authToken}) {
    $xfer += $output->writeFieldBegin('authToken', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{authToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{certificate}) {
    $xfer += $output->writeFieldBegin('certificate', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{certificate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{verifier}) {
    $xfer += $output->writeFieldBegin('verifier', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{verifier});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pinCode}) {
    $xfer += $output->writeFieldBegin('pinCode', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{pinCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package LoginSession;
use base qw(Class::Accessor);
LoginSession->mk_accessors( qw( tokenKey expirationTime applicationType systemName accessLocation ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{tokenKey} = undef;
  $self->{expirationTime} = undef;
  $self->{applicationType} = undef;
  $self->{systemName} = undef;
  $self->{accessLocation} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{tokenKey}) {
      $self->{tokenKey} = $vals->{tokenKey};
    }
    if (defined $vals->{expirationTime}) {
      $self->{expirationTime} = $vals->{expirationTime};
    }
    if (defined $vals->{applicationType}) {
      $self->{applicationType} = $vals->{applicationType};
    }
    if (defined $vals->{systemName}) {
      $self->{systemName} = $vals->{systemName};
    }
    if (defined $vals->{accessLocation}) {
      $self->{accessLocation} = $vals->{accessLocation};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'LoginSession';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{tokenKey});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{expirationTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{applicationType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{systemName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{accessLocation});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('LoginSession');
  if (defined $self->{tokenKey}) {
    $xfer += $output->writeFieldBegin('tokenKey', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{tokenKey});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{expirationTime}) {
    $xfer += $output->writeFieldBegin('expirationTime', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{expirationTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{applicationType}) {
    $xfer += $output->writeFieldBegin('applicationType', Thrift::TType::I32, 11);
    $xfer += $output->writeI32($self->{applicationType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{systemName}) {
    $xfer += $output->writeFieldBegin('systemName', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{systemName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{accessLocation}) {
    $xfer += $output->writeFieldBegin('accessLocation', Thrift::TType::STRING, 22);
    $xfer += $output->writeString($self->{accessLocation});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Message;
use base qw(Class::Accessor);
Message->mk_accessors( qw( from_ to toType id createdTime deliveredTime text location hasContent contentType contentPreview contentMetadata ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{from_} = undef;
  $self->{to} = undef;
  $self->{toType} = undef;
  $self->{id} = undef;
  $self->{createdTime} = undef;
  $self->{deliveredTime} = undef;
  $self->{text} = undef;
  $self->{location} = undef;
  $self->{hasContent} = undef;
  $self->{contentType} = undef;
  $self->{contentPreview} = undef;
  $self->{contentMetadata} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{from_}) {
      $self->{from_} = $vals->{from_};
    }
    if (defined $vals->{to}) {
      $self->{to} = $vals->{to};
    }
    if (defined $vals->{toType}) {
      $self->{toType} = $vals->{toType};
    }
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{deliveredTime}) {
      $self->{deliveredTime} = $vals->{deliveredTime};
    }
    if (defined $vals->{text}) {
      $self->{text} = $vals->{text};
    }
    if (defined $vals->{location}) {
      $self->{location} = $vals->{location};
    }
    if (defined $vals->{hasContent}) {
      $self->{hasContent} = $vals->{hasContent};
    }
    if (defined $vals->{contentType}) {
      $self->{contentType} = $vals->{contentType};
    }
    if (defined $vals->{contentPreview}) {
      $self->{contentPreview} = $vals->{contentPreview};
    }
    if (defined $vals->{contentMetadata}) {
      $self->{contentMetadata} = $vals->{contentMetadata};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Message';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{from_});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{to});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{toType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{deliveredTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{text});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{location} = Location->new();
        $xfer += $self->{location}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{hasContent});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{contentType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^17$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{contentPreview});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^18$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size169 = 0;
          $self->{contentMetadata} = {};
          my $_ktype170 = 0;
          my $_vtype171 = 0;
          $xfer += $input->readMapBegin(\$_ktype170, \$_vtype171, \$_size169);
          for (my $_i173 = 0; $_i173 < $_size169; ++$_i173)
          {
            my $key174 = '';
            my $val175 = '';
            $xfer += $input->readString(\$key174);
            $xfer += $input->readString(\$val175);
            $self->{contentMetadata}->{$key174} = $val175;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Message');
  if (defined $self->{from_}) {
    $xfer += $output->writeFieldBegin('from_', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{from_});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{to}) {
    $xfer += $output->writeFieldBegin('to', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{to});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{toType}) {
    $xfer += $output->writeFieldBegin('toType', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{toType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 5);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{deliveredTime}) {
    $xfer += $output->writeFieldBegin('deliveredTime', Thrift::TType::I64, 6);
    $xfer += $output->writeI64($self->{deliveredTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{text}) {
    $xfer += $output->writeFieldBegin('text', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{text});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{location}) {
    $xfer += $output->writeFieldBegin('location', Thrift::TType::STRUCT, 11);
    $xfer += $self->{location}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{hasContent}) {
    $xfer += $output->writeFieldBegin('hasContent', Thrift::TType::BOOL, 14);
    $xfer += $output->writeBool($self->{hasContent});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contentType}) {
    $xfer += $output->writeFieldBegin('contentType', Thrift::TType::I32, 15);
    $xfer += $output->writeI32($self->{contentType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contentPreview}) {
    $xfer += $output->writeFieldBegin('contentPreview', Thrift::TType::STRING, 17);
    $xfer += $output->writeString($self->{contentPreview});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contentMetadata}) {
    $xfer += $output->writeFieldBegin('contentMetadata', Thrift::TType::MAP, 18);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{contentMetadata}}));
      {
        while( my ($kiter176,$viter177) = each %{$self->{contentMetadata}}) 
        {
          $xfer += $output->writeString($kiter176);
          $xfer += $output->writeString($viter177);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package MessageOperation;
use base qw(Class::Accessor);
MessageOperation->mk_accessors( qw( revision createdTime type reqSeq status param1 param2 param3 message ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{revision} = undef;
  $self->{createdTime} = undef;
  $self->{type} = undef;
  $self->{reqSeq} = undef;
  $self->{status} = undef;
  $self->{param1} = undef;
  $self->{param2} = undef;
  $self->{param3} = undef;
  $self->{message} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{reqSeq}) {
      $self->{reqSeq} = $vals->{reqSeq};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
    if (defined $vals->{param1}) {
      $self->{param1} = $vals->{param1};
    }
    if (defined $vals->{param2}) {
      $self->{param2} = $vals->{param2};
    }
    if (defined $vals->{param3}) {
      $self->{param3} = $vals->{param3};
    }
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'MessageOperation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reqSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{status});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{param1});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{param2});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{param3});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{message} = Message->new();
        $xfer += $self->{message}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('MessageOperation');
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reqSeq}) {
    $xfer += $output->writeFieldBegin('reqSeq', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{reqSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{status});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{param1}) {
    $xfer += $output->writeFieldBegin('param1', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{param1});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{param2}) {
    $xfer += $output->writeFieldBegin('param2', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{param2});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{param3}) {
    $xfer += $output->writeFieldBegin('param3', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{param3});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', Thrift::TType::STRUCT, 20);
    $xfer += $self->{message}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package MessageOperations;
use base qw(Class::Accessor);
MessageOperations->mk_accessors( qw( operations endFlag ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{operations} = undef;
  $self->{endFlag} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{operations}) {
      $self->{operations} = $vals->{operations};
    }
    if (defined $vals->{endFlag}) {
      $self->{endFlag} = $vals->{endFlag};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'MessageOperations';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size178 = 0;
          $self->{operations} = [];
          my $_etype181 = 0;
          $xfer += $input->readListBegin(\$_etype181, \$_size178);
          for (my $_i182 = 0; $_i182 < $_size178; ++$_i182)
          {
            my $elem183 = undef;
            $elem183 = MessageOperation->new();
            $xfer += $elem183->read($input);
            push(@{$self->{operations}},$elem183);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{endFlag});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('MessageOperations');
  if (defined $self->{operations}) {
    $xfer += $output->writeFieldBegin('operations', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{operations}}));
      {
        foreach my $iter184 (@{$self->{operations}}) 
        {
          $xfer += ${iter184}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{endFlag}) {
    $xfer += $output->writeFieldBegin('endFlag', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{endFlag});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package MetaProfile;
use base qw(Class::Accessor);
MetaProfile->mk_accessors( qw( createTime regionCode identities ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{createTime} = undef;
  $self->{regionCode} = undef;
  $self->{identities} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{createTime}) {
      $self->{createTime} = $vals->{createTime};
    }
    if (defined $vals->{regionCode}) {
      $self->{regionCode} = $vals->{regionCode};
    }
    if (defined $vals->{identities}) {
      $self->{identities} = $vals->{identities};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'MetaProfile';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{regionCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size185 = 0;
          $self->{identities} = {};
          my $_ktype186 = 0;
          my $_vtype187 = 0;
          $xfer += $input->readMapBegin(\$_ktype186, \$_vtype187, \$_size185);
          for (my $_i189 = 0; $_i189 < $_size185; ++$_i189)
          {
            my $key190 = 0;
            my $val191 = '';
            $xfer += $input->readI32(\$key190);
            $xfer += $input->readString(\$val191);
            $self->{identities}->{$key190} = $val191;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('MetaProfile');
  if (defined $self->{createTime}) {
    $xfer += $output->writeFieldBegin('createTime', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{createTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{regionCode}) {
    $xfer += $output->writeFieldBegin('regionCode', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{regionCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{identities}) {
    $xfer += $output->writeFieldBegin('identities', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::I32, Thrift::TType::STRING, scalar(keys %{$self->{identities}}));
      {
        while( my ($kiter192,$viter193) = each %{$self->{identities}}) 
        {
          $xfer += $output->writeI32($kiter192);
          $xfer += $output->writeString($viter193);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package NotificationItem;
use base qw(Class::Accessor);
NotificationItem->mk_accessors( qw( id from_ to fromChannel toChannel revision createdTime content ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{from_} = undef;
  $self->{to} = undef;
  $self->{fromChannel} = undef;
  $self->{toChannel} = undef;
  $self->{revision} = undef;
  $self->{createdTime} = undef;
  $self->{content} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{from_}) {
      $self->{from_} = $vals->{from_};
    }
    if (defined $vals->{to}) {
      $self->{to} = $vals->{to};
    }
    if (defined $vals->{fromChannel}) {
      $self->{fromChannel} = $vals->{fromChannel};
    }
    if (defined $vals->{toChannel}) {
      $self->{toChannel} = $vals->{toChannel};
    }
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{content}) {
      $self->{content} = $vals->{content};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'NotificationItem';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{from_});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{to});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{fromChannel});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{toChannel});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size194 = 0;
          $self->{content} = {};
          my $_ktype195 = 0;
          my $_vtype196 = 0;
          $xfer += $input->readMapBegin(\$_ktype195, \$_vtype196, \$_size194);
          for (my $_i198 = 0; $_i198 < $_size194; ++$_i198)
          {
            my $key199 = '';
            my $val200 = '';
            $xfer += $input->readString(\$key199);
            $xfer += $input->readString(\$val200);
            $self->{content}->{$key199} = $val200;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('NotificationItem');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{from_}) {
    $xfer += $output->writeFieldBegin('from_', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{from_});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{to}) {
    $xfer += $output->writeFieldBegin('to', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{to});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{fromChannel}) {
    $xfer += $output->writeFieldBegin('fromChannel', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{fromChannel});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{toChannel}) {
    $xfer += $output->writeFieldBegin('toChannel', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{toChannel});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 7);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 8);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{content}) {
    $xfer += $output->writeFieldBegin('content', Thrift::TType::MAP, 9);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{content}}));
      {
        while( my ($kiter201,$viter202) = each %{$self->{content}}) 
        {
          $xfer += $output->writeString($kiter201);
          $xfer += $output->writeString($viter202);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package NotificationFetchResult;
use base qw(Class::Accessor);
NotificationFetchResult->mk_accessors( qw( fetchMode itemList ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{fetchMode} = undef;
  $self->{itemList} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{fetchMode}) {
      $self->{fetchMode} = $vals->{fetchMode};
    }
    if (defined $vals->{itemList}) {
      $self->{itemList} = $vals->{itemList};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'NotificationFetchResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{fetchMode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size203 = 0;
          $self->{itemList} = [];
          my $_etype206 = 0;
          $xfer += $input->readListBegin(\$_etype206, \$_size203);
          for (my $_i207 = 0; $_i207 < $_size203; ++$_i207)
          {
            my $elem208 = undef;
            $elem208 = NotificationItem->new();
            $xfer += $elem208->read($input);
            push(@{$self->{itemList}},$elem208);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('NotificationFetchResult');
  if (defined $self->{fetchMode}) {
    $xfer += $output->writeFieldBegin('fetchMode', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{fetchMode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{itemList}) {
    $xfer += $output->writeFieldBegin('itemList', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{itemList}}));
      {
        foreach my $iter209 (@{$self->{itemList}}) 
        {
          $xfer += ${iter209}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Operation;
use base qw(Class::Accessor);
Operation->mk_accessors( qw( revision createdTime type reqSeq checksum status param1 param2 param3 message ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{revision} = undef;
  $self->{createdTime} = undef;
  $self->{type} = undef;
  $self->{reqSeq} = undef;
  $self->{checksum} = undef;
  $self->{status} = undef;
  $self->{param1} = undef;
  $self->{param2} = undef;
  $self->{param3} = undef;
  $self->{message} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{revision}) {
      $self->{revision} = $vals->{revision};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{reqSeq}) {
      $self->{reqSeq} = $vals->{reqSeq};
    }
    if (defined $vals->{checksum}) {
      $self->{checksum} = $vals->{checksum};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
    if (defined $vals->{param1}) {
      $self->{param1} = $vals->{param1};
    }
    if (defined $vals->{param2}) {
      $self->{param2} = $vals->{param2};
    }
    if (defined $vals->{param3}) {
      $self->{param3} = $vals->{param3};
    }
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Operation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{revision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reqSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{checksum});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{status});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{param1});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{param2});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{param3});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{message} = Message->new();
        $xfer += $self->{message}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Operation');
  if (defined $self->{revision}) {
    $xfer += $output->writeFieldBegin('revision', Thrift::TType::I64, 1);
    $xfer += $output->writeI64($self->{revision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reqSeq}) {
    $xfer += $output->writeFieldBegin('reqSeq', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{reqSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{checksum}) {
    $xfer += $output->writeFieldBegin('checksum', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{checksum});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{status});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{param1}) {
    $xfer += $output->writeFieldBegin('param1', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{param1});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{param2}) {
    $xfer += $output->writeFieldBegin('param2', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{param2});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{param3}) {
    $xfer += $output->writeFieldBegin('param3', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{param3});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', Thrift::TType::STRUCT, 20);
    $xfer += $self->{message}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaymentReservation;
use base qw(Class::Accessor);
PaymentReservation->mk_accessors( qw( receiverMid productId language location currency price appStoreCode messageText messageTemplate packageId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{receiverMid} = undef;
  $self->{productId} = undef;
  $self->{language} = undef;
  $self->{location} = undef;
  $self->{currency} = undef;
  $self->{price} = undef;
  $self->{appStoreCode} = undef;
  $self->{messageText} = undef;
  $self->{messageTemplate} = undef;
  $self->{packageId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{receiverMid}) {
      $self->{receiverMid} = $vals->{receiverMid};
    }
    if (defined $vals->{productId}) {
      $self->{productId} = $vals->{productId};
    }
    if (defined $vals->{language}) {
      $self->{language} = $vals->{language};
    }
    if (defined $vals->{location}) {
      $self->{location} = $vals->{location};
    }
    if (defined $vals->{currency}) {
      $self->{currency} = $vals->{currency};
    }
    if (defined $vals->{price}) {
      $self->{price} = $vals->{price};
    }
    if (defined $vals->{appStoreCode}) {
      $self->{appStoreCode} = $vals->{appStoreCode};
    }
    if (defined $vals->{messageText}) {
      $self->{messageText} = $vals->{messageText};
    }
    if (defined $vals->{messageTemplate}) {
      $self->{messageTemplate} = $vals->{messageTemplate};
    }
    if (defined $vals->{packageId}) {
      $self->{packageId} = $vals->{packageId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaymentReservation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{receiverMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{productId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{language});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{location});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currency});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{price});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{appStoreCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{messageText});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{messageTemplate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{packageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaymentReservation');
  if (defined $self->{receiverMid}) {
    $xfer += $output->writeFieldBegin('receiverMid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{receiverMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{productId}) {
    $xfer += $output->writeFieldBegin('productId', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{productId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{language}) {
    $xfer += $output->writeFieldBegin('language', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{language});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{location}) {
    $xfer += $output->writeFieldBegin('location', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{location});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currency}) {
    $xfer += $output->writeFieldBegin('currency', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{currency});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{price}) {
    $xfer += $output->writeFieldBegin('price', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{price});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{appStoreCode}) {
    $xfer += $output->writeFieldBegin('appStoreCode', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{appStoreCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageText}) {
    $xfer += $output->writeFieldBegin('messageText', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{messageText});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageTemplate}) {
    $xfer += $output->writeFieldBegin('messageTemplate', Thrift::TType::I32, 9);
    $xfer += $output->writeI32($self->{messageTemplate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{packageId}) {
    $xfer += $output->writeFieldBegin('packageId', Thrift::TType::I64, 10);
    $xfer += $output->writeI64($self->{packageId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package PaymentReservationResult;
use base qw(Class::Accessor);
PaymentReservationResult->mk_accessors( qw( orderId confirmUrl extras ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{orderId} = undef;
  $self->{confirmUrl} = undef;
  $self->{extras} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{orderId}) {
      $self->{orderId} = $vals->{orderId};
    }
    if (defined $vals->{confirmUrl}) {
      $self->{confirmUrl} = $vals->{confirmUrl};
    }
    if (defined $vals->{extras}) {
      $self->{extras} = $vals->{extras};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'PaymentReservationResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{orderId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{confirmUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size210 = 0;
          $self->{extras} = {};
          my $_ktype211 = 0;
          my $_vtype212 = 0;
          $xfer += $input->readMapBegin(\$_ktype211, \$_vtype212, \$_size210);
          for (my $_i214 = 0; $_i214 < $_size210; ++$_i214)
          {
            my $key215 = '';
            my $val216 = '';
            $xfer += $input->readString(\$key215);
            $xfer += $input->readString(\$val216);
            $self->{extras}->{$key215} = $val216;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('PaymentReservationResult');
  if (defined $self->{orderId}) {
    $xfer += $output->writeFieldBegin('orderId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{orderId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{confirmUrl}) {
    $xfer += $output->writeFieldBegin('confirmUrl', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{confirmUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extras}) {
    $xfer += $output->writeFieldBegin('extras', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extras}}));
      {
        while( my ($kiter217,$viter218) = each %{$self->{extras}}) 
        {
          $xfer += $output->writeString($kiter217);
          $xfer += $output->writeString($viter218);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Product;
use base qw(Class::Accessor);
Product->mk_accessors( qw( productId packageId version authorName onSale validDays saleType copyright title descriptionText shopOrderId fromMid toMid validUntil priceTier price currency currencySymbol paymentType createDate ownFlag eventType urlSchema downloadUrl buddyMid publishSince newFlag missionFlag ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{productId} = undef;
  $self->{packageId} = undef;
  $self->{version} = undef;
  $self->{authorName} = undef;
  $self->{onSale} = undef;
  $self->{validDays} = undef;
  $self->{saleType} = undef;
  $self->{copyright} = undef;
  $self->{title} = undef;
  $self->{descriptionText} = undef;
  $self->{shopOrderId} = undef;
  $self->{fromMid} = undef;
  $self->{toMid} = undef;
  $self->{validUntil} = undef;
  $self->{priceTier} = undef;
  $self->{price} = undef;
  $self->{currency} = undef;
  $self->{currencySymbol} = undef;
  $self->{paymentType} = undef;
  $self->{createDate} = undef;
  $self->{ownFlag} = undef;
  $self->{eventType} = undef;
  $self->{urlSchema} = undef;
  $self->{downloadUrl} = undef;
  $self->{buddyMid} = undef;
  $self->{publishSince} = undef;
  $self->{newFlag} = undef;
  $self->{missionFlag} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{productId}) {
      $self->{productId} = $vals->{productId};
    }
    if (defined $vals->{packageId}) {
      $self->{packageId} = $vals->{packageId};
    }
    if (defined $vals->{version}) {
      $self->{version} = $vals->{version};
    }
    if (defined $vals->{authorName}) {
      $self->{authorName} = $vals->{authorName};
    }
    if (defined $vals->{onSale}) {
      $self->{onSale} = $vals->{onSale};
    }
    if (defined $vals->{validDays}) {
      $self->{validDays} = $vals->{validDays};
    }
    if (defined $vals->{saleType}) {
      $self->{saleType} = $vals->{saleType};
    }
    if (defined $vals->{copyright}) {
      $self->{copyright} = $vals->{copyright};
    }
    if (defined $vals->{title}) {
      $self->{title} = $vals->{title};
    }
    if (defined $vals->{descriptionText}) {
      $self->{descriptionText} = $vals->{descriptionText};
    }
    if (defined $vals->{shopOrderId}) {
      $self->{shopOrderId} = $vals->{shopOrderId};
    }
    if (defined $vals->{fromMid}) {
      $self->{fromMid} = $vals->{fromMid};
    }
    if (defined $vals->{toMid}) {
      $self->{toMid} = $vals->{toMid};
    }
    if (defined $vals->{validUntil}) {
      $self->{validUntil} = $vals->{validUntil};
    }
    if (defined $vals->{priceTier}) {
      $self->{priceTier} = $vals->{priceTier};
    }
    if (defined $vals->{price}) {
      $self->{price} = $vals->{price};
    }
    if (defined $vals->{currency}) {
      $self->{currency} = $vals->{currency};
    }
    if (defined $vals->{currencySymbol}) {
      $self->{currencySymbol} = $vals->{currencySymbol};
    }
    if (defined $vals->{paymentType}) {
      $self->{paymentType} = $vals->{paymentType};
    }
    if (defined $vals->{createDate}) {
      $self->{createDate} = $vals->{createDate};
    }
    if (defined $vals->{ownFlag}) {
      $self->{ownFlag} = $vals->{ownFlag};
    }
    if (defined $vals->{eventType}) {
      $self->{eventType} = $vals->{eventType};
    }
    if (defined $vals->{urlSchema}) {
      $self->{urlSchema} = $vals->{urlSchema};
    }
    if (defined $vals->{downloadUrl}) {
      $self->{downloadUrl} = $vals->{downloadUrl};
    }
    if (defined $vals->{buddyMid}) {
      $self->{buddyMid} = $vals->{buddyMid};
    }
    if (defined $vals->{publishSince}) {
      $self->{publishSince} = $vals->{publishSince};
    }
    if (defined $vals->{newFlag}) {
      $self->{newFlag} = $vals->{newFlag};
    }
    if (defined $vals->{missionFlag}) {
      $self->{missionFlag} = $vals->{missionFlag};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Product';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{productId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{packageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{authorName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{onSale});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{validDays});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{saleType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{copyright});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{title});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{descriptionText});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{shopOrderId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{fromMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{toMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{validUntil});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{priceTier});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^16$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{price});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^17$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currency});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^18$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{currencySymbol});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^19$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{paymentType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createDate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{ownFlag});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{eventType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^23$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{urlSchema});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^24$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{downloadUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^25$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{buddyMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^26$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{publishSince});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^27$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{newFlag});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^28$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{missionFlag});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Product');
  if (defined $self->{productId}) {
    $xfer += $output->writeFieldBegin('productId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{productId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{packageId}) {
    $xfer += $output->writeFieldBegin('packageId', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{packageId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{version}) {
    $xfer += $output->writeFieldBegin('version', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{version});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorName}) {
    $xfer += $output->writeFieldBegin('authorName', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{authorName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{onSale}) {
    $xfer += $output->writeFieldBegin('onSale', Thrift::TType::BOOL, 5);
    $xfer += $output->writeBool($self->{onSale});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{validDays}) {
    $xfer += $output->writeFieldBegin('validDays', Thrift::TType::I32, 6);
    $xfer += $output->writeI32($self->{validDays});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{saleType}) {
    $xfer += $output->writeFieldBegin('saleType', Thrift::TType::I32, 7);
    $xfer += $output->writeI32($self->{saleType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{copyright}) {
    $xfer += $output->writeFieldBegin('copyright', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{copyright});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{title}) {
    $xfer += $output->writeFieldBegin('title', Thrift::TType::STRING, 9);
    $xfer += $output->writeString($self->{title});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{descriptionText}) {
    $xfer += $output->writeFieldBegin('descriptionText', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{descriptionText});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{shopOrderId}) {
    $xfer += $output->writeFieldBegin('shopOrderId', Thrift::TType::I64, 11);
    $xfer += $output->writeI64($self->{shopOrderId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{fromMid}) {
    $xfer += $output->writeFieldBegin('fromMid', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{fromMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{toMid}) {
    $xfer += $output->writeFieldBegin('toMid', Thrift::TType::STRING, 13);
    $xfer += $output->writeString($self->{toMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{validUntil}) {
    $xfer += $output->writeFieldBegin('validUntil', Thrift::TType::I64, 14);
    $xfer += $output->writeI64($self->{validUntil});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{priceTier}) {
    $xfer += $output->writeFieldBegin('priceTier', Thrift::TType::I32, 15);
    $xfer += $output->writeI32($self->{priceTier});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{price}) {
    $xfer += $output->writeFieldBegin('price', Thrift::TType::STRING, 16);
    $xfer += $output->writeString($self->{price});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currency}) {
    $xfer += $output->writeFieldBegin('currency', Thrift::TType::STRING, 17);
    $xfer += $output->writeString($self->{currency});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currencySymbol}) {
    $xfer += $output->writeFieldBegin('currencySymbol', Thrift::TType::STRING, 18);
    $xfer += $output->writeString($self->{currencySymbol});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{paymentType}) {
    $xfer += $output->writeFieldBegin('paymentType', Thrift::TType::I32, 19);
    $xfer += $output->writeI32($self->{paymentType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createDate}) {
    $xfer += $output->writeFieldBegin('createDate', Thrift::TType::I64, 20);
    $xfer += $output->writeI64($self->{createDate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ownFlag}) {
    $xfer += $output->writeFieldBegin('ownFlag', Thrift::TType::BOOL, 21);
    $xfer += $output->writeBool($self->{ownFlag});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{eventType}) {
    $xfer += $output->writeFieldBegin('eventType', Thrift::TType::I32, 22);
    $xfer += $output->writeI32($self->{eventType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{urlSchema}) {
    $xfer += $output->writeFieldBegin('urlSchema', Thrift::TType::STRING, 23);
    $xfer += $output->writeString($self->{urlSchema});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{downloadUrl}) {
    $xfer += $output->writeFieldBegin('downloadUrl', Thrift::TType::STRING, 24);
    $xfer += $output->writeString($self->{downloadUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{buddyMid}) {
    $xfer += $output->writeFieldBegin('buddyMid', Thrift::TType::STRING, 25);
    $xfer += $output->writeString($self->{buddyMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{publishSince}) {
    $xfer += $output->writeFieldBegin('publishSince', Thrift::TType::I64, 26);
    $xfer += $output->writeI64($self->{publishSince});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{newFlag}) {
    $xfer += $output->writeFieldBegin('newFlag', Thrift::TType::BOOL, 27);
    $xfer += $output->writeBool($self->{newFlag});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{missionFlag}) {
    $xfer += $output->writeFieldBegin('missionFlag', Thrift::TType::BOOL, 28);
    $xfer += $output->writeBool($self->{missionFlag});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ProductList;
use base qw(Class::Accessor);
ProductList->mk_accessors( qw( hasNext bannerSequence bannerTargetType bannerTargetPath productList bannerLang ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{hasNext} = undef;
  $self->{bannerSequence} = undef;
  $self->{bannerTargetType} = undef;
  $self->{bannerTargetPath} = undef;
  $self->{productList} = undef;
  $self->{bannerLang} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{hasNext}) {
      $self->{hasNext} = $vals->{hasNext};
    }
    if (defined $vals->{bannerSequence}) {
      $self->{bannerSequence} = $vals->{bannerSequence};
    }
    if (defined $vals->{bannerTargetType}) {
      $self->{bannerTargetType} = $vals->{bannerTargetType};
    }
    if (defined $vals->{bannerTargetPath}) {
      $self->{bannerTargetPath} = $vals->{bannerTargetPath};
    }
    if (defined $vals->{productList}) {
      $self->{productList} = $vals->{productList};
    }
    if (defined $vals->{bannerLang}) {
      $self->{bannerLang} = $vals->{bannerLang};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ProductList';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{hasNext});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{bannerSequence});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{bannerTargetType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{bannerTargetPath});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size219 = 0;
          $self->{productList} = [];
          my $_etype222 = 0;
          $xfer += $input->readListBegin(\$_etype222, \$_size219);
          for (my $_i223 = 0; $_i223 < $_size219; ++$_i223)
          {
            my $elem224 = undef;
            $elem224 = Product->new();
            $xfer += $elem224->read($input);
            push(@{$self->{productList}},$elem224);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{bannerLang});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ProductList');
  if (defined $self->{hasNext}) {
    $xfer += $output->writeFieldBegin('hasNext', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{hasNext});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{bannerSequence}) {
    $xfer += $output->writeFieldBegin('bannerSequence', Thrift::TType::I64, 4);
    $xfer += $output->writeI64($self->{bannerSequence});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{bannerTargetType}) {
    $xfer += $output->writeFieldBegin('bannerTargetType', Thrift::TType::I32, 5);
    $xfer += $output->writeI32($self->{bannerTargetType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{bannerTargetPath}) {
    $xfer += $output->writeFieldBegin('bannerTargetPath', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{bannerTargetPath});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{productList}) {
    $xfer += $output->writeFieldBegin('productList', Thrift::TType::LIST, 7);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{productList}}));
      {
        foreach my $iter225 (@{$self->{productList}}) 
        {
          $xfer += ${iter225}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{bannerLang}) {
    $xfer += $output->writeFieldBegin('bannerLang', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{bannerLang});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ProductSimple;
use base qw(Class::Accessor);
ProductSimple->mk_accessors( qw( productId packageId version onSale validUntil ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{productId} = undef;
  $self->{packageId} = undef;
  $self->{version} = undef;
  $self->{onSale} = undef;
  $self->{validUntil} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{productId}) {
      $self->{productId} = $vals->{productId};
    }
    if (defined $vals->{packageId}) {
      $self->{packageId} = $vals->{packageId};
    }
    if (defined $vals->{version}) {
      $self->{version} = $vals->{version};
    }
    if (defined $vals->{onSale}) {
      $self->{onSale} = $vals->{onSale};
    }
    if (defined $vals->{validUntil}) {
      $self->{validUntil} = $vals->{validUntil};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ProductSimple';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{productId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{packageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{onSale});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{validUntil});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ProductSimple');
  if (defined $self->{productId}) {
    $xfer += $output->writeFieldBegin('productId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{productId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{packageId}) {
    $xfer += $output->writeFieldBegin('packageId', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{packageId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{version}) {
    $xfer += $output->writeFieldBegin('version', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{version});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{onSale}) {
    $xfer += $output->writeFieldBegin('onSale', Thrift::TType::BOOL, 4);
    $xfer += $output->writeBool($self->{onSale});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{validUntil}) {
    $xfer += $output->writeFieldBegin('validUntil', Thrift::TType::I64, 5);
    $xfer += $output->writeI64($self->{validUntil});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ProductSimpleList;
use base qw(Class::Accessor);
ProductSimpleList->mk_accessors( qw( hasNext reinvokeHour lastVersionSeq productList recentNewReleaseDate recentEventReleaseDate ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{hasNext} = undef;
  $self->{reinvokeHour} = undef;
  $self->{lastVersionSeq} = undef;
  $self->{productList} = undef;
  $self->{recentNewReleaseDate} = undef;
  $self->{recentEventReleaseDate} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{hasNext}) {
      $self->{hasNext} = $vals->{hasNext};
    }
    if (defined $vals->{reinvokeHour}) {
      $self->{reinvokeHour} = $vals->{reinvokeHour};
    }
    if (defined $vals->{lastVersionSeq}) {
      $self->{lastVersionSeq} = $vals->{lastVersionSeq};
    }
    if (defined $vals->{productList}) {
      $self->{productList} = $vals->{productList};
    }
    if (defined $vals->{recentNewReleaseDate}) {
      $self->{recentNewReleaseDate} = $vals->{recentNewReleaseDate};
    }
    if (defined $vals->{recentEventReleaseDate}) {
      $self->{recentEventReleaseDate} = $vals->{recentEventReleaseDate};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ProductSimpleList';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{hasNext});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{reinvokeHour});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{lastVersionSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size226 = 0;
          $self->{productList} = [];
          my $_etype229 = 0;
          $xfer += $input->readListBegin(\$_etype229, \$_size226);
          for (my $_i230 = 0; $_i230 < $_size226; ++$_i230)
          {
            my $elem231 = undef;
            $elem231 = ProductSimple->new();
            $xfer += $elem231->read($input);
            push(@{$self->{productList}},$elem231);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{recentNewReleaseDate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{recentEventReleaseDate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ProductSimpleList');
  if (defined $self->{hasNext}) {
    $xfer += $output->writeFieldBegin('hasNext', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{hasNext});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reinvokeHour}) {
    $xfer += $output->writeFieldBegin('reinvokeHour', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{reinvokeHour});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastVersionSeq}) {
    $xfer += $output->writeFieldBegin('lastVersionSeq', Thrift::TType::I64, 3);
    $xfer += $output->writeI64($self->{lastVersionSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{productList}) {
    $xfer += $output->writeFieldBegin('productList', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{productList}}));
      {
        foreach my $iter232 (@{$self->{productList}}) 
        {
          $xfer += ${iter232}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{recentNewReleaseDate}) {
    $xfer += $output->writeFieldBegin('recentNewReleaseDate', Thrift::TType::I64, 5);
    $xfer += $output->writeI64($self->{recentNewReleaseDate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{recentEventReleaseDate}) {
    $xfer += $output->writeFieldBegin('recentEventReleaseDate', Thrift::TType::I64, 6);
    $xfer += $output->writeI64($self->{recentEventReleaseDate});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Profile;
use base qw(Class::Accessor);
Profile->mk_accessors( qw( mid userid phone email regionCode displayName phoneticName pictureStatus thumbnailUrl statusMessage allowSearchByUserid allowSearchByEmail picturePath ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{userid} = undef;
  $self->{phone} = undef;
  $self->{email} = undef;
  $self->{regionCode} = undef;
  $self->{displayName} = undef;
  $self->{phoneticName} = undef;
  $self->{pictureStatus} = undef;
  $self->{thumbnailUrl} = undef;
  $self->{statusMessage} = undef;
  $self->{allowSearchByUserid} = undef;
  $self->{allowSearchByEmail} = undef;
  $self->{picturePath} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{userid}) {
      $self->{userid} = $vals->{userid};
    }
    if (defined $vals->{phone}) {
      $self->{phone} = $vals->{phone};
    }
    if (defined $vals->{email}) {
      $self->{email} = $vals->{email};
    }
    if (defined $vals->{regionCode}) {
      $self->{regionCode} = $vals->{regionCode};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{phoneticName}) {
      $self->{phoneticName} = $vals->{phoneticName};
    }
    if (defined $vals->{pictureStatus}) {
      $self->{pictureStatus} = $vals->{pictureStatus};
    }
    if (defined $vals->{thumbnailUrl}) {
      $self->{thumbnailUrl} = $vals->{thumbnailUrl};
    }
    if (defined $vals->{statusMessage}) {
      $self->{statusMessage} = $vals->{statusMessage};
    }
    if (defined $vals->{allowSearchByUserid}) {
      $self->{allowSearchByUserid} = $vals->{allowSearchByUserid};
    }
    if (defined $vals->{allowSearchByEmail}) {
      $self->{allowSearchByEmail} = $vals->{allowSearchByEmail};
    }
    if (defined $vals->{picturePath}) {
      $self->{picturePath} = $vals->{picturePath};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Profile';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{userid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{phone});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{email});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{regionCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{phoneticName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^23$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{thumbnailUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^24$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{statusMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^31$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{allowSearchByUserid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^32$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{allowSearchByEmail});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^33$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{picturePath});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Profile');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{userid}) {
    $xfer += $output->writeFieldBegin('userid', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{userid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phone}) {
    $xfer += $output->writeFieldBegin('phone', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{phone});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{email}) {
    $xfer += $output->writeFieldBegin('email', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{email});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{regionCode}) {
    $xfer += $output->writeFieldBegin('regionCode', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{regionCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 20);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phoneticName}) {
    $xfer += $output->writeFieldBegin('phoneticName', Thrift::TType::STRING, 21);
    $xfer += $output->writeString($self->{phoneticName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureStatus}) {
    $xfer += $output->writeFieldBegin('pictureStatus', Thrift::TType::STRING, 22);
    $xfer += $output->writeString($self->{pictureStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{thumbnailUrl}) {
    $xfer += $output->writeFieldBegin('thumbnailUrl', Thrift::TType::STRING, 23);
    $xfer += $output->writeString($self->{thumbnailUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{statusMessage}) {
    $xfer += $output->writeFieldBegin('statusMessage', Thrift::TType::STRING, 24);
    $xfer += $output->writeString($self->{statusMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{allowSearchByUserid}) {
    $xfer += $output->writeFieldBegin('allowSearchByUserid', Thrift::TType::BOOL, 31);
    $xfer += $output->writeBool($self->{allowSearchByUserid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{allowSearchByEmail}) {
    $xfer += $output->writeFieldBegin('allowSearchByEmail', Thrift::TType::BOOL, 32);
    $xfer += $output->writeBool($self->{allowSearchByEmail});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{picturePath}) {
    $xfer += $output->writeFieldBegin('picturePath', Thrift::TType::STRING, 33);
    $xfer += $output->writeString($self->{picturePath});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ProximityMatchCandidateResult;
use base qw(Class::Accessor);
ProximityMatchCandidateResult->mk_accessors( qw( users buddies ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{users} = undef;
  $self->{buddies} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{users}) {
      $self->{users} = $vals->{users};
    }
    if (defined $vals->{buddies}) {
      $self->{buddies} = $vals->{buddies};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ProximityMatchCandidateResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size233 = 0;
          $self->{users} = [];
          my $_etype236 = 0;
          $xfer += $input->readListBegin(\$_etype236, \$_size233);
          for (my $_i237 = 0; $_i237 < $_size233; ++$_i237)
          {
            my $elem238 = undef;
            $elem238 = Contact->new();
            $xfer += $elem238->read($input);
            push(@{$self->{users}},$elem238);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size239 = 0;
          $self->{buddies} = [];
          my $_etype242 = 0;
          $xfer += $input->readListBegin(\$_etype242, \$_size239);
          for (my $_i243 = 0; $_i243 < $_size239; ++$_i243)
          {
            my $elem244 = undef;
            $elem244 = Contact->new();
            $xfer += $elem244->read($input);
            push(@{$self->{buddies}},$elem244);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ProximityMatchCandidateResult');
  if (defined $self->{users}) {
    $xfer += $output->writeFieldBegin('users', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{users}}));
      {
        foreach my $iter245 (@{$self->{users}}) 
        {
          $xfer += ${iter245}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{buddies}) {
    $xfer += $output->writeFieldBegin('buddies', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{buddies}}));
      {
        foreach my $iter246 (@{$self->{buddies}}) 
        {
          $xfer += ${iter246}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package RegisterWithSnsIdResult;
use base qw(Class::Accessor);
RegisterWithSnsIdResult->mk_accessors( qw( authToken userCreated ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{authToken} = undef;
  $self->{userCreated} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{authToken}) {
      $self->{authToken} = $vals->{authToken};
    }
    if (defined $vals->{userCreated}) {
      $self->{userCreated} = $vals->{userCreated};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RegisterWithSnsIdResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{authToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{userCreated});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RegisterWithSnsIdResult');
  if (defined $self->{authToken}) {
    $xfer += $output->writeFieldBegin('authToken', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{authToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{userCreated}) {
    $xfer += $output->writeFieldBegin('userCreated', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{userCreated});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package RequestTokenResponse;
use base qw(Class::Accessor);
RequestTokenResponse->mk_accessors( qw( requestToken returnUrl ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{requestToken} = undef;
  $self->{returnUrl} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{requestToken}) {
      $self->{requestToken} = $vals->{requestToken};
    }
    if (defined $vals->{returnUrl}) {
      $self->{returnUrl} = $vals->{returnUrl};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RequestTokenResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{requestToken});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{returnUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RequestTokenResponse');
  if (defined $self->{requestToken}) {
    $xfer += $output->writeFieldBegin('requestToken', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{requestToken});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{returnUrl}) {
    $xfer += $output->writeFieldBegin('returnUrl', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{returnUrl});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Room;
use base qw(Class::Accessor);
Room->mk_accessors( qw( mid createdTime contacts notificationDisabled ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{createdTime} = undef;
  $self->{contacts} = undef;
  $self->{notificationDisabled} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{createdTime}) {
      $self->{createdTime} = $vals->{createdTime};
    }
    if (defined $vals->{contacts}) {
      $self->{contacts} = $vals->{contacts};
    }
    if (defined $vals->{notificationDisabled}) {
      $self->{notificationDisabled} = $vals->{notificationDisabled};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Room';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{createdTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size247 = 0;
          $self->{contacts} = [];
          my $_etype250 = 0;
          $xfer += $input->readListBegin(\$_etype250, \$_size247);
          for (my $_i251 = 0; $_i251 < $_size247; ++$_i251)
          {
            my $elem252 = undef;
            $elem252 = Contact->new();
            $xfer += $elem252->read($input);
            push(@{$self->{contacts}},$elem252);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^31$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationDisabled});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Room');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createdTime}) {
    $xfer += $output->writeFieldBegin('createdTime', Thrift::TType::I64, 2);
    $xfer += $output->writeI64($self->{createdTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contacts}) {
    $xfer += $output->writeFieldBegin('contacts', Thrift::TType::LIST, 10);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{contacts}}));
      {
        foreach my $iter253 (@{$self->{contacts}}) 
        {
          $xfer += ${iter253}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationDisabled}) {
    $xfer += $output->writeFieldBegin('notificationDisabled', Thrift::TType::BOOL, 31);
    $xfer += $output->writeBool($self->{notificationDisabled});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package RSAKey;
use base qw(Class::Accessor);
RSAKey->mk_accessors( qw( keynm nvalue evalue sessionKey ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{keynm} = undef;
  $self->{nvalue} = undef;
  $self->{evalue} = undef;
  $self->{sessionKey} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{keynm}) {
      $self->{keynm} = $vals->{keynm};
    }
    if (defined $vals->{nvalue}) {
      $self->{nvalue} = $vals->{nvalue};
    }
    if (defined $vals->{evalue}) {
      $self->{evalue} = $vals->{evalue};
    }
    if (defined $vals->{sessionKey}) {
      $self->{sessionKey} = $vals->{sessionKey};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RSAKey';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{keynm});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{nvalue});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{evalue});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{sessionKey});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RSAKey');
  if (defined $self->{keynm}) {
    $xfer += $output->writeFieldBegin('keynm', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{keynm});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{nvalue}) {
    $xfer += $output->writeFieldBegin('nvalue', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{nvalue});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{evalue}) {
    $xfer += $output->writeFieldBegin('evalue', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{evalue});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sessionKey}) {
    $xfer += $output->writeFieldBegin('sessionKey', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{sessionKey});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SendBuddyMessageResult;
use base qw(Class::Accessor);
SendBuddyMessageResult->mk_accessors( qw( requestId state messageId eventNo receiverCount successCount failCount cancelCount blockCount unregisterCount timestamp message ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{requestId} = undef;
  $self->{state} = undef;
  $self->{messageId} = undef;
  $self->{eventNo} = undef;
  $self->{receiverCount} = undef;
  $self->{successCount} = undef;
  $self->{failCount} = undef;
  $self->{cancelCount} = undef;
  $self->{blockCount} = undef;
  $self->{unregisterCount} = undef;
  $self->{timestamp} = undef;
  $self->{message} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{requestId}) {
      $self->{requestId} = $vals->{requestId};
    }
    if (defined $vals->{state}) {
      $self->{state} = $vals->{state};
    }
    if (defined $vals->{messageId}) {
      $self->{messageId} = $vals->{messageId};
    }
    if (defined $vals->{eventNo}) {
      $self->{eventNo} = $vals->{eventNo};
    }
    if (defined $vals->{receiverCount}) {
      $self->{receiverCount} = $vals->{receiverCount};
    }
    if (defined $vals->{successCount}) {
      $self->{successCount} = $vals->{successCount};
    }
    if (defined $vals->{failCount}) {
      $self->{failCount} = $vals->{failCount};
    }
    if (defined $vals->{cancelCount}) {
      $self->{cancelCount} = $vals->{cancelCount};
    }
    if (defined $vals->{blockCount}) {
      $self->{blockCount} = $vals->{blockCount};
    }
    if (defined $vals->{unregisterCount}) {
      $self->{unregisterCount} = $vals->{unregisterCount};
    }
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SendBuddyMessageResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{requestId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{state});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{messageId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{eventNo});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{receiverCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{successCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{failCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{cancelCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{blockCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^16$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{unregisterCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SendBuddyMessageResult');
  if (defined $self->{requestId}) {
    $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{requestId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{state}) {
    $xfer += $output->writeFieldBegin('state', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{state});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{messageId}) {
    $xfer += $output->writeFieldBegin('messageId', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{messageId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{eventNo}) {
    $xfer += $output->writeFieldBegin('eventNo', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{eventNo});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{receiverCount}) {
    $xfer += $output->writeFieldBegin('receiverCount', Thrift::TType::I64, 11);
    $xfer += $output->writeI64($self->{receiverCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{successCount}) {
    $xfer += $output->writeFieldBegin('successCount', Thrift::TType::I64, 12);
    $xfer += $output->writeI64($self->{successCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{failCount}) {
    $xfer += $output->writeFieldBegin('failCount', Thrift::TType::I64, 13);
    $xfer += $output->writeI64($self->{failCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{cancelCount}) {
    $xfer += $output->writeFieldBegin('cancelCount', Thrift::TType::I64, 14);
    $xfer += $output->writeI64($self->{cancelCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{blockCount}) {
    $xfer += $output->writeFieldBegin('blockCount', Thrift::TType::I64, 15);
    $xfer += $output->writeI64($self->{blockCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unregisterCount}) {
    $xfer += $output->writeFieldBegin('unregisterCount', Thrift::TType::I64, 16);
    $xfer += $output->writeI64($self->{unregisterCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', Thrift::TType::I64, 21);
    $xfer += $output->writeI64($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', Thrift::TType::STRING, 22);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SetBuddyOnAirResult;
use base qw(Class::Accessor);
SetBuddyOnAirResult->mk_accessors( qw( requestId state eventNo receiverCount successCount failCount cancelCount unregisterCount timestamp message ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{requestId} = undef;
  $self->{state} = undef;
  $self->{eventNo} = undef;
  $self->{receiverCount} = undef;
  $self->{successCount} = undef;
  $self->{failCount} = undef;
  $self->{cancelCount} = undef;
  $self->{unregisterCount} = undef;
  $self->{timestamp} = undef;
  $self->{message} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{requestId}) {
      $self->{requestId} = $vals->{requestId};
    }
    if (defined $vals->{state}) {
      $self->{state} = $vals->{state};
    }
    if (defined $vals->{eventNo}) {
      $self->{eventNo} = $vals->{eventNo};
    }
    if (defined $vals->{receiverCount}) {
      $self->{receiverCount} = $vals->{receiverCount};
    }
    if (defined $vals->{successCount}) {
      $self->{successCount} = $vals->{successCount};
    }
    if (defined $vals->{failCount}) {
      $self->{failCount} = $vals->{failCount};
    }
    if (defined $vals->{cancelCount}) {
      $self->{cancelCount} = $vals->{cancelCount};
    }
    if (defined $vals->{unregisterCount}) {
      $self->{unregisterCount} = $vals->{unregisterCount};
    }
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SetBuddyOnAirResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{requestId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{state});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{eventNo});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{receiverCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{successCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{failCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{cancelCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{unregisterCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SetBuddyOnAirResult');
  if (defined $self->{requestId}) {
    $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{requestId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{state}) {
    $xfer += $output->writeFieldBegin('state', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{state});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{eventNo}) {
    $xfer += $output->writeFieldBegin('eventNo', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{eventNo});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{receiverCount}) {
    $xfer += $output->writeFieldBegin('receiverCount', Thrift::TType::I64, 11);
    $xfer += $output->writeI64($self->{receiverCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{successCount}) {
    $xfer += $output->writeFieldBegin('successCount', Thrift::TType::I64, 12);
    $xfer += $output->writeI64($self->{successCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{failCount}) {
    $xfer += $output->writeFieldBegin('failCount', Thrift::TType::I64, 13);
    $xfer += $output->writeI64($self->{failCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{cancelCount}) {
    $xfer += $output->writeFieldBegin('cancelCount', Thrift::TType::I64, 14);
    $xfer += $output->writeI64($self->{cancelCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unregisterCount}) {
    $xfer += $output->writeFieldBegin('unregisterCount', Thrift::TType::I64, 15);
    $xfer += $output->writeI64($self->{unregisterCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', Thrift::TType::I64, 21);
    $xfer += $output->writeI64($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', Thrift::TType::STRING, 22);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Settings;
use base qw(Class::Accessor);
Settings->mk_accessors( qw( notificationEnable notificationMuteExpiration notificationNewMessage notificationGroupInvitation notificationShowMessage notificationIncomingCall notificationSoundMessage notificationSoundGroup notificationDisabledWithSub privacySyncContacts privacySearchByPhoneNumber privacySearchByUserid privacySearchByEmail privacyAllowSecondaryDeviceLogin privacyProfileImagePostToMyhome privacyReceiveMessagesFromNotFriend contactMyTicket identityProvider identityIdentifier snsAccounts phoneRegistration emailConfirmationStatus preferenceLocale customModes ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{notificationEnable} = undef;
  $self->{notificationMuteExpiration} = undef;
  $self->{notificationNewMessage} = undef;
  $self->{notificationGroupInvitation} = undef;
  $self->{notificationShowMessage} = undef;
  $self->{notificationIncomingCall} = undef;
  $self->{notificationSoundMessage} = undef;
  $self->{notificationSoundGroup} = undef;
  $self->{notificationDisabledWithSub} = undef;
  $self->{privacySyncContacts} = undef;
  $self->{privacySearchByPhoneNumber} = undef;
  $self->{privacySearchByUserid} = undef;
  $self->{privacySearchByEmail} = undef;
  $self->{privacyAllowSecondaryDeviceLogin} = undef;
  $self->{privacyProfileImagePostToMyhome} = undef;
  $self->{privacyReceiveMessagesFromNotFriend} = undef;
  $self->{contactMyTicket} = undef;
  $self->{identityProvider} = undef;
  $self->{identityIdentifier} = undef;
  $self->{snsAccounts} = undef;
  $self->{phoneRegistration} = undef;
  $self->{emailConfirmationStatus} = undef;
  $self->{preferenceLocale} = undef;
  $self->{customModes} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{notificationEnable}) {
      $self->{notificationEnable} = $vals->{notificationEnable};
    }
    if (defined $vals->{notificationMuteExpiration}) {
      $self->{notificationMuteExpiration} = $vals->{notificationMuteExpiration};
    }
    if (defined $vals->{notificationNewMessage}) {
      $self->{notificationNewMessage} = $vals->{notificationNewMessage};
    }
    if (defined $vals->{notificationGroupInvitation}) {
      $self->{notificationGroupInvitation} = $vals->{notificationGroupInvitation};
    }
    if (defined $vals->{notificationShowMessage}) {
      $self->{notificationShowMessage} = $vals->{notificationShowMessage};
    }
    if (defined $vals->{notificationIncomingCall}) {
      $self->{notificationIncomingCall} = $vals->{notificationIncomingCall};
    }
    if (defined $vals->{notificationSoundMessage}) {
      $self->{notificationSoundMessage} = $vals->{notificationSoundMessage};
    }
    if (defined $vals->{notificationSoundGroup}) {
      $self->{notificationSoundGroup} = $vals->{notificationSoundGroup};
    }
    if (defined $vals->{notificationDisabledWithSub}) {
      $self->{notificationDisabledWithSub} = $vals->{notificationDisabledWithSub};
    }
    if (defined $vals->{privacySyncContacts}) {
      $self->{privacySyncContacts} = $vals->{privacySyncContacts};
    }
    if (defined $vals->{privacySearchByPhoneNumber}) {
      $self->{privacySearchByPhoneNumber} = $vals->{privacySearchByPhoneNumber};
    }
    if (defined $vals->{privacySearchByUserid}) {
      $self->{privacySearchByUserid} = $vals->{privacySearchByUserid};
    }
    if (defined $vals->{privacySearchByEmail}) {
      $self->{privacySearchByEmail} = $vals->{privacySearchByEmail};
    }
    if (defined $vals->{privacyAllowSecondaryDeviceLogin}) {
      $self->{privacyAllowSecondaryDeviceLogin} = $vals->{privacyAllowSecondaryDeviceLogin};
    }
    if (defined $vals->{privacyProfileImagePostToMyhome}) {
      $self->{privacyProfileImagePostToMyhome} = $vals->{privacyProfileImagePostToMyhome};
    }
    if (defined $vals->{privacyReceiveMessagesFromNotFriend}) {
      $self->{privacyReceiveMessagesFromNotFriend} = $vals->{privacyReceiveMessagesFromNotFriend};
    }
    if (defined $vals->{contactMyTicket}) {
      $self->{contactMyTicket} = $vals->{contactMyTicket};
    }
    if (defined $vals->{identityProvider}) {
      $self->{identityProvider} = $vals->{identityProvider};
    }
    if (defined $vals->{identityIdentifier}) {
      $self->{identityIdentifier} = $vals->{identityIdentifier};
    }
    if (defined $vals->{snsAccounts}) {
      $self->{snsAccounts} = $vals->{snsAccounts};
    }
    if (defined $vals->{phoneRegistration}) {
      $self->{phoneRegistration} = $vals->{phoneRegistration};
    }
    if (defined $vals->{emailConfirmationStatus}) {
      $self->{emailConfirmationStatus} = $vals->{emailConfirmationStatus};
    }
    if (defined $vals->{preferenceLocale}) {
      $self->{preferenceLocale} = $vals->{preferenceLocale};
    }
    if (defined $vals->{customModes}) {
      $self->{customModes} = $vals->{customModes};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Settings';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^10$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationEnable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{notificationMuteExpiration});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationNewMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationGroupInvitation});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationShowMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationIncomingCall});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^16$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{notificationSoundMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^17$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{notificationSoundGroup});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^18$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{notificationDisabledWithSub});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacySyncContacts});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacySearchByPhoneNumber});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacySearchByUserid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^23$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacySearchByEmail});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^24$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacyAllowSecondaryDeviceLogin});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^25$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacyProfileImagePostToMyhome});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^26$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{privacyReceiveMessagesFromNotFriend});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^30$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{contactMyTicket});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^40$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{identityProvider});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^41$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{identityIdentifier});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^42$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size254 = 0;
          $self->{snsAccounts} = {};
          my $_ktype255 = 0;
          my $_vtype256 = 0;
          $xfer += $input->readMapBegin(\$_ktype255, \$_vtype256, \$_size254);
          for (my $_i258 = 0; $_i258 < $_size254; ++$_i258)
          {
            my $key259 = 0;
            my $val260 = '';
            $xfer += $input->readI32(\$key259);
            $xfer += $input->readString(\$val260);
            $self->{snsAccounts}->{$key259} = $val260;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^43$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{phoneRegistration});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^44$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{emailConfirmationStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^50$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{preferenceLocale});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^60$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size261 = 0;
          $self->{customModes} = {};
          my $_ktype262 = 0;
          my $_vtype263 = 0;
          $xfer += $input->readMapBegin(\$_ktype262, \$_vtype263, \$_size261);
          for (my $_i265 = 0; $_i265 < $_size261; ++$_i265)
          {
            my $key266 = 0;
            my $val267 = '';
            $xfer += $input->readI32(\$key266);
            $xfer += $input->readString(\$val267);
            $self->{customModes}->{$key266} = $val267;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Settings');
  if (defined $self->{notificationEnable}) {
    $xfer += $output->writeFieldBegin('notificationEnable', Thrift::TType::BOOL, 10);
    $xfer += $output->writeBool($self->{notificationEnable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationMuteExpiration}) {
    $xfer += $output->writeFieldBegin('notificationMuteExpiration', Thrift::TType::I64, 11);
    $xfer += $output->writeI64($self->{notificationMuteExpiration});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationNewMessage}) {
    $xfer += $output->writeFieldBegin('notificationNewMessage', Thrift::TType::BOOL, 12);
    $xfer += $output->writeBool($self->{notificationNewMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationGroupInvitation}) {
    $xfer += $output->writeFieldBegin('notificationGroupInvitation', Thrift::TType::BOOL, 13);
    $xfer += $output->writeBool($self->{notificationGroupInvitation});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationShowMessage}) {
    $xfer += $output->writeFieldBegin('notificationShowMessage', Thrift::TType::BOOL, 14);
    $xfer += $output->writeBool($self->{notificationShowMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationIncomingCall}) {
    $xfer += $output->writeFieldBegin('notificationIncomingCall', Thrift::TType::BOOL, 15);
    $xfer += $output->writeBool($self->{notificationIncomingCall});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationSoundMessage}) {
    $xfer += $output->writeFieldBegin('notificationSoundMessage', Thrift::TType::STRING, 16);
    $xfer += $output->writeString($self->{notificationSoundMessage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationSoundGroup}) {
    $xfer += $output->writeFieldBegin('notificationSoundGroup', Thrift::TType::STRING, 17);
    $xfer += $output->writeString($self->{notificationSoundGroup});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{notificationDisabledWithSub}) {
    $xfer += $output->writeFieldBegin('notificationDisabledWithSub', Thrift::TType::BOOL, 18);
    $xfer += $output->writeBool($self->{notificationDisabledWithSub});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacySyncContacts}) {
    $xfer += $output->writeFieldBegin('privacySyncContacts', Thrift::TType::BOOL, 20);
    $xfer += $output->writeBool($self->{privacySyncContacts});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacySearchByPhoneNumber}) {
    $xfer += $output->writeFieldBegin('privacySearchByPhoneNumber', Thrift::TType::BOOL, 21);
    $xfer += $output->writeBool($self->{privacySearchByPhoneNumber});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacySearchByUserid}) {
    $xfer += $output->writeFieldBegin('privacySearchByUserid', Thrift::TType::BOOL, 22);
    $xfer += $output->writeBool($self->{privacySearchByUserid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacySearchByEmail}) {
    $xfer += $output->writeFieldBegin('privacySearchByEmail', Thrift::TType::BOOL, 23);
    $xfer += $output->writeBool($self->{privacySearchByEmail});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacyAllowSecondaryDeviceLogin}) {
    $xfer += $output->writeFieldBegin('privacyAllowSecondaryDeviceLogin', Thrift::TType::BOOL, 24);
    $xfer += $output->writeBool($self->{privacyAllowSecondaryDeviceLogin});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacyProfileImagePostToMyhome}) {
    $xfer += $output->writeFieldBegin('privacyProfileImagePostToMyhome', Thrift::TType::BOOL, 25);
    $xfer += $output->writeBool($self->{privacyProfileImagePostToMyhome});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{privacyReceiveMessagesFromNotFriend}) {
    $xfer += $output->writeFieldBegin('privacyReceiveMessagesFromNotFriend', Thrift::TType::BOOL, 26);
    $xfer += $output->writeBool($self->{privacyReceiveMessagesFromNotFriend});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contactMyTicket}) {
    $xfer += $output->writeFieldBegin('contactMyTicket', Thrift::TType::STRING, 30);
    $xfer += $output->writeString($self->{contactMyTicket});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{identityProvider}) {
    $xfer += $output->writeFieldBegin('identityProvider', Thrift::TType::I32, 40);
    $xfer += $output->writeI32($self->{identityProvider});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{identityIdentifier}) {
    $xfer += $output->writeFieldBegin('identityIdentifier', Thrift::TType::STRING, 41);
    $xfer += $output->writeString($self->{identityIdentifier});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{snsAccounts}) {
    $xfer += $output->writeFieldBegin('snsAccounts', Thrift::TType::MAP, 42);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::I32, Thrift::TType::STRING, scalar(keys %{$self->{snsAccounts}}));
      {
        while( my ($kiter268,$viter269) = each %{$self->{snsAccounts}}) 
        {
          $xfer += $output->writeI32($kiter268);
          $xfer += $output->writeString($viter269);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phoneRegistration}) {
    $xfer += $output->writeFieldBegin('phoneRegistration', Thrift::TType::BOOL, 43);
    $xfer += $output->writeBool($self->{phoneRegistration});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{emailConfirmationStatus}) {
    $xfer += $output->writeFieldBegin('emailConfirmationStatus', Thrift::TType::I32, 44);
    $xfer += $output->writeI32($self->{emailConfirmationStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{preferenceLocale}) {
    $xfer += $output->writeFieldBegin('preferenceLocale', Thrift::TType::STRING, 50);
    $xfer += $output->writeString($self->{preferenceLocale});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{customModes}) {
    $xfer += $output->writeFieldBegin('customModes', Thrift::TType::MAP, 60);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::I32, Thrift::TType::STRING, scalar(keys %{$self->{customModes}}));
      {
        while( my ($kiter270,$viter271) = each %{$self->{customModes}}) 
        {
          $xfer += $output->writeI32($kiter270);
          $xfer += $output->writeString($viter271);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SimpleChannelClient;
use base qw(Class::Accessor);
SimpleChannelClient->mk_accessors( qw( applicationType applicationVersion locale ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{applicationType} = undef;
  $self->{applicationVersion} = undef;
  $self->{locale} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{applicationType}) {
      $self->{applicationType} = $vals->{applicationType};
    }
    if (defined $vals->{applicationVersion}) {
      $self->{applicationVersion} = $vals->{applicationVersion};
    }
    if (defined $vals->{locale}) {
      $self->{locale} = $vals->{locale};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SimpleChannelClient';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{applicationType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{applicationVersion});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{locale});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SimpleChannelClient');
  if (defined $self->{applicationType}) {
    $xfer += $output->writeFieldBegin('applicationType', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{applicationType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{applicationVersion}) {
    $xfer += $output->writeFieldBegin('applicationVersion', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{applicationVersion});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{locale}) {
    $xfer += $output->writeFieldBegin('locale', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{locale});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SimpleChannelContact;
use base qw(Class::Accessor);
SimpleChannelContact->mk_accessors( qw( mid displayName pictureStatus picturePath statusMessage ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{mid} = undef;
  $self->{displayName} = undef;
  $self->{pictureStatus} = undef;
  $self->{picturePath} = undef;
  $self->{statusMessage} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{displayName}) {
      $self->{displayName} = $vals->{displayName};
    }
    if (defined $vals->{pictureStatus}) {
      $self->{pictureStatus} = $vals->{pictureStatus};
    }
    if (defined $vals->{picturePath}) {
      $self->{picturePath} = $vals->{picturePath};
    }
    if (defined $vals->{statusMessage}) {
      $self->{statusMessage} = $vals->{statusMessage};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SimpleChannelContact';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{displayName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{picturePath});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{statusMessage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SimpleChannelContact');
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{displayName}) {
    $xfer += $output->writeFieldBegin('displayName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{displayName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureStatus}) {
    $xfer += $output->writeFieldBegin('pictureStatus', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{pictureStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{picturePath}) {
    $xfer += $output->writeFieldBegin('picturePath', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{picturePath});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{statusMessage}) {
    $xfer += $output->writeFieldBegin('statusMessage', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{statusMessage});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SnsFriend;
use base qw(Class::Accessor);
SnsFriend->mk_accessors( qw( snsUserId snsUserName snsIdType ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{snsUserId} = undef;
  $self->{snsUserName} = undef;
  $self->{snsIdType} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{snsUserId}) {
      $self->{snsUserId} = $vals->{snsUserId};
    }
    if (defined $vals->{snsUserName}) {
      $self->{snsUserName} = $vals->{snsUserName};
    }
    if (defined $vals->{snsIdType}) {
      $self->{snsIdType} = $vals->{snsIdType};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SnsFriend';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{snsUserId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{snsUserName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{snsIdType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SnsFriend');
  if (defined $self->{snsUserId}) {
    $xfer += $output->writeFieldBegin('snsUserId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{snsUserId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{snsUserName}) {
    $xfer += $output->writeFieldBegin('snsUserName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{snsUserName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{snsIdType}) {
    $xfer += $output->writeFieldBegin('snsIdType', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{snsIdType});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SnsFriendContactRegistration;
use base qw(Class::Accessor);
SnsFriendContactRegistration->mk_accessors( qw( contact snsIdType snsUserId ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{contact} = undef;
  $self->{snsIdType} = undef;
  $self->{snsUserId} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{contact}) {
      $self->{contact} = $vals->{contact};
    }
    if (defined $vals->{snsIdType}) {
      $self->{snsIdType} = $vals->{snsIdType};
    }
    if (defined $vals->{snsUserId}) {
      $self->{snsUserId} = $vals->{snsUserId};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SnsFriendContactRegistration';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{contact} = Contact->new();
        $xfer += $self->{contact}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{snsIdType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{snsUserId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SnsFriendContactRegistration');
  if (defined $self->{contact}) {
    $xfer += $output->writeFieldBegin('contact', Thrift::TType::STRUCT, 1);
    $xfer += $self->{contact}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{snsIdType}) {
    $xfer += $output->writeFieldBegin('snsIdType', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{snsIdType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{snsUserId}) {
    $xfer += $output->writeFieldBegin('snsUserId', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{snsUserId});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SnsFriendModification;
use base qw(Class::Accessor);
SnsFriendModification->mk_accessors( qw( type snsFriend ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{type} = undef;
  $self->{snsFriend} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{snsFriend}) {
      $self->{snsFriend} = $vals->{snsFriend};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SnsFriendModification';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{snsFriend} = SnsFriend->new();
        $xfer += $self->{snsFriend}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SnsFriendModification');
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{snsFriend}) {
    $xfer += $output->writeFieldBegin('snsFriend', Thrift::TType::STRUCT, 2);
    $xfer += $self->{snsFriend}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SnsFriends;
use base qw(Class::Accessor);
SnsFriends->mk_accessors( qw( snsFriends hasMore ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{snsFriends} = undef;
  $self->{hasMore} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{snsFriends}) {
      $self->{snsFriends} = $vals->{snsFriends};
    }
    if (defined $vals->{hasMore}) {
      $self->{hasMore} = $vals->{hasMore};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SnsFriends';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size272 = 0;
          $self->{snsFriends} = [];
          my $_etype275 = 0;
          $xfer += $input->readListBegin(\$_etype275, \$_size272);
          for (my $_i276 = 0; $_i276 < $_size272; ++$_i276)
          {
            my $elem277 = undef;
            $elem277 = SnsFriend->new();
            $xfer += $elem277->read($input);
            push(@{$self->{snsFriends}},$elem277);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{hasMore});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SnsFriends');
  if (defined $self->{snsFriends}) {
    $xfer += $output->writeFieldBegin('snsFriends', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{snsFriends}}));
      {
        foreach my $iter278 (@{$self->{snsFriends}}) 
        {
          $xfer += ${iter278}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{hasMore}) {
    $xfer += $output->writeFieldBegin('hasMore', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{hasMore});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SnsIdUserStatus;
use base qw(Class::Accessor);
SnsIdUserStatus->mk_accessors( qw( userExisting phoneNumberRegistered sameDevice ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{userExisting} = undef;
  $self->{phoneNumberRegistered} = undef;
  $self->{sameDevice} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{userExisting}) {
      $self->{userExisting} = $vals->{userExisting};
    }
    if (defined $vals->{phoneNumberRegistered}) {
      $self->{phoneNumberRegistered} = $vals->{phoneNumberRegistered};
    }
    if (defined $vals->{sameDevice}) {
      $self->{sameDevice} = $vals->{sameDevice};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SnsIdUserStatus';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{userExisting});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{phoneNumberRegistered});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{sameDevice});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SnsIdUserStatus');
  if (defined $self->{userExisting}) {
    $xfer += $output->writeFieldBegin('userExisting', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{userExisting});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{phoneNumberRegistered}) {
    $xfer += $output->writeFieldBegin('phoneNumberRegistered', Thrift::TType::BOOL, 2);
    $xfer += $output->writeBool($self->{phoneNumberRegistered});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sameDevice}) {
    $xfer += $output->writeFieldBegin('sameDevice', Thrift::TType::BOOL, 3);
    $xfer += $output->writeBool($self->{sameDevice});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SnsProfile;
use base qw(Class::Accessor);
SnsProfile->mk_accessors( qw( snsUserId snsUserName email thumbnailUrl ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{snsUserId} = undef;
  $self->{snsUserName} = undef;
  $self->{email} = undef;
  $self->{thumbnailUrl} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{snsUserId}) {
      $self->{snsUserId} = $vals->{snsUserId};
    }
    if (defined $vals->{snsUserName}) {
      $self->{snsUserName} = $vals->{snsUserName};
    }
    if (defined $vals->{email}) {
      $self->{email} = $vals->{email};
    }
    if (defined $vals->{thumbnailUrl}) {
      $self->{thumbnailUrl} = $vals->{thumbnailUrl};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SnsProfile';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{snsUserId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{snsUserName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{email});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{thumbnailUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SnsProfile');
  if (defined $self->{snsUserId}) {
    $xfer += $output->writeFieldBegin('snsUserId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{snsUserId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{snsUserName}) {
    $xfer += $output->writeFieldBegin('snsUserName', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{snsUserName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{email}) {
    $xfer += $output->writeFieldBegin('email', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{email});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{thumbnailUrl}) {
    $xfer += $output->writeFieldBegin('thumbnailUrl', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{thumbnailUrl});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package SystemConfiguration;
use base qw(Class::Accessor);
SystemConfiguration->mk_accessors( qw( endpoint endpointSsl updateUrl c2dmAccount nniServer ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{endpoint} = undef;
  $self->{endpointSsl} = undef;
  $self->{updateUrl} = undef;
  $self->{c2dmAccount} = undef;
  $self->{nniServer} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{endpoint}) {
      $self->{endpoint} = $vals->{endpoint};
    }
    if (defined $vals->{endpointSsl}) {
      $self->{endpointSsl} = $vals->{endpointSsl};
    }
    if (defined $vals->{updateUrl}) {
      $self->{updateUrl} = $vals->{updateUrl};
    }
    if (defined $vals->{c2dmAccount}) {
      $self->{c2dmAccount} = $vals->{c2dmAccount};
    }
    if (defined $vals->{nniServer}) {
      $self->{nniServer} = $vals->{nniServer};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SystemConfiguration';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{endpoint});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{endpointSsl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{updateUrl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{c2dmAccount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{nniServer});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SystemConfiguration');
  if (defined $self->{endpoint}) {
    $xfer += $output->writeFieldBegin('endpoint', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{endpoint});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{endpointSsl}) {
    $xfer += $output->writeFieldBegin('endpointSsl', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{endpointSsl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{updateUrl}) {
    $xfer += $output->writeFieldBegin('updateUrl', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{updateUrl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{c2dmAccount}) {
    $xfer += $output->writeFieldBegin('c2dmAccount', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{c2dmAccount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{nniServer}) {
    $xfer += $output->writeFieldBegin('nniServer', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{nniServer});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TalkException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
TalkException->mk_accessors( qw( code reason parameterMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{code} = undef;
  $self->{reason} = undef;
  $self->{parameterMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{code}) {
      $self->{code} = $vals->{code};
    }
    if (defined $vals->{reason}) {
      $self->{reason} = $vals->{reason};
    }
    if (defined $vals->{parameterMap}) {
      $self->{parameterMap} = $vals->{parameterMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TalkException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{code});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{reason});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size279 = 0;
          $self->{parameterMap} = {};
          my $_ktype280 = 0;
          my $_vtype281 = 0;
          $xfer += $input->readMapBegin(\$_ktype280, \$_vtype281, \$_size279);
          for (my $_i283 = 0; $_i283 < $_size279; ++$_i283)
          {
            my $key284 = '';
            my $val285 = '';
            $xfer += $input->readString(\$key284);
            $xfer += $input->readString(\$val285);
            $self->{parameterMap}->{$key284} = $val285;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TalkException');
  if (defined $self->{code}) {
    $xfer += $output->writeFieldBegin('code', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{code});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reason}) {
    $xfer += $output->writeFieldBegin('reason', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{reason});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{parameterMap}) {
    $xfer += $output->writeFieldBegin('parameterMap', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{parameterMap}}));
      {
        while( my ($kiter286,$viter287) = each %{$self->{parameterMap}}) 
        {
          $xfer += $output->writeString($kiter286);
          $xfer += $output->writeString($viter287);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Ticket;
use base qw(Class::Accessor);
Ticket->mk_accessors( qw( id expirationTime maxUseCount ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{expirationTime} = undef;
  $self->{maxUseCount} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{expirationTime}) {
      $self->{expirationTime} = $vals->{expirationTime};
    }
    if (defined $vals->{maxUseCount}) {
      $self->{maxUseCount} = $vals->{maxUseCount};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Ticket';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{expirationTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{maxUseCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Ticket');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{expirationTime}) {
    $xfer += $output->writeFieldBegin('expirationTime', Thrift::TType::I64, 10);
    $xfer += $output->writeI64($self->{expirationTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{maxUseCount}) {
    $xfer += $output->writeFieldBegin('maxUseCount', Thrift::TType::I32, 21);
    $xfer += $output->writeI32($self->{maxUseCount});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TMessageBox;
use base qw(Class::Accessor);
TMessageBox->mk_accessors( qw( id channelId lastSeq unreadCount lastModifiedTime status midType lastMessages ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{channelId} = undef;
  $self->{lastSeq} = undef;
  $self->{unreadCount} = undef;
  $self->{lastModifiedTime} = undef;
  $self->{status} = undef;
  $self->{midType} = undef;
  $self->{lastMessages} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{channelId}) {
      $self->{channelId} = $vals->{channelId};
    }
    if (defined $vals->{lastSeq}) {
      $self->{lastSeq} = $vals->{lastSeq};
    }
    if (defined $vals->{unreadCount}) {
      $self->{unreadCount} = $vals->{unreadCount};
    }
    if (defined $vals->{lastModifiedTime}) {
      $self->{lastModifiedTime} = $vals->{lastModifiedTime};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
    if (defined $vals->{midType}) {
      $self->{midType} = $vals->{midType};
    }
    if (defined $vals->{lastMessages}) {
      $self->{lastMessages} = $vals->{lastMessages};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TMessageBox';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{channelId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{lastSeq});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{unreadCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{lastModifiedTime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{status});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{midType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size288 = 0;
          $self->{lastMessages} = [];
          my $_etype291 = 0;
          $xfer += $input->readListBegin(\$_etype291, \$_size288);
          for (my $_i292 = 0; $_i292 < $_size288; ++$_i292)
          {
            my $elem293 = undef;
            $elem293 = Message->new();
            $xfer += $elem293->read($input);
            push(@{$self->{lastMessages}},$elem293);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TMessageBox');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{channelId}) {
    $xfer += $output->writeFieldBegin('channelId', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{channelId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastSeq}) {
    $xfer += $output->writeFieldBegin('lastSeq', Thrift::TType::I64, 5);
    $xfer += $output->writeI64($self->{lastSeq});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unreadCount}) {
    $xfer += $output->writeFieldBegin('unreadCount', Thrift::TType::I64, 6);
    $xfer += $output->writeI64($self->{unreadCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastModifiedTime}) {
    $xfer += $output->writeFieldBegin('lastModifiedTime', Thrift::TType::I64, 7);
    $xfer += $output->writeI64($self->{lastModifiedTime});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::I32, 8);
    $xfer += $output->writeI32($self->{status});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{midType}) {
    $xfer += $output->writeFieldBegin('midType', Thrift::TType::I32, 9);
    $xfer += $output->writeI32($self->{midType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lastMessages}) {
    $xfer += $output->writeFieldBegin('lastMessages', Thrift::TType::LIST, 10);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{lastMessages}}));
      {
        foreach my $iter294 (@{$self->{lastMessages}}) 
        {
          $xfer += ${iter294}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TMessageBoxWrapUp;
use base qw(Class::Accessor);
TMessageBoxWrapUp->mk_accessors( qw( messageBox name contacts pictureRevision ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{messageBox} = undef;
  $self->{name} = undef;
  $self->{contacts} = undef;
  $self->{pictureRevision} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{messageBox}) {
      $self->{messageBox} = $vals->{messageBox};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{contacts}) {
      $self->{contacts} = $vals->{contacts};
    }
    if (defined $vals->{pictureRevision}) {
      $self->{pictureRevision} = $vals->{pictureRevision};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TMessageBoxWrapUp';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{messageBox} = TMessageBox->new();
        $xfer += $self->{messageBox}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size295 = 0;
          $self->{contacts} = [];
          my $_etype298 = 0;
          $xfer += $input->readListBegin(\$_etype298, \$_size295);
          for (my $_i299 = 0; $_i299 < $_size295; ++$_i299)
          {
            my $elem300 = undef;
            $elem300 = Contact->new();
            $xfer += $elem300->read($input);
            push(@{$self->{contacts}},$elem300);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pictureRevision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TMessageBoxWrapUp');
  if (defined $self->{messageBox}) {
    $xfer += $output->writeFieldBegin('messageBox', Thrift::TType::STRUCT, 1);
    $xfer += $self->{messageBox}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{contacts}) {
    $xfer += $output->writeFieldBegin('contacts', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{contacts}}));
      {
        foreach my $iter301 (@{$self->{contacts}}) 
        {
          $xfer += ${iter301}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pictureRevision}) {
    $xfer += $output->writeFieldBegin('pictureRevision', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{pictureRevision});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TMessageBoxWrapUpResponse;
use base qw(Class::Accessor);
TMessageBoxWrapUpResponse->mk_accessors( qw( messageBoxWrapUpList totalSize ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{messageBoxWrapUpList} = undef;
  $self->{totalSize} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{messageBoxWrapUpList}) {
      $self->{messageBoxWrapUpList} = $vals->{messageBoxWrapUpList};
    }
    if (defined $vals->{totalSize}) {
      $self->{totalSize} = $vals->{totalSize};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TMessageBoxWrapUpResponse';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size302 = 0;
          $self->{messageBoxWrapUpList} = [];
          my $_etype305 = 0;
          $xfer += $input->readListBegin(\$_etype305, \$_size302);
          for (my $_i306 = 0; $_i306 < $_size302; ++$_i306)
          {
            my $elem307 = undef;
            $elem307 = TMessageBoxWrapUp->new();
            $xfer += $elem307->read($input);
            push(@{$self->{messageBoxWrapUpList}},$elem307);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{totalSize});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TMessageBoxWrapUpResponse');
  if (defined $self->{messageBoxWrapUpList}) {
    $xfer += $output->writeFieldBegin('messageBoxWrapUpList', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{messageBoxWrapUpList}}));
      {
        foreach my $iter308 (@{$self->{messageBoxWrapUpList}}) 
        {
          $xfer += ${iter308}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{totalSize}) {
    $xfer += $output->writeFieldBegin('totalSize', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{totalSize});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UniversalNotificationServiceException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
UniversalNotificationServiceException->mk_accessors( qw( code reason parameterMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{code} = undef;
  $self->{reason} = undef;
  $self->{parameterMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{code}) {
      $self->{code} = $vals->{code};
    }
    if (defined $vals->{reason}) {
      $self->{reason} = $vals->{reason};
    }
    if (defined $vals->{parameterMap}) {
      $self->{parameterMap} = $vals->{parameterMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UniversalNotificationServiceException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{code});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{reason});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size309 = 0;
          $self->{parameterMap} = {};
          my $_ktype310 = 0;
          my $_vtype311 = 0;
          $xfer += $input->readMapBegin(\$_ktype310, \$_vtype311, \$_size309);
          for (my $_i313 = 0; $_i313 < $_size309; ++$_i313)
          {
            my $key314 = '';
            my $val315 = '';
            $xfer += $input->readString(\$key314);
            $xfer += $input->readString(\$val315);
            $self->{parameterMap}->{$key314} = $val315;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UniversalNotificationServiceException');
  if (defined $self->{code}) {
    $xfer += $output->writeFieldBegin('code', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{code});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reason}) {
    $xfer += $output->writeFieldBegin('reason', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{reason});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{parameterMap}) {
    $xfer += $output->writeFieldBegin('parameterMap', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{parameterMap}}));
      {
        while( my ($kiter316,$viter317) = each %{$self->{parameterMap}}) 
        {
          $xfer += $output->writeString($kiter316);
          $xfer += $output->writeString($viter317);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UpdateBuddyProfileResult;
use base qw(Class::Accessor);
UpdateBuddyProfileResult->mk_accessors( qw( requestId state eventNo receiverCount successCount failCount cancelCount unregisterCount timestamp message ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{requestId} = undef;
  $self->{state} = undef;
  $self->{eventNo} = undef;
  $self->{receiverCount} = undef;
  $self->{successCount} = undef;
  $self->{failCount} = undef;
  $self->{cancelCount} = undef;
  $self->{unregisterCount} = undef;
  $self->{timestamp} = undef;
  $self->{message} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{requestId}) {
      $self->{requestId} = $vals->{requestId};
    }
    if (defined $vals->{state}) {
      $self->{state} = $vals->{state};
    }
    if (defined $vals->{eventNo}) {
      $self->{eventNo} = $vals->{eventNo};
    }
    if (defined $vals->{receiverCount}) {
      $self->{receiverCount} = $vals->{receiverCount};
    }
    if (defined $vals->{successCount}) {
      $self->{successCount} = $vals->{successCount};
    }
    if (defined $vals->{failCount}) {
      $self->{failCount} = $vals->{failCount};
    }
    if (defined $vals->{cancelCount}) {
      $self->{cancelCount} = $vals->{cancelCount};
    }
    if (defined $vals->{unregisterCount}) {
      $self->{unregisterCount} = $vals->{unregisterCount};
    }
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UpdateBuddyProfileResult';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{requestId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{state});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{eventNo});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{receiverCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{successCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{failCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{cancelCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{unregisterCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^21$/ && do{      if ($ftype == Thrift::TType::I64) {
        $xfer += $input->readI64(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^22$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UpdateBuddyProfileResult');
  if (defined $self->{requestId}) {
    $xfer += $output->writeFieldBegin('requestId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{requestId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{state}) {
    $xfer += $output->writeFieldBegin('state', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{state});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{eventNo}) {
    $xfer += $output->writeFieldBegin('eventNo', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{eventNo});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{receiverCount}) {
    $xfer += $output->writeFieldBegin('receiverCount', Thrift::TType::I64, 11);
    $xfer += $output->writeI64($self->{receiverCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{successCount}) {
    $xfer += $output->writeFieldBegin('successCount', Thrift::TType::I64, 12);
    $xfer += $output->writeI64($self->{successCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{failCount}) {
    $xfer += $output->writeFieldBegin('failCount', Thrift::TType::I64, 13);
    $xfer += $output->writeI64($self->{failCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{cancelCount}) {
    $xfer += $output->writeFieldBegin('cancelCount', Thrift::TType::I64, 14);
    $xfer += $output->writeI64($self->{cancelCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{unregisterCount}) {
    $xfer += $output->writeFieldBegin('unregisterCount', Thrift::TType::I64, 15);
    $xfer += $output->writeI64($self->{unregisterCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', Thrift::TType::I64, 21);
    $xfer += $output->writeI64($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', Thrift::TType::STRING, 22);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UserAuthStatus;
use base qw(Class::Accessor);
UserAuthStatus->mk_accessors( qw( phoneNumberRegistered registeredSnsIdTypes ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{phoneNumberRegistered} = undef;
  $self->{registeredSnsIdTypes} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{phoneNumberRegistered}) {
      $self->{phoneNumberRegistered} = $vals->{phoneNumberRegistered};
    }
    if (defined $vals->{registeredSnsIdTypes}) {
      $self->{registeredSnsIdTypes} = $vals->{registeredSnsIdTypes};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'UserAuthStatus';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::BOOL) {
        $xfer += $input->readBool(\$self->{phoneNumberRegistered});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size318 = 0;
          $self->{registeredSnsIdTypes} = [];
          my $_etype321 = 0;
          $xfer += $input->readListBegin(\$_etype321, \$_size318);
          for (my $_i322 = 0; $_i322 < $_size318; ++$_i322)
          {
            my $elem323 = undef;
            $xfer += $input->readI32(\$elem323);
            push(@{$self->{registeredSnsIdTypes}},$elem323);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UserAuthStatus');
  if (defined $self->{phoneNumberRegistered}) {
    $xfer += $output->writeFieldBegin('phoneNumberRegistered', Thrift::TType::BOOL, 1);
    $xfer += $output->writeBool($self->{phoneNumberRegistered});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{registeredSnsIdTypes}) {
    $xfer += $output->writeFieldBegin('registeredSnsIdTypes', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::I32, scalar(@{$self->{registeredSnsIdTypes}}));
      {
        foreach my $iter324 (@{$self->{registeredSnsIdTypes}}) 
        {
          $xfer += $output->writeI32($iter324);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package VerificationSessionData;
use base qw(Class::Accessor);
VerificationSessionData->mk_accessors( qw( sessionId method callback normalizedPhone countryCode nationalSignificantNumber availableVerificationMethods ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{sessionId} = undef;
  $self->{method} = undef;
  $self->{callback} = undef;
  $self->{normalizedPhone} = undef;
  $self->{countryCode} = undef;
  $self->{nationalSignificantNumber} = undef;
  $self->{availableVerificationMethods} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{sessionId}) {
      $self->{sessionId} = $vals->{sessionId};
    }
    if (defined $vals->{method}) {
      $self->{method} = $vals->{method};
    }
    if (defined $vals->{callback}) {
      $self->{callback} = $vals->{callback};
    }
    if (defined $vals->{normalizedPhone}) {
      $self->{normalizedPhone} = $vals->{normalizedPhone};
    }
    if (defined $vals->{countryCode}) {
      $self->{countryCode} = $vals->{countryCode};
    }
    if (defined $vals->{nationalSignificantNumber}) {
      $self->{nationalSignificantNumber} = $vals->{nationalSignificantNumber};
    }
    if (defined $vals->{availableVerificationMethods}) {
      $self->{availableVerificationMethods} = $vals->{availableVerificationMethods};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'VerificationSessionData';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{sessionId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{method});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{callback});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{normalizedPhone});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{countryCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{nationalSignificantNumber});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size325 = 0;
          $self->{availableVerificationMethods} = [];
          my $_etype328 = 0;
          $xfer += $input->readListBegin(\$_etype328, \$_size325);
          for (my $_i329 = 0; $_i329 < $_size325; ++$_i329)
          {
            my $elem330 = undef;
            $xfer += $input->readI32(\$elem330);
            push(@{$self->{availableVerificationMethods}},$elem330);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('VerificationSessionData');
  if (defined $self->{sessionId}) {
    $xfer += $output->writeFieldBegin('sessionId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{sessionId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{method}) {
    $xfer += $output->writeFieldBegin('method', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{method});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{callback}) {
    $xfer += $output->writeFieldBegin('callback', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{callback});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{normalizedPhone}) {
    $xfer += $output->writeFieldBegin('normalizedPhone', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{normalizedPhone});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{countryCode}) {
    $xfer += $output->writeFieldBegin('countryCode', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{countryCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{nationalSignificantNumber}) {
    $xfer += $output->writeFieldBegin('nationalSignificantNumber', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{nationalSignificantNumber});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{availableVerificationMethods}) {
    $xfer += $output->writeFieldBegin('availableVerificationMethods', Thrift::TType::LIST, 7);
    {
      $xfer += $output->writeListBegin(Thrift::TType::I32, scalar(@{$self->{availableVerificationMethods}}));
      {
        foreach my $iter331 (@{$self->{availableVerificationMethods}}) 
        {
          $xfer += $output->writeI32($iter331);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package WapInvitation;
use base qw(Class::Accessor);
WapInvitation->mk_accessors( qw( type inviteeEmail inviterMid roomMid ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{type} = undef;
  $self->{inviteeEmail} = undef;
  $self->{inviterMid} = undef;
  $self->{roomMid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{inviteeEmail}) {
      $self->{inviteeEmail} = $vals->{inviteeEmail};
    }
    if (defined $vals->{inviterMid}) {
      $self->{inviterMid} = $vals->{inviterMid};
    }
    if (defined $vals->{roomMid}) {
      $self->{roomMid} = $vals->{roomMid};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'WapInvitation';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{inviteeEmail});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{inviterMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{roomMid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('WapInvitation');
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{inviteeEmail}) {
    $xfer += $output->writeFieldBegin('inviteeEmail', Thrift::TType::STRING, 10);
    $xfer += $output->writeString($self->{inviteeEmail});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{inviterMid}) {
    $xfer += $output->writeFieldBegin('inviterMid', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{inviterMid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{roomMid}) {
    $xfer += $output->writeFieldBegin('roomMid', Thrift::TType::STRING, 12);
    $xfer += $output->writeString($self->{roomMid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;
