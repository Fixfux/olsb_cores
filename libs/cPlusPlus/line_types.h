/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef line_TYPES_H
#define line_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




struct ApplicationType {
  enum type {
    IOS = 16,
    IOS_RC = 17,
    IOS_BETA = 18,
    IOS_ALPHA = 19,
    ANDROID = 32,
    ANDROID_RC = 33,
    ANDROID_BETA = 34,
    ANDROID_ALPHA = 35,
    WAP = 48,
    WAP_RC = 49,
    WAP_BETA = 50,
    WAP_ALPHA = 51,
    BOT = 64,
    BOT_RC = 65,
    BOT_BETA = 66,
    BOT_ALPHA = 67,
    WEB = 80,
    WEB_RC = 81,
    WEB_BETA = 82,
    WEB_ALPHA = 83,
    DESKTOPWIN = 96,
    DESKTOPWIN_RC = 97,
    DESKTOPWIN_BETA = 98,
    DESKTOPWIN_ALPHA = 99,
    DESKTOPMAC = 112,
    DESKTOPMAC_RC = 113,
    DESKTOPMAC_BETA = 114,
    DESKTOPMAC_ALPHA = 115,
    CHANNELGW = 128,
    CHANNELGW_RC = 129,
    CHANNELGW_BETA = 130,
    CHANNELGW_ALPHA = 131,
    CHANNELCP = 144,
    CHANNELCP_RC = 145,
    CHANNELCP_BETA = 146,
    CHANNELCP_ALPHA = 147,
    WINPHONE = 160,
    WINPHONE_RC = 161,
    WINPHONE_BETA = 162,
    WINPHONE_ALPHA = 163,
    BLACKBERRY = 176,
    BLACKBERRY_RC = 177,
    BLACKBERRY_BETA = 178,
    BLACKBERRY_ALPHA = 179,
    WINMETRO = 192,
    WINMETRO_RC = 193,
    WINMETRO_BETA = 194,
    WINMETRO_ALPHA = 195,
    S40 = 208,
    S40_RC = 209,
    S40_BETA = 210,
    S40_ALPHA = 211,
    CHRONO = 224,
    CHRONO_RC = 225,
    CHRONO_BETA = 226,
    CHRONO_ALPHA = 227,
    TIZEN = 256,
    TIZEN_RC = 257,
    TIZEN_BETA = 258,
    TIZEN_ALPHA = 259,
    VIRTUAL = 272
  };
};

extern const std::map<int, const char*> _ApplicationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ApplicationType::type& val);

std::string to_string(const ApplicationType::type& val);

struct BuddyBannerLinkType {
  enum type {
    BUDDY_BANNER_LINK_HIDDEN = 0,
    BUDDY_BANNER_LINK_MID = 1,
    BUDDY_BANNER_LINK_URL = 2
  };
};

extern const std::map<int, const char*> _BuddyBannerLinkType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BuddyBannerLinkType::type& val);

std::string to_string(const BuddyBannerLinkType::type& val);

struct BuddyOnAirType {
  enum type {
    NORMAL = 0,
    LIVE = 1,
    VOIP = 2
  };
};

extern const std::map<int, const char*> _BuddyOnAirType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BuddyOnAirType::type& val);

std::string to_string(const BuddyOnAirType::type& val);

struct BuddyResultState {
  enum type {
    ACCEPTED = 1,
    SUCCEEDED = 2,
    FAILED = 3,
    CANCELLED = 4,
    NOTIFY_FAILED = 5,
    STORING = 11,
    UPLOADING = 21,
    NOTIFYING = 31
  };
};

extern const std::map<int, const char*> _BuddyResultState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BuddyResultState::type& val);

std::string to_string(const BuddyResultState::type& val);

struct BuddySearchRequestSource {
  enum type {
    NA = 0,
    FRIEND_VIEW = 1,
    OFFICIAL_ACCOUNT_VIEW = 2
  };
};

extern const std::map<int, const char*> _BuddySearchRequestSource_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BuddySearchRequestSource::type& val);

std::string to_string(const BuddySearchRequestSource::type& val);

struct CarrierCode {
  enum type {
    NOT_SPECIFIED = 0,
    JP_DOCOMO = 1,
    JP_AU = 2,
    JP_SOFTBANK = 3,
    KR_SKT = 17,
    KR_KT = 18,
    KR_LGT = 19
  };
};

extern const std::map<int, const char*> _CarrierCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const CarrierCode::type& val);

std::string to_string(const CarrierCode::type& val);

struct ChannelConfiguration {
  enum type {
    MESSAGE = 0,
    MESSAGE_NOTIFICATION = 1,
    NOTIFICATION_CENTER = 2
  };
};

extern const std::map<int, const char*> _ChannelConfiguration_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ChannelConfiguration::type& val);

std::string to_string(const ChannelConfiguration::type& val);

struct ChannelErrorCode {
  enum type {
    ILLEGAL_ARGUMENT = 0,
    INTERNAL_ERROR = 1,
    CONNECTION_ERROR = 2,
    AUTHENTICATIONI_FAILED = 3,
    NEED_PERMISSION_APPROVAL = 4,
    COIN_NOT_USABLE = 5
  };
};

extern const std::map<int, const char*> _ChannelErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ChannelErrorCode::type& val);

std::string to_string(const ChannelErrorCode::type& val);

struct ChannelSyncType {
  enum type {
    SYNC = 0,
    REMOVE = 1
  };
};

extern const std::map<int, const char*> _ChannelSyncType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ChannelSyncType::type& val);

std::string to_string(const ChannelSyncType::type& val);

struct ContactAttribute {
  enum type {
    CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1,
    CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2,
    CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16,
    CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32
  };
};

extern const std::map<int, const char*> _ContactAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContactAttribute::type& val);

std::string to_string(const ContactAttribute::type& val);

struct ContactCategory {
  enum type {
    NORMAL = 0,
    RECOMMEND = 1
  };
};

extern const std::map<int, const char*> _ContactCategory_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContactCategory::type& val);

std::string to_string(const ContactCategory::type& val);

struct ContactRelation {
  enum type {
    ONEWAY = 0,
    BOTH = 1,
    NOT_REGISTERED = 2
  };
};

extern const std::map<int, const char*> _ContactRelation_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContactRelation::type& val);

std::string to_string(const ContactRelation::type& val);

struct ContactSetting {
  enum type {
    CONTACT_SETTING_NOTIFICATION_DISABLE = 1,
    CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2,
    CONTACT_SETTING_CONTACT_HIDE = 4,
    CONTACT_SETTING_FAVORITE = 8,
    CONTACT_SETTING_DELETE = 16
  };
};

extern const std::map<int, const char*> _ContactSetting_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContactSetting::type& val);

std::string to_string(const ContactSetting::type& val);

struct ContactStatus {
  enum type {
    UNSPECIFIED = 0,
    FRIEND = 1,
    FRIEND_BLOCKED = 2,
    RECOMMEND = 3,
    RECOMMEND_BLOCKED = 4,
    DELETED = 5,
    DELETED_BLOCKED = 6
  };
};

extern const std::map<int, const char*> _ContactStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContactStatus::type& val);

std::string to_string(const ContactStatus::type& val);

struct ContactType {
  enum type {
    MID = 0,
    PHONE = 1,
    EMAIL = 2,
    USERID = 3,
    PROXIMITY = 4,
    GROUP = 5,
    USER = 6,
    QRCODE = 7,
    PROMOTION_BOT = 8,
    REPAIR = 128,
    FACEBOOK = 2305,
    SINA = 2306,
    RENREN = 2307,
    FEIXIN = 2308
  };
};

extern const std::map<int, const char*> _ContactType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContactType::type& val);

std::string to_string(const ContactType::type& val);

struct ContentType {
  enum type {
    NONE = 0,
    IMAGE = 1,
    VIDEO = 2,
    AUDIO = 3,
    HTML = 4,
    PDF = 5,
    CALL = 6,
    STICKER = 7,
    PRESENCE = 8,
    GIFT = 9,
    GROUPBOARD = 10,
    APPLINK = 11,
    LINK = 12,
    CONTACT = 13,
    FILE = 14,
    LOCATION = 15,
    POSTNOTIFICATION = 16,
    RICH = 17,
    CHATEVENT = 18
  };
};

extern const std::map<int, const char*> _ContentType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ContentType::type& val);

std::string to_string(const ContentType::type& val);

struct CustomMode {
  enum type {
    PROMOTION_FRIENDS_INVITE = 1,
    CAPABILITY_SERVER_SIDE_SMS = 2,
    LINE_CLIENT_ANALYTICS_CONFIGURATION = 3
  };
};

extern const std::map<int, const char*> _CustomMode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const CustomMode::type& val);

std::string to_string(const CustomMode::type& val);

struct EmailConfirmationStatus {
  enum type {
    NOT_SPECIFIED = 0,
    NOT_YET = 1,
    DONE = 3
  };
};

extern const std::map<int, const char*> _EmailConfirmationStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const EmailConfirmationStatus::type& val);

std::string to_string(const EmailConfirmationStatus::type& val);

struct EmailConfirmationType {
  enum type {
    SERVER_SIDE_EMAIL = 0,
    CLIENT_SIDE_EMAIL = 1
  };
};

extern const std::map<int, const char*> _EmailConfirmationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const EmailConfirmationType::type& val);

std::string to_string(const EmailConfirmationType::type& val);

struct ErrorCode {
  enum type {
    ILLEGAL_ARGUMENT = 0,
    AUTHENTICATION_FAILED = 1,
    DB_FAILED = 2,
    INVALID_STATE = 3,
    EXCESSIVE_ACCESS = 4,
    NOT_FOUND = 5,
    INVALID_LENGTH = 6,
    NOT_AVAILABLE_USER = 7,
    NOT_AUTHORIZED_DEVICE = 8,
    INVALID_MID = 9,
    NOT_A_MEMBER = 10,
    INCOMPATIBLE_APP_VERSION = 11,
    NOT_READY = 12,
    NOT_AVAILABLE_SESSION = 13,
    NOT_AUTHORIZED_SESSION = 14,
    SYSTEM_ERROR = 15,
    NO_AVAILABLE_VERIFICATION_METHOD = 16,
    NOT_AUTHENTICATED = 17,
    INVALID_IDENTITY_CREDENTIAL = 18,
    NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19,
    INTERNAL_ERROR = 20,
    NO_SUCH_IDENTITY_IDENFIER = 21,
    DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22,
    ILLEGAL_IDENTITY_CREDENTIAL = 23,
    UNKNOWN_CHANNEL = 24,
    NO_SUCH_MESSAGE_BOX = 25,
    NOT_AVAILABLE_MESSAGE_BOX = 26,
    CHANNEL_DOES_NOT_MATCH = 27,
    NOT_YOUR_MESSAGE = 28,
    MESSAGE_DEFINED_ERROR = 29,
    USER_CANNOT_ACCEPT_PRESENTS = 30,
    USER_NOT_STICKER_OWNER = 32,
    MAINTENANCE_ERROR = 33,
    ACCOUNT_NOT_MATCHED = 34,
    ABUSE_BLOCK = 35,
    NOT_FRIEND = 36,
    NOT_ALLOWED_CALL = 37,
    BLOCK_FRIEND = 38,
    INCOMPATIBLE_VOIP_VERSION = 39,
    INVALID_SNS_ACCESS_TOKEN = 40,
    EXTERNAL_SERVICE_NOT_AVAILABLE = 41,
    NOT_ALLOWED_ADD_CONTACT = 42,
    NOT_CERTIFICATED = 43,
    NOT_ALLOWED_SECONDARY_DEVICE = 44,
    INVALID_PIN_CODE = 45,
    NOT_FOUND_IDENTITY_CREDENTIAL = 46,
    EXCEED_FILE_MAX_SIZE = 47,
    EXCEED_DAILY_QUOTA = 48,
    NOT_SUPPORT_SEND_FILE = 49,
    MUST_UPGRADE = 50,
    NOT_AVAILABLE_PIN_CODE_SESSION = 51
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ErrorCode::type& val);

std::string to_string(const ErrorCode::type& val);

struct FeatureType {
  enum type {
    OBJECT_STORAGE = 1
  };
};

extern const std::map<int, const char*> _FeatureType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const FeatureType::type& val);

std::string to_string(const FeatureType::type& val);

struct GroupAttribute {
  enum type {
    NAME = 1,
    PICTURE_STATUS = 2,
    ALL = 255
  };
};

extern const std::map<int, const char*> _GroupAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GroupAttribute::type& val);

std::string to_string(const GroupAttribute::type& val);

struct IdentityProvider {
  enum type {
    UNKNOWN = 0,
    LINE = 1,
    NAVER_KR = 2
  };
};

extern const std::map<int, const char*> _IdentityProvider_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const IdentityProvider::type& val);

std::string to_string(const IdentityProvider::type& val);

struct LoginResultType {
  enum type {
    SUCCESS = 1,
    REQUIRE_QRCODE = 2,
    REQUIRE_DEVICE_CONFIRM = 3
  };
};

extern const std::map<int, const char*> _LoginResultType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const LoginResultType::type& val);

std::string to_string(const LoginResultType::type& val);

struct MessageOperationType {
  enum type {
    SEND_MESSAGE = 1,
    RECEIVE_MESSAGE = 2,
    READ_MESSAGE = 3,
    NOTIFIED_READ_MESSAGE = 4,
    NOTIFIED_JOIN_CHAT = 5,
    FAILED_SEND_MESSAGE = 6,
    SEND_CONTENT = 7,
    SEND_CONTENT_RECEIPT = 8,
    SEND_CHAT_REMOVED = 9,
    REMOVE_ALL_MESSAGES = 10
  };
};

extern const std::map<int, const char*> _MessageOperationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MessageOperationType::type& val);

std::string to_string(const MessageOperationType::type& val);

struct MIDType {
  enum type {
    USER = 0,
    ROOM = 1,
    GROUP = 2
  };
};

extern const std::map<int, const char*> _MIDType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MIDType::type& val);

std::string to_string(const MIDType::type& val);

struct ModificationType {
  enum type {
    ADD = 0,
    REMOVE = 1,
    MODIFY = 2
  };
};

extern const std::map<int, const char*> _ModificationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ModificationType::type& val);

std::string to_string(const ModificationType::type& val);

struct NotificationItemFetchMode {
  enum type {
    ALL = 0,
    APPEND = 1
  };
};

extern const std::map<int, const char*> _NotificationItemFetchMode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const NotificationItemFetchMode::type& val);

std::string to_string(const NotificationItemFetchMode::type& val);

struct NotificationQueueType {
  enum type {
    GLOBAL = 1,
    MESSAGE = 2,
    PRIMARY = 3
  };
};

extern const std::map<int, const char*> _NotificationQueueType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const NotificationQueueType::type& val);

std::string to_string(const NotificationQueueType::type& val);

struct NotificationStatus {
  enum type {
    NOTIFICATION_ITEM_EXIST = 1,
    TIMELINE_ITEM_EXIST = 2,
    NOTE_GROUP_NEW_ITEM_EXIST = 4,
    TIMELINE_BUDDYGROUP_CHANGED = 8,
    NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16,
    ALBUM_ITEM_EXIST = 32,
    TIMELINE_ITEM_DELETED = 64
  };
};

extern const std::map<int, const char*> _NotificationStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const NotificationStatus::type& val);

std::string to_string(const NotificationStatus::type& val);

struct NotificationType {
  enum type {
    APPLE_APNS = 1,
    GOOGLE_C2DM = 2,
    NHN_NNI = 3,
    SKT_AOM = 4,
    MS_MPNS = 5,
    RIM_BIS = 6,
    GOOGLE_GCM = 7,
    NOKIA_NNAPI = 8,
    TIZEN = 9,
    LINE_BOT = 17,
    LINE_WAP = 18
  };
};

extern const std::map<int, const char*> _NotificationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const NotificationType::type& val);

std::string to_string(const NotificationType::type& val);

struct OpStatus {
  enum type {
    NORMAL = 0,
    ALERT_DISABLED = 1
  };
};

extern const std::map<int, const char*> _OpStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const OpStatus::type& val);

std::string to_string(const OpStatus::type& val);

struct OpType {
  enum type {
    END_OF_OPERATION = 0,
    UPDATE_PROFILE = 1,
    NOTIFIED_UPDATE_PROFILE = 2,
    REGISTER_USERID = 3,
    ADD_CONTACT = 4,
    NOTIFIED_ADD_CONTACT = 5,
    BLOCK_CONTACT = 6,
    UNBLOCK_CONTACT = 7,
    NOTIFIED_RECOMMEND_CONTACT = 8,
    CREATE_GROUP = 9,
    UPDATE_GROUP = 10,
    NOTIFIED_UPDATE_GROUP = 11,
    INVITE_INTO_GROUP = 12,
    NOTIFIED_INVITE_INTO_GROUP = 13,
    LEAVE_GROUP = 14,
    NOTIFIED_LEAVE_GROUP = 15,
    ACCEPT_GROUP_INVITATION = 16,
    NOTIFIED_ACCEPT_GROUP_INVITATION = 17,
    KICKOUT_FROM_GROUP = 18,
    NOTIFIED_KICKOUT_FROM_GROUP = 19,
    CREATE_ROOM = 20,
    INVITE_INTO_ROOM = 21,
    NOTIFIED_INVITE_INTO_ROOM = 22,
    LEAVE_ROOM = 23,
    NOTIFIED_LEAVE_ROOM = 24,
    SEND_MESSAGE = 25,
    RECEIVE_MESSAGE = 26,
    SEND_MESSAGE_RECEIPT = 27,
    RECEIVE_MESSAGE_RECEIPT = 28,
    SEND_CONTENT_RECEIPT = 29,
    RECEIVE_ANNOUNCEMENT = 30,
    CANCEL_INVITATION_GROUP = 31,
    NOTIFIED_CANCEL_INVITATION_GROUP = 32,
    NOTIFIED_UNREGISTER_USER = 33,
    REJECT_GROUP_INVITATION = 34,
    NOTIFIED_REJECT_GROUP_INVITATION = 35,
    UPDATE_SETTINGS = 36,
    NOTIFIED_REGISTER_USER = 37,
    INVITE_VIA_EMAIL = 38,
    NOTIFIED_REQUEST_RECOVERY = 39,
    SEND_CHAT_CHECKED = 40,
    SEND_CHAT_REMOVED = 41,
    NOTIFIED_FORCE_SYNC = 42,
    SEND_CONTENT = 43,
    SEND_MESSAGE_MYHOME = 44,
    NOTIFIED_UPDATE_CONTENT_PREVIEW = 45,
    REMOVE_ALL_MESSAGES = 46,
    NOTIFIED_UPDATE_PURCHASES = 47,
    DUMMY = 48,
    UPDATE_CONTACT = 49,
    NOTIFIED_RECEIVED_CALL = 50,
    CANCEL_CALL = 51,
    NOTIFIED_REDIRECT = 52,
    NOTIFIED_CHANNEL_SYNC = 53,
    FAILED_SEND_MESSAGE = 54,
    NOTIFIED_READ_MESSAGE = 55,
    FAILED_EMAIL_CONFIRMATION = 56,
    NOTIFIED_CHAT_CONTENT = 58,
    NOTIFIED_PUSH_NOTICENTER_ITEM = 59
  };
};

extern const std::map<int, const char*> _OpType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const OpType::type& val);

std::string to_string(const OpType::type& val);

struct PayloadType {
  enum type {
    PAYLOAD_BUY = 101,
    PAYLOAD_CS = 111,
    PAYLOAD_BONUS = 121,
    PAYLOAD_EVENT = 131
  };
};

extern const std::map<int, const char*> _PayloadType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PayloadType::type& val);

std::string to_string(const PayloadType::type& val);

struct PaymentPgType {
  enum type {
    PAYMENT_PG_NONE = 0,
    PAYMENT_PG_AU = 1,
    PAYMENT_PG_AL = 2
  };
};

extern const std::map<int, const char*> _PaymentPgType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PaymentPgType::type& val);

std::string to_string(const PaymentPgType::type& val);

struct PaymentType {
  enum type {
    PAYMENT_APPLE = 1,
    PAYMENT_GOOGLE = 2
  };
};

extern const std::map<int, const char*> _PaymentType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PaymentType::type& val);

std::string to_string(const PaymentType::type& val);

struct ProductBannerLinkType {
  enum type {
    BANNER_LINK_NONE = 0,
    BANNER_LINK_ITEM = 1,
    BANNER_LINK_URL = 2,
    BANNER_LINK_CATEGORY = 3
  };
};

extern const std::map<int, const char*> _ProductBannerLinkType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ProductBannerLinkType::type& val);

std::string to_string(const ProductBannerLinkType::type& val);

struct ProductEventType {
  enum type {
    NO_EVENT = 0,
    CARRIER_ANY = 65537,
    BUDDY_ANY = 131073,
    INSTALL_IOS = 196609,
    INSTALL_ANDROID = 196610,
    MISSION_ANY = 262145,
    MUSTBUY_ANY = 327681
  };
};

extern const std::map<int, const char*> _ProductEventType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ProductEventType::type& val);

std::string to_string(const ProductEventType::type& val);

struct ProfileAttribute {
  enum type {
    EMAIL = 1,
    DISPLAY_NAME = 2,
    PHONETIC_NAME = 4,
    PICTURE = 8,
    STATUS_MESSAGE = 16,
    ALLOW_SEARCH_BY_USERID = 32,
    ALLOW_SEARCH_BY_EMAIL = 64,
    BUDDY_STATUS = 128,
    ALL = 255
  };
};

extern const std::map<int, const char*> _ProfileAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ProfileAttribute::type& val);

std::string to_string(const ProfileAttribute::type& val);

struct PublicType {
  enum type {
    HIDDEN = 0,
    PUBLIC = 1000
  };
};

extern const std::map<int, const char*> _PublicType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PublicType::type& val);

std::string to_string(const PublicType::type& val);

struct RedirectType {
  enum type {
    NONE = 0,
    EXPIRE_SECOND = 1
  };
};

extern const std::map<int, const char*> _RedirectType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const RedirectType::type& val);

std::string to_string(const RedirectType::type& val);

struct RegistrationType {
  enum type {
    PHONE = 0,
    EMAIL_WAP = 1,
    FACEBOOK = 2305,
    SINA = 2306,
    RENREN = 2307,
    FEIXIN = 2308
  };
};

extern const std::map<int, const char*> _RegistrationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const RegistrationType::type& val);

std::string to_string(const RegistrationType::type& val);

struct SettingsAttribute {
  enum type {
    NOTIFICATION_ENABLE = 1,
    NOTIFICATION_MUTE_EXPIRATION = 2,
    NOTIFICATION_NEW_MESSAGE = 4,
    NOTIFICATION_GROUP_INVITATION = 8,
    NOTIFICATION_SHOW_MESSAGE = 16,
    NOTIFICATION_INCOMING_CALL = 32,
    PRIVACY_SYNC_CONTACTS = 64,
    PRIVACY_SEARCH_BY_PHONE_NUMBER = 128,
    NOTIFICATION_SOUND_MESSAGE = 256,
    NOTIFICATION_SOUND_GROUP = 512,
    CONTACT_MY_TICKET = 1024,
    IDENTITY_PROVIDER = 2048,
    IDENTITY_IDENTIFIER = 4096,
    PRIVACY_SEARCH_BY_USERID = 8192,
    PRIVACY_SEARCH_BY_EMAIL = 16384,
    PREFERENCE_LOCALE = 32768,
    NOTIFICATION_DISABLED_WITH_SUB = 65536,
    SNS_ACCOUNT = 524288,
    PHONE_REGISTRATION = 1048576,
    PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152,
    CUSTOM_MODE = 4194304,
    PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608,
    EMAIL_CONFIRMATION_STATUS = 16777216,
    PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432,
    ALL = 2147483647
  };
};

extern const std::map<int, const char*> _SettingsAttribute_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SettingsAttribute::type& val);

std::string to_string(const SettingsAttribute::type& val);

struct SnsIdType {
  enum type {
    FACEBOOK = 1,
    SINA = 2,
    RENREN = 3,
    FEIXIN = 4
  };
};

extern const std::map<int, const char*> _SnsIdType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SnsIdType::type& val);

std::string to_string(const SnsIdType::type& val);

struct SpammerReason {
  enum type {
    OTHER = 0,
    ADVERTISING = 1,
    GENDER_HARASSMENT = 2,
    HARASSMENT = 3
  };
};

extern const std::map<int, const char*> _SpammerReason_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SpammerReason::type& val);

std::string to_string(const SpammerReason::type& val);

struct SyncActionType {
  enum type {
    SYNC = 0,
    REPORT = 1
  };
};

extern const std::map<int, const char*> _SyncActionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SyncActionType::type& val);

std::string to_string(const SyncActionType::type& val);

struct SyncCategory {
  enum type {
    PROFILE = 0,
    SETTINGS = 1,
    OPS = 2,
    CONTACT = 3,
    RECOMMEND = 4,
    BLOCK = 5,
    GROUP = 6,
    ROOM = 7,
    NOTIFICATION = 8
  };
};

extern const std::map<int, const char*> _SyncCategory_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SyncCategory::type& val);

std::string to_string(const SyncCategory::type& val);

struct TMessageBoxStatus {
  enum type {
    ACTIVATED = 1,
    UNREAD = 2
  };
};

extern const std::map<int, const char*> _TMessageBoxStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TMessageBoxStatus::type& val);

std::string to_string(const TMessageBoxStatus::type& val);

struct UniversalNotificationServiceErrorCode {
  enum type {
    INTERNAL_ERROR = 0,
    INVALID_KEY = 1,
    ILLEGAL_ARGUMENT = 2,
    TOO_MANY_REQUEST = 3,
    AUTHENTICATION_FAILED = 4,
    NO_WRITE_PERMISSION = 5
  };
};

extern const std::map<int, const char*> _UniversalNotificationServiceErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const UniversalNotificationServiceErrorCode::type& val);

std::string to_string(const UniversalNotificationServiceErrorCode::type& val);

struct UnregistrationReason {
  enum type {
    UNREGISTRATION_REASON_UNREGISTER_USER = 1,
    UNREGISTRATION_REASON_UNBIND_DEVICE = 2
  };
};

extern const std::map<int, const char*> _UnregistrationReason_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const UnregistrationReason::type& val);

std::string to_string(const UnregistrationReason::type& val);

struct UserAgeType {
  enum type {
    OVER = 1,
    UNDER = 2,
    UNDEFINED = 3
  };
};

extern const std::map<int, const char*> _UserAgeType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const UserAgeType::type& val);

std::string to_string(const UserAgeType::type& val);

struct VerificationMethod {
  enum type {
    NO_AVAILABLE = 0,
    PIN_VIA_SMS = 1,
    CALLERID_INDIGO = 2,
    PIN_VIA_TTS = 4,
    SKIP = 10
  };
};

extern const std::map<int, const char*> _VerificationMethod_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const VerificationMethod::type& val);

std::string to_string(const VerificationMethod::type& val);

struct VerificationResult {
  enum type {
    FAILED = 0,
    OK_NOT_REGISTERED_YET = 1,
    OK_REGISTERED_WITH_SAME_DEVICE = 2,
    OK_REGISTERED_WITH_ANOTHER_DEVICE = 3
  };
};

extern const std::map<int, const char*> _VerificationResult_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const VerificationResult::type& val);

std::string to_string(const VerificationResult::type& val);

struct WapInvitationType {
  enum type {
    REGISTRATION = 1,
    CHAT = 2
  };
};

extern const std::map<int, const char*> _WapInvitationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const WapInvitationType::type& val);

std::string to_string(const WapInvitationType::type& val);

class AgeCheckDocomoResult;

class AgeCheckRequestResult;

class Announcement;

class ChannelProvider;

class ChannelInfo;

class ApprovedChannelInfo;

class ApprovedChannelInfos;

class AuthQrcode;

class BuddyBanner;

class BuddyDetail;

class Contact;

class BuddyList;

class Location;

class BuddyMessageRequest;

class BuddyOnAirUrls;

class BuddyOnAir;

class BuddyProfile;

class BuddySearchResult;

class ChannelDomain;

class ChannelDomains;

class ChannelException;

class ChannelInfos;

class ChannelNotificationSetting;

class ChannelSyncDatas;

class ChannelToken;

class Coin;

class CoinPayLoad;

class CoinHistory;

class CoinHistoryCondition;

class CoinHistoryResult;

class CoinProductItem;

class CoinPurchaseConfirm;

class CoinPurchaseReservation;

class CoinUseReservationItem;

class CoinUseReservation;

class CompactContact;

class ContactModification;

class ContactRegistration;

class ContactReport;

class ContactReportResult;

class DeviceInfo;

class EmailConfirmation;

class EmailConfirmationSession;

class FriendChannelMatrix;

class FriendChannelMatricesResponse;

class Geolocation;

class NotificationTarget;

class GlobalEvent;

class Group;

class IdentityCredential;

class LastReadMessageId;

class LastReadMessageIds;

class LoginResult;

class LoginSession;

class Message;

class MessageOperation;

class MessageOperations;

class MetaProfile;

class NotificationItem;

class NotificationFetchResult;

class Operation;

class PaymentReservation;

class PaymentReservationResult;

class Product;

class ProductList;

class ProductSimple;

class ProductSimpleList;

class Profile;

class ProximityMatchCandidateResult;

class RegisterWithSnsIdResult;

class RequestTokenResponse;

class Room;

class RSAKey;

class SendBuddyMessageResult;

class SetBuddyOnAirResult;

class Settings;

class SimpleChannelClient;

class SimpleChannelContact;

class SnsFriend;

class SnsFriendContactRegistration;

class SnsFriendModification;

class SnsFriends;

class SnsIdUserStatus;

class SnsProfile;

class SystemConfiguration;

class TalkException;

class Ticket;

class TMessageBox;

class TMessageBoxWrapUp;

class TMessageBoxWrapUpResponse;

class UniversalNotificationServiceException;

class UpdateBuddyProfileResult;

class UserAuthStatus;

class VerificationSessionData;

class WapInvitation;

typedef struct _AgeCheckDocomoResult__isset {
  _AgeCheckDocomoResult__isset() : authUrl(false), userAgeType(false) {}
  bool authUrl :1;
  bool userAgeType :1;
} _AgeCheckDocomoResult__isset;

class AgeCheckDocomoResult : public virtual ::apache::thrift::TBase {
 public:

  AgeCheckDocomoResult(const AgeCheckDocomoResult&);
  AgeCheckDocomoResult& operator=(const AgeCheckDocomoResult&);
  AgeCheckDocomoResult() : authUrl(), userAgeType((UserAgeType::type)0) {
  }

  virtual ~AgeCheckDocomoResult() noexcept;
  std::string authUrl;
  UserAgeType::type userAgeType;

  _AgeCheckDocomoResult__isset __isset;

  void __set_authUrl(const std::string& val);

  void __set_userAgeType(const UserAgeType::type val);

  bool operator == (const AgeCheckDocomoResult & rhs) const
  {
    if (!(authUrl == rhs.authUrl))
      return false;
    if (!(userAgeType == rhs.userAgeType))
      return false;
    return true;
  }
  bool operator != (const AgeCheckDocomoResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgeCheckDocomoResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AgeCheckDocomoResult &a, AgeCheckDocomoResult &b);

std::ostream& operator<<(std::ostream& out, const AgeCheckDocomoResult& obj);

typedef struct _AgeCheckRequestResult__isset {
  _AgeCheckRequestResult__isset() : authUrl(false), sessionId(false) {}
  bool authUrl :1;
  bool sessionId :1;
} _AgeCheckRequestResult__isset;

class AgeCheckRequestResult : public virtual ::apache::thrift::TBase {
 public:

  AgeCheckRequestResult(const AgeCheckRequestResult&);
  AgeCheckRequestResult& operator=(const AgeCheckRequestResult&);
  AgeCheckRequestResult() : authUrl(), sessionId() {
  }

  virtual ~AgeCheckRequestResult() noexcept;
  std::string authUrl;
  std::string sessionId;

  _AgeCheckRequestResult__isset __isset;

  void __set_authUrl(const std::string& val);

  void __set_sessionId(const std::string& val);

  bool operator == (const AgeCheckRequestResult & rhs) const
  {
    if (!(authUrl == rhs.authUrl))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const AgeCheckRequestResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AgeCheckRequestResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AgeCheckRequestResult &a, AgeCheckRequestResult &b);

std::ostream& operator<<(std::ostream& out, const AgeCheckRequestResult& obj);

typedef struct _Announcement__isset {
  _Announcement__isset() : index(false), forceUpdate(false), title(false), text(false), createdTime(false), pictureUrl(false), thumbnailUrl(false) {}
  bool index :1;
  bool forceUpdate :1;
  bool title :1;
  bool text :1;
  bool createdTime :1;
  bool pictureUrl :1;
  bool thumbnailUrl :1;
} _Announcement__isset;

class Announcement : public virtual ::apache::thrift::TBase {
 public:

  Announcement(const Announcement&);
  Announcement& operator=(const Announcement&);
  Announcement() : index(0), forceUpdate(0), title(), text(), createdTime(0), pictureUrl(), thumbnailUrl() {
  }

  virtual ~Announcement() noexcept;
  int32_t index;
  bool forceUpdate;
  std::string title;
  std::string text;
  int64_t createdTime;
  std::string pictureUrl;
  std::string thumbnailUrl;

  _Announcement__isset __isset;

  void __set_index(const int32_t val);

  void __set_forceUpdate(const bool val);

  void __set_title(const std::string& val);

  void __set_text(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_pictureUrl(const std::string& val);

  void __set_thumbnailUrl(const std::string& val);

  bool operator == (const Announcement & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(forceUpdate == rhs.forceUpdate))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(pictureUrl == rhs.pictureUrl))
      return false;
    if (!(thumbnailUrl == rhs.thumbnailUrl))
      return false;
    return true;
  }
  bool operator != (const Announcement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Announcement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Announcement &a, Announcement &b);

std::ostream& operator<<(std::ostream& out, const Announcement& obj);

typedef struct _ChannelProvider__isset {
  _ChannelProvider__isset() : name(false) {}
  bool name :1;
} _ChannelProvider__isset;

class ChannelProvider : public virtual ::apache::thrift::TBase {
 public:

  ChannelProvider(const ChannelProvider&);
  ChannelProvider& operator=(const ChannelProvider&);
  ChannelProvider() : name() {
  }

  virtual ~ChannelProvider() noexcept;
  std::string name;

  _ChannelProvider__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const ChannelProvider & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const ChannelProvider &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelProvider & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelProvider &a, ChannelProvider &b);

std::ostream& operator<<(std::ostream& out, const ChannelProvider& obj);

typedef struct _ChannelInfo__isset {
  _ChannelInfo__isset() : channelId(false), name(false), entryPageUrl(false), descriptionText(false), provider(false), publicType(false), iconImage(false), permissions(false), iconThumbnailImage(false), channelConfigurations(false) {}
  bool channelId :1;
  bool name :1;
  bool entryPageUrl :1;
  bool descriptionText :1;
  bool provider :1;
  bool publicType :1;
  bool iconImage :1;
  bool permissions :1;
  bool iconThumbnailImage :1;
  bool channelConfigurations :1;
} _ChannelInfo__isset;

class ChannelInfo : public virtual ::apache::thrift::TBase {
 public:

  ChannelInfo(const ChannelInfo&);
  ChannelInfo& operator=(const ChannelInfo&);
  ChannelInfo() : channelId(), name(), entryPageUrl(), descriptionText(), publicType((PublicType::type)0), iconImage(), iconThumbnailImage() {
  }

  virtual ~ChannelInfo() noexcept;
  std::string channelId;
  std::string name;
  std::string entryPageUrl;
  std::string descriptionText;
  ChannelProvider provider;
  PublicType::type publicType;
  std::string iconImage;
  std::vector<std::string>  permissions;
  std::string iconThumbnailImage;
  std::vector<ChannelConfiguration::type>  channelConfigurations;

  _ChannelInfo__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_name(const std::string& val);

  void __set_entryPageUrl(const std::string& val);

  void __set_descriptionText(const std::string& val);

  void __set_provider(const ChannelProvider& val);

  void __set_publicType(const PublicType::type val);

  void __set_iconImage(const std::string& val);

  void __set_permissions(const std::vector<std::string> & val);

  void __set_iconThumbnailImage(const std::string& val);

  void __set_channelConfigurations(const std::vector<ChannelConfiguration::type> & val);

  bool operator == (const ChannelInfo & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(entryPageUrl == rhs.entryPageUrl))
      return false;
    if (!(descriptionText == rhs.descriptionText))
      return false;
    if (!(provider == rhs.provider))
      return false;
    if (!(publicType == rhs.publicType))
      return false;
    if (!(iconImage == rhs.iconImage))
      return false;
    if (!(permissions == rhs.permissions))
      return false;
    if (!(iconThumbnailImage == rhs.iconThumbnailImage))
      return false;
    if (!(channelConfigurations == rhs.channelConfigurations))
      return false;
    return true;
  }
  bool operator != (const ChannelInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelInfo &a, ChannelInfo &b);

std::ostream& operator<<(std::ostream& out, const ChannelInfo& obj);

typedef struct _ApprovedChannelInfo__isset {
  _ApprovedChannelInfo__isset() : channelInfo(false), approvedAt(false) {}
  bool channelInfo :1;
  bool approvedAt :1;
} _ApprovedChannelInfo__isset;

class ApprovedChannelInfo : public virtual ::apache::thrift::TBase {
 public:

  ApprovedChannelInfo(const ApprovedChannelInfo&);
  ApprovedChannelInfo& operator=(const ApprovedChannelInfo&);
  ApprovedChannelInfo() : approvedAt(0) {
  }

  virtual ~ApprovedChannelInfo() noexcept;
  ChannelInfo channelInfo;
  int64_t approvedAt;

  _ApprovedChannelInfo__isset __isset;

  void __set_channelInfo(const ChannelInfo& val);

  void __set_approvedAt(const int64_t val);

  bool operator == (const ApprovedChannelInfo & rhs) const
  {
    if (!(channelInfo == rhs.channelInfo))
      return false;
    if (!(approvedAt == rhs.approvedAt))
      return false;
    return true;
  }
  bool operator != (const ApprovedChannelInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApprovedChannelInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApprovedChannelInfo &a, ApprovedChannelInfo &b);

std::ostream& operator<<(std::ostream& out, const ApprovedChannelInfo& obj);

typedef struct _ApprovedChannelInfos__isset {
  _ApprovedChannelInfos__isset() : approvedChannelInfos(false), revision(false) {}
  bool approvedChannelInfos :1;
  bool revision :1;
} _ApprovedChannelInfos__isset;

class ApprovedChannelInfos : public virtual ::apache::thrift::TBase {
 public:

  ApprovedChannelInfos(const ApprovedChannelInfos&);
  ApprovedChannelInfos& operator=(const ApprovedChannelInfos&);
  ApprovedChannelInfos() : revision(0) {
  }

  virtual ~ApprovedChannelInfos() noexcept;
  std::vector<ApprovedChannelInfo>  approvedChannelInfos;
  int64_t revision;

  _ApprovedChannelInfos__isset __isset;

  void __set_approvedChannelInfos(const std::vector<ApprovedChannelInfo> & val);

  void __set_revision(const int64_t val);

  bool operator == (const ApprovedChannelInfos & rhs) const
  {
    if (!(approvedChannelInfos == rhs.approvedChannelInfos))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const ApprovedChannelInfos &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApprovedChannelInfos & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApprovedChannelInfos &a, ApprovedChannelInfos &b);

std::ostream& operator<<(std::ostream& out, const ApprovedChannelInfos& obj);

typedef struct _AuthQrcode__isset {
  _AuthQrcode__isset() : qrcode(false), verifier(false) {}
  bool qrcode :1;
  bool verifier :1;
} _AuthQrcode__isset;

class AuthQrcode : public virtual ::apache::thrift::TBase {
 public:

  AuthQrcode(const AuthQrcode&);
  AuthQrcode& operator=(const AuthQrcode&);
  AuthQrcode() : qrcode(), verifier() {
  }

  virtual ~AuthQrcode() noexcept;
  std::string qrcode;
  std::string verifier;

  _AuthQrcode__isset __isset;

  void __set_qrcode(const std::string& val);

  void __set_verifier(const std::string& val);

  bool operator == (const AuthQrcode & rhs) const
  {
    if (!(qrcode == rhs.qrcode))
      return false;
    if (!(verifier == rhs.verifier))
      return false;
    return true;
  }
  bool operator != (const AuthQrcode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthQrcode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AuthQrcode &a, AuthQrcode &b);

std::ostream& operator<<(std::ostream& out, const AuthQrcode& obj);

typedef struct _BuddyBanner__isset {
  _BuddyBanner__isset() : buddyBannerLinkType(false), buddyBannerLink(false), buddyBannerImageUrl(false) {}
  bool buddyBannerLinkType :1;
  bool buddyBannerLink :1;
  bool buddyBannerImageUrl :1;
} _BuddyBanner__isset;

class BuddyBanner : public virtual ::apache::thrift::TBase {
 public:

  BuddyBanner(const BuddyBanner&);
  BuddyBanner& operator=(const BuddyBanner&);
  BuddyBanner() : buddyBannerLinkType((BuddyBannerLinkType::type)0), buddyBannerLink(), buddyBannerImageUrl() {
  }

  virtual ~BuddyBanner() noexcept;
  BuddyBannerLinkType::type buddyBannerLinkType;
  std::string buddyBannerLink;
  std::string buddyBannerImageUrl;

  _BuddyBanner__isset __isset;

  void __set_buddyBannerLinkType(const BuddyBannerLinkType::type val);

  void __set_buddyBannerLink(const std::string& val);

  void __set_buddyBannerImageUrl(const std::string& val);

  bool operator == (const BuddyBanner & rhs) const
  {
    if (!(buddyBannerLinkType == rhs.buddyBannerLinkType))
      return false;
    if (!(buddyBannerLink == rhs.buddyBannerLink))
      return false;
    if (!(buddyBannerImageUrl == rhs.buddyBannerImageUrl))
      return false;
    return true;
  }
  bool operator != (const BuddyBanner &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyBanner & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddyBanner &a, BuddyBanner &b);

std::ostream& operator<<(std::ostream& out, const BuddyBanner& obj);

typedef struct _BuddyDetail__isset {
  _BuddyDetail__isset() : mid(false), memberCount(false), onAir(false), businessAccount(false), addable(false), acceptableContentTypes(false), capableMyhome(false) {}
  bool mid :1;
  bool memberCount :1;
  bool onAir :1;
  bool businessAccount :1;
  bool addable :1;
  bool acceptableContentTypes :1;
  bool capableMyhome :1;
} _BuddyDetail__isset;

class BuddyDetail : public virtual ::apache::thrift::TBase {
 public:

  BuddyDetail(const BuddyDetail&);
  BuddyDetail& operator=(const BuddyDetail&);
  BuddyDetail() : mid(), memberCount(0), onAir(0), businessAccount(0), addable(0), capableMyhome(0) {
  }

  virtual ~BuddyDetail() noexcept;
  std::string mid;
  int64_t memberCount;
  bool onAir;
  bool businessAccount;
  bool addable;
  std::set<ContentType::type>  acceptableContentTypes;
  bool capableMyhome;

  _BuddyDetail__isset __isset;

  void __set_mid(const std::string& val);

  void __set_memberCount(const int64_t val);

  void __set_onAir(const bool val);

  void __set_businessAccount(const bool val);

  void __set_addable(const bool val);

  void __set_acceptableContentTypes(const std::set<ContentType::type> & val);

  void __set_capableMyhome(const bool val);

  bool operator == (const BuddyDetail & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(memberCount == rhs.memberCount))
      return false;
    if (!(onAir == rhs.onAir))
      return false;
    if (!(businessAccount == rhs.businessAccount))
      return false;
    if (!(addable == rhs.addable))
      return false;
    if (!(acceptableContentTypes == rhs.acceptableContentTypes))
      return false;
    if (!(capableMyhome == rhs.capableMyhome))
      return false;
    return true;
  }
  bool operator != (const BuddyDetail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyDetail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddyDetail &a, BuddyDetail &b);

std::ostream& operator<<(std::ostream& out, const BuddyDetail& obj);

typedef struct _Contact__isset {
  _Contact__isset() : mid(false), createdTime(false), type(false), status(false), relation(false), displayName(false), phoneticName(false), pictureStatus(false), thumbnailUrl(false), statusMessage(false), displayNameOverridden(false), favoriteTime(false), capableVoiceCall(false), capableVideoCall(false), capableMyhome(false), capableBuddy(false), attributes(false), settings(false), picturePath(false) {}
  bool mid :1;
  bool createdTime :1;
  bool type :1;
  bool status :1;
  bool relation :1;
  bool displayName :1;
  bool phoneticName :1;
  bool pictureStatus :1;
  bool thumbnailUrl :1;
  bool statusMessage :1;
  bool displayNameOverridden :1;
  bool favoriteTime :1;
  bool capableVoiceCall :1;
  bool capableVideoCall :1;
  bool capableMyhome :1;
  bool capableBuddy :1;
  bool attributes :1;
  bool settings :1;
  bool picturePath :1;
} _Contact__isset;

class Contact : public virtual ::apache::thrift::TBase {
 public:

  Contact(const Contact&);
  Contact& operator=(const Contact&);
  Contact() : mid(), createdTime(0), type((ContactType::type)0), status((ContactStatus::type)0), relation((ContactRelation::type)0), displayName(), phoneticName(), pictureStatus(), thumbnailUrl(), statusMessage(), displayNameOverridden(), favoriteTime(0), capableVoiceCall(0), capableVideoCall(0), capableMyhome(0), capableBuddy(0), attributes(0), settings(0), picturePath() {
  }

  virtual ~Contact() noexcept;
  std::string mid;
  int64_t createdTime;
  ContactType::type type;
  ContactStatus::type status;
  ContactRelation::type relation;
  std::string displayName;
  std::string phoneticName;
  std::string pictureStatus;
  std::string thumbnailUrl;
  std::string statusMessage;
  std::string displayNameOverridden;
  int64_t favoriteTime;
  bool capableVoiceCall;
  bool capableVideoCall;
  bool capableMyhome;
  bool capableBuddy;
  int32_t attributes;
  int64_t settings;
  std::string picturePath;

  _Contact__isset __isset;

  void __set_mid(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_type(const ContactType::type val);

  void __set_status(const ContactStatus::type val);

  void __set_relation(const ContactRelation::type val);

  void __set_displayName(const std::string& val);

  void __set_phoneticName(const std::string& val);

  void __set_pictureStatus(const std::string& val);

  void __set_thumbnailUrl(const std::string& val);

  void __set_statusMessage(const std::string& val);

  void __set_displayNameOverridden(const std::string& val);

  void __set_favoriteTime(const int64_t val);

  void __set_capableVoiceCall(const bool val);

  void __set_capableVideoCall(const bool val);

  void __set_capableMyhome(const bool val);

  void __set_capableBuddy(const bool val);

  void __set_attributes(const int32_t val);

  void __set_settings(const int64_t val);

  void __set_picturePath(const std::string& val);

  bool operator == (const Contact & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(relation == rhs.relation))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(phoneticName == rhs.phoneticName))
      return false;
    if (!(pictureStatus == rhs.pictureStatus))
      return false;
    if (!(thumbnailUrl == rhs.thumbnailUrl))
      return false;
    if (!(statusMessage == rhs.statusMessage))
      return false;
    if (!(displayNameOverridden == rhs.displayNameOverridden))
      return false;
    if (!(favoriteTime == rhs.favoriteTime))
      return false;
    if (!(capableVoiceCall == rhs.capableVoiceCall))
      return false;
    if (!(capableVideoCall == rhs.capableVideoCall))
      return false;
    if (!(capableMyhome == rhs.capableMyhome))
      return false;
    if (!(capableBuddy == rhs.capableBuddy))
      return false;
    if (!(attributes == rhs.attributes))
      return false;
    if (!(settings == rhs.settings))
      return false;
    if (!(picturePath == rhs.picturePath))
      return false;
    return true;
  }
  bool operator != (const Contact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Contact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Contact &a, Contact &b);

std::ostream& operator<<(std::ostream& out, const Contact& obj);

typedef struct _BuddyList__isset {
  _BuddyList__isset() : classification(false), displayName(false), totalBuddyCount(false), popularContacts(false) {}
  bool classification :1;
  bool displayName :1;
  bool totalBuddyCount :1;
  bool popularContacts :1;
} _BuddyList__isset;

class BuddyList : public virtual ::apache::thrift::TBase {
 public:

  BuddyList(const BuddyList&);
  BuddyList& operator=(const BuddyList&);
  BuddyList() : classification(), displayName(), totalBuddyCount(0) {
  }

  virtual ~BuddyList() noexcept;
  std::string classification;
  std::string displayName;
  int32_t totalBuddyCount;
  std::vector<Contact>  popularContacts;

  _BuddyList__isset __isset;

  void __set_classification(const std::string& val);

  void __set_displayName(const std::string& val);

  void __set_totalBuddyCount(const int32_t val);

  void __set_popularContacts(const std::vector<Contact> & val);

  bool operator == (const BuddyList & rhs) const
  {
    if (!(classification == rhs.classification))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(totalBuddyCount == rhs.totalBuddyCount))
      return false;
    if (!(popularContacts == rhs.popularContacts))
      return false;
    return true;
  }
  bool operator != (const BuddyList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddyList &a, BuddyList &b);

std::ostream& operator<<(std::ostream& out, const BuddyList& obj);

typedef struct _Location__isset {
  _Location__isset() : title(false), address(false), latitude(false), longitude(false), phone(false) {}
  bool title :1;
  bool address :1;
  bool latitude :1;
  bool longitude :1;
  bool phone :1;
} _Location__isset;

class Location : public virtual ::apache::thrift::TBase {
 public:

  Location(const Location&);
  Location& operator=(const Location&);
  Location() : title(), address(), latitude(0), longitude(0), phone() {
  }

  virtual ~Location() noexcept;
  std::string title;
  std::string address;
  double latitude;
  double longitude;
  std::string phone;

  _Location__isset __isset;

  void __set_title(const std::string& val);

  void __set_address(const std::string& val);

  void __set_latitude(const double val);

  void __set_longitude(const double val);

  void __set_phone(const std::string& val);

  bool operator == (const Location & rhs) const
  {
    if (!(title == rhs.title))
      return false;
    if (!(address == rhs.address))
      return false;
    if (!(latitude == rhs.latitude))
      return false;
    if (!(longitude == rhs.longitude))
      return false;
    if (!(phone == rhs.phone))
      return false;
    return true;
  }
  bool operator != (const Location &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Location & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Location &a, Location &b);

std::ostream& operator<<(std::ostream& out, const Location& obj);

typedef struct _BuddyMessageRequest__isset {
  _BuddyMessageRequest__isset() : contentType(false), text(false), location(false), content(false), contentMetadata(false) {}
  bool contentType :1;
  bool text :1;
  bool location :1;
  bool content :1;
  bool contentMetadata :1;
} _BuddyMessageRequest__isset;

class BuddyMessageRequest : public virtual ::apache::thrift::TBase {
 public:

  BuddyMessageRequest(const BuddyMessageRequest&);
  BuddyMessageRequest& operator=(const BuddyMessageRequest&);
  BuddyMessageRequest() : contentType((ContentType::type)0), text(), content() {
  }

  virtual ~BuddyMessageRequest() noexcept;
  ContentType::type contentType;
  std::string text;
  Location location;
  std::string content;
  std::map<std::string, std::string>  contentMetadata;

  _BuddyMessageRequest__isset __isset;

  void __set_contentType(const ContentType::type val);

  void __set_text(const std::string& val);

  void __set_location(const Location& val);

  void __set_content(const std::string& val);

  void __set_contentMetadata(const std::map<std::string, std::string> & val);

  bool operator == (const BuddyMessageRequest & rhs) const
  {
    if (!(contentType == rhs.contentType))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(location == rhs.location))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(contentMetadata == rhs.contentMetadata))
      return false;
    return true;
  }
  bool operator != (const BuddyMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddyMessageRequest &a, BuddyMessageRequest &b);

std::ostream& operator<<(std::ostream& out, const BuddyMessageRequest& obj);

typedef struct _BuddyOnAirUrls__isset {
  _BuddyOnAirUrls__isset() : hls(false), smoothStreaming(false) {}
  bool hls :1;
  bool smoothStreaming :1;
} _BuddyOnAirUrls__isset;

class BuddyOnAirUrls : public virtual ::apache::thrift::TBase {
 public:

  BuddyOnAirUrls(const BuddyOnAirUrls&);
  BuddyOnAirUrls& operator=(const BuddyOnAirUrls&);
  BuddyOnAirUrls() {
  }

  virtual ~BuddyOnAirUrls() noexcept;
  std::map<std::string, std::string>  hls;
  std::map<std::string, std::string>  smoothStreaming;

  _BuddyOnAirUrls__isset __isset;

  void __set_hls(const std::map<std::string, std::string> & val);

  void __set_smoothStreaming(const std::map<std::string, std::string> & val);

  bool operator == (const BuddyOnAirUrls & rhs) const
  {
    if (!(hls == rhs.hls))
      return false;
    if (!(smoothStreaming == rhs.smoothStreaming))
      return false;
    return true;
  }
  bool operator != (const BuddyOnAirUrls &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyOnAirUrls & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddyOnAirUrls &a, BuddyOnAirUrls &b);

std::ostream& operator<<(std::ostream& out, const BuddyOnAirUrls& obj);

typedef struct _BuddyOnAir__isset {
  _BuddyOnAir__isset() : mid(false), freshnessLifetime(false), onAirId(false), onAir(false), text(false), viewerCount(false), targetCount(false), onAirType(false), onAirUrls(false) {}
  bool mid :1;
  bool freshnessLifetime :1;
  bool onAirId :1;
  bool onAir :1;
  bool text :1;
  bool viewerCount :1;
  bool targetCount :1;
  bool onAirType :1;
  bool onAirUrls :1;
} _BuddyOnAir__isset;

class BuddyOnAir : public virtual ::apache::thrift::TBase {
 public:

  BuddyOnAir(const BuddyOnAir&);
  BuddyOnAir& operator=(const BuddyOnAir&);
  BuddyOnAir() : mid(), freshnessLifetime(0), onAirId(), onAir(0), text(), viewerCount(0), targetCount(0), onAirType((BuddyOnAirType::type)0) {
  }

  virtual ~BuddyOnAir() noexcept;
  std::string mid;
  int64_t freshnessLifetime;
  std::string onAirId;
  bool onAir;
  std::string text;
  int64_t viewerCount;
  int64_t targetCount;
  BuddyOnAirType::type onAirType;
  BuddyOnAirUrls onAirUrls;

  _BuddyOnAir__isset __isset;

  void __set_mid(const std::string& val);

  void __set_freshnessLifetime(const int64_t val);

  void __set_onAirId(const std::string& val);

  void __set_onAir(const bool val);

  void __set_text(const std::string& val);

  void __set_viewerCount(const int64_t val);

  void __set_targetCount(const int64_t val);

  void __set_onAirType(const BuddyOnAirType::type val);

  void __set_onAirUrls(const BuddyOnAirUrls& val);

  bool operator == (const BuddyOnAir & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(freshnessLifetime == rhs.freshnessLifetime))
      return false;
    if (!(onAirId == rhs.onAirId))
      return false;
    if (!(onAir == rhs.onAir))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(viewerCount == rhs.viewerCount))
      return false;
    if (!(targetCount == rhs.targetCount))
      return false;
    if (!(onAirType == rhs.onAirType))
      return false;
    if (!(onAirUrls == rhs.onAirUrls))
      return false;
    return true;
  }
  bool operator != (const BuddyOnAir &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyOnAir & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddyOnAir &a, BuddyOnAir &b);

std::ostream& operator<<(std::ostream& out, const BuddyOnAir& obj);

typedef struct _BuddyProfile__isset {
  _BuddyProfile__isset() : buddyId(false), mid(false), searchId(false), displayName(false), statusMessage(false), contactCount(false) {}
  bool buddyId :1;
  bool mid :1;
  bool searchId :1;
  bool displayName :1;
  bool statusMessage :1;
  bool contactCount :1;
} _BuddyProfile__isset;

class BuddyProfile : public virtual ::apache::thrift::TBase {
 public:

  BuddyProfile(const BuddyProfile&);
  BuddyProfile& operator=(const BuddyProfile&);
  BuddyProfile() : buddyId(), mid(), searchId(), displayName(), statusMessage(), contactCount(0) {
  }

  virtual ~BuddyProfile() noexcept;
  std::string buddyId;
  std::string mid;
  std::string searchId;
  std::string displayName;
  std::string statusMessage;
  int64_t contactCount;

  _BuddyProfile__isset __isset;

  void __set_buddyId(const std::string& val);

  void __set_mid(const std::string& val);

  void __set_searchId(const std::string& val);

  void __set_displayName(const std::string& val);

  void __set_statusMessage(const std::string& val);

  void __set_contactCount(const int64_t val);

  bool operator == (const BuddyProfile & rhs) const
  {
    if (!(buddyId == rhs.buddyId))
      return false;
    if (!(mid == rhs.mid))
      return false;
    if (!(searchId == rhs.searchId))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(statusMessage == rhs.statusMessage))
      return false;
    if (!(contactCount == rhs.contactCount))
      return false;
    return true;
  }
  bool operator != (const BuddyProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddyProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddyProfile &a, BuddyProfile &b);

std::ostream& operator<<(std::ostream& out, const BuddyProfile& obj);

typedef struct _BuddySearchResult__isset {
  _BuddySearchResult__isset() : mid(false), displayName(false), pictureStatus(false), picturePath(false), statusMessage(false), businessAccount(false) {}
  bool mid :1;
  bool displayName :1;
  bool pictureStatus :1;
  bool picturePath :1;
  bool statusMessage :1;
  bool businessAccount :1;
} _BuddySearchResult__isset;

class BuddySearchResult : public virtual ::apache::thrift::TBase {
 public:

  BuddySearchResult(const BuddySearchResult&);
  BuddySearchResult& operator=(const BuddySearchResult&);
  BuddySearchResult() : mid(), displayName(), pictureStatus(), picturePath(), statusMessage(), businessAccount(0) {
  }

  virtual ~BuddySearchResult() noexcept;
  std::string mid;
  std::string displayName;
  std::string pictureStatus;
  std::string picturePath;
  std::string statusMessage;
  bool businessAccount;

  _BuddySearchResult__isset __isset;

  void __set_mid(const std::string& val);

  void __set_displayName(const std::string& val);

  void __set_pictureStatus(const std::string& val);

  void __set_picturePath(const std::string& val);

  void __set_statusMessage(const std::string& val);

  void __set_businessAccount(const bool val);

  bool operator == (const BuddySearchResult & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(pictureStatus == rhs.pictureStatus))
      return false;
    if (!(picturePath == rhs.picturePath))
      return false;
    if (!(statusMessage == rhs.statusMessage))
      return false;
    if (!(businessAccount == rhs.businessAccount))
      return false;
    return true;
  }
  bool operator != (const BuddySearchResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuddySearchResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BuddySearchResult &a, BuddySearchResult &b);

std::ostream& operator<<(std::ostream& out, const BuddySearchResult& obj);

typedef struct _ChannelDomain__isset {
  _ChannelDomain__isset() : host(false), removed(false) {}
  bool host :1;
  bool removed :1;
} _ChannelDomain__isset;

class ChannelDomain : public virtual ::apache::thrift::TBase {
 public:

  ChannelDomain(const ChannelDomain&);
  ChannelDomain& operator=(const ChannelDomain&);
  ChannelDomain() : host(), removed(0) {
  }

  virtual ~ChannelDomain() noexcept;
  std::string host;
  bool removed;

  _ChannelDomain__isset __isset;

  void __set_host(const std::string& val);

  void __set_removed(const bool val);

  bool operator == (const ChannelDomain & rhs) const
  {
    if (!(host == rhs.host))
      return false;
    if (!(removed == rhs.removed))
      return false;
    return true;
  }
  bool operator != (const ChannelDomain &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelDomain & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelDomain &a, ChannelDomain &b);

std::ostream& operator<<(std::ostream& out, const ChannelDomain& obj);

typedef struct _ChannelDomains__isset {
  _ChannelDomains__isset() : channelDomains(false), revision(false) {}
  bool channelDomains :1;
  bool revision :1;
} _ChannelDomains__isset;

class ChannelDomains : public virtual ::apache::thrift::TBase {
 public:

  ChannelDomains(const ChannelDomains&);
  ChannelDomains& operator=(const ChannelDomains&);
  ChannelDomains() : revision(0) {
  }

  virtual ~ChannelDomains() noexcept;
  std::vector<ChannelDomain>  channelDomains;
  int64_t revision;

  _ChannelDomains__isset __isset;

  void __set_channelDomains(const std::vector<ChannelDomain> & val);

  void __set_revision(const int64_t val);

  bool operator == (const ChannelDomains & rhs) const
  {
    if (!(channelDomains == rhs.channelDomains))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const ChannelDomains &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelDomains & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelDomains &a, ChannelDomains &b);

std::ostream& operator<<(std::ostream& out, const ChannelDomains& obj);

typedef struct _ChannelException__isset {
  _ChannelException__isset() : code(false), reason(false), parameterMap(false) {}
  bool code :1;
  bool reason :1;
  bool parameterMap :1;
} _ChannelException__isset;

class ChannelException : public ::apache::thrift::TException {
 public:

  ChannelException(const ChannelException&);
  ChannelException& operator=(const ChannelException&);
  ChannelException() : code((ChannelErrorCode::type)0), reason() {
  }

  virtual ~ChannelException() noexcept;
  ChannelErrorCode::type code;
  std::string reason;
  std::map<std::string, std::string>  parameterMap;

  _ChannelException__isset __isset;

  void __set_code(const ChannelErrorCode::type val);

  void __set_reason(const std::string& val);

  void __set_parameterMap(const std::map<std::string, std::string> & val);

  bool operator == (const ChannelException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(reason == rhs.reason))
      return false;
    if (!(parameterMap == rhs.parameterMap))
      return false;
    return true;
  }
  bool operator != (const ChannelException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(ChannelException &a, ChannelException &b);

std::ostream& operator<<(std::ostream& out, const ChannelException& obj);

typedef struct _ChannelInfos__isset {
  _ChannelInfos__isset() : channelInfos(false), revision(false) {}
  bool channelInfos :1;
  bool revision :1;
} _ChannelInfos__isset;

class ChannelInfos : public virtual ::apache::thrift::TBase {
 public:

  ChannelInfos(const ChannelInfos&);
  ChannelInfos& operator=(const ChannelInfos&);
  ChannelInfos() : revision(0) {
  }

  virtual ~ChannelInfos() noexcept;
  std::vector<ChannelInfo>  channelInfos;
  int64_t revision;

  _ChannelInfos__isset __isset;

  void __set_channelInfos(const std::vector<ChannelInfo> & val);

  void __set_revision(const int64_t val);

  bool operator == (const ChannelInfos & rhs) const
  {
    if (!(channelInfos == rhs.channelInfos))
      return false;
    if (!(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const ChannelInfos &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelInfos & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelInfos &a, ChannelInfos &b);

std::ostream& operator<<(std::ostream& out, const ChannelInfos& obj);

typedef struct _ChannelNotificationSetting__isset {
  _ChannelNotificationSetting__isset() : channelId(false), name(false), notificationReceivable(false), messageReceivable(false), showDefault(false) {}
  bool channelId :1;
  bool name :1;
  bool notificationReceivable :1;
  bool messageReceivable :1;
  bool showDefault :1;
} _ChannelNotificationSetting__isset;

class ChannelNotificationSetting : public virtual ::apache::thrift::TBase {
 public:

  ChannelNotificationSetting(const ChannelNotificationSetting&);
  ChannelNotificationSetting& operator=(const ChannelNotificationSetting&);
  ChannelNotificationSetting() : channelId(), name(), notificationReceivable(0), messageReceivable(0), showDefault(0) {
  }

  virtual ~ChannelNotificationSetting() noexcept;
  std::string channelId;
  std::string name;
  bool notificationReceivable;
  bool messageReceivable;
  bool showDefault;

  _ChannelNotificationSetting__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_name(const std::string& val);

  void __set_notificationReceivable(const bool val);

  void __set_messageReceivable(const bool val);

  void __set_showDefault(const bool val);

  bool operator == (const ChannelNotificationSetting & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(notificationReceivable == rhs.notificationReceivable))
      return false;
    if (!(messageReceivable == rhs.messageReceivable))
      return false;
    if (!(showDefault == rhs.showDefault))
      return false;
    return true;
  }
  bool operator != (const ChannelNotificationSetting &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelNotificationSetting & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelNotificationSetting &a, ChannelNotificationSetting &b);

std::ostream& operator<<(std::ostream& out, const ChannelNotificationSetting& obj);

typedef struct _ChannelSyncDatas__isset {
  _ChannelSyncDatas__isset() : channelInfos(false), channelDomains(false), revision(false), expires(false) {}
  bool channelInfos :1;
  bool channelDomains :1;
  bool revision :1;
  bool expires :1;
} _ChannelSyncDatas__isset;

class ChannelSyncDatas : public virtual ::apache::thrift::TBase {
 public:

  ChannelSyncDatas(const ChannelSyncDatas&);
  ChannelSyncDatas& operator=(const ChannelSyncDatas&);
  ChannelSyncDatas() : revision(0), expires(0) {
  }

  virtual ~ChannelSyncDatas() noexcept;
  std::vector<ChannelInfo>  channelInfos;
  std::vector<ChannelDomain>  channelDomains;
  int64_t revision;
  int64_t expires;

  _ChannelSyncDatas__isset __isset;

  void __set_channelInfos(const std::vector<ChannelInfo> & val);

  void __set_channelDomains(const std::vector<ChannelDomain> & val);

  void __set_revision(const int64_t val);

  void __set_expires(const int64_t val);

  bool operator == (const ChannelSyncDatas & rhs) const
  {
    if (!(channelInfos == rhs.channelInfos))
      return false;
    if (!(channelDomains == rhs.channelDomains))
      return false;
    if (!(revision == rhs.revision))
      return false;
    if (!(expires == rhs.expires))
      return false;
    return true;
  }
  bool operator != (const ChannelSyncDatas &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelSyncDatas & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelSyncDatas &a, ChannelSyncDatas &b);

std::ostream& operator<<(std::ostream& out, const ChannelSyncDatas& obj);

typedef struct _ChannelToken__isset {
  _ChannelToken__isset() : token(false), obsToken(false), expiration(false), refreshToken(false), channelAccessToken(false) {}
  bool token :1;
  bool obsToken :1;
  bool expiration :1;
  bool refreshToken :1;
  bool channelAccessToken :1;
} _ChannelToken__isset;

class ChannelToken : public virtual ::apache::thrift::TBase {
 public:

  ChannelToken(const ChannelToken&);
  ChannelToken& operator=(const ChannelToken&);
  ChannelToken() : token(), obsToken(), expiration(0), refreshToken(), channelAccessToken() {
  }

  virtual ~ChannelToken() noexcept;
  std::string token;
  std::string obsToken;
  int64_t expiration;
  std::string refreshToken;
  std::string channelAccessToken;

  _ChannelToken__isset __isset;

  void __set_token(const std::string& val);

  void __set_obsToken(const std::string& val);

  void __set_expiration(const int64_t val);

  void __set_refreshToken(const std::string& val);

  void __set_channelAccessToken(const std::string& val);

  bool operator == (const ChannelToken & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    if (!(obsToken == rhs.obsToken))
      return false;
    if (!(expiration == rhs.expiration))
      return false;
    if (!(refreshToken == rhs.refreshToken))
      return false;
    if (!(channelAccessToken == rhs.channelAccessToken))
      return false;
    return true;
  }
  bool operator != (const ChannelToken &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelToken & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ChannelToken &a, ChannelToken &b);

std::ostream& operator<<(std::ostream& out, const ChannelToken& obj);

typedef struct _Coin__isset {
  _Coin__isset() : freeCoinBalance(false), payedCoinBalance(false), totalCoinBalance(false), rewardCoinBalance(false) {}
  bool freeCoinBalance :1;
  bool payedCoinBalance :1;
  bool totalCoinBalance :1;
  bool rewardCoinBalance :1;
} _Coin__isset;

class Coin : public virtual ::apache::thrift::TBase {
 public:

  Coin(const Coin&);
  Coin& operator=(const Coin&);
  Coin() : freeCoinBalance(0), payedCoinBalance(0), totalCoinBalance(0), rewardCoinBalance(0) {
  }

  virtual ~Coin() noexcept;
  int32_t freeCoinBalance;
  int32_t payedCoinBalance;
  int32_t totalCoinBalance;
  int32_t rewardCoinBalance;

  _Coin__isset __isset;

  void __set_freeCoinBalance(const int32_t val);

  void __set_payedCoinBalance(const int32_t val);

  void __set_totalCoinBalance(const int32_t val);

  void __set_rewardCoinBalance(const int32_t val);

  bool operator == (const Coin & rhs) const
  {
    if (!(freeCoinBalance == rhs.freeCoinBalance))
      return false;
    if (!(payedCoinBalance == rhs.payedCoinBalance))
      return false;
    if (!(totalCoinBalance == rhs.totalCoinBalance))
      return false;
    if (!(rewardCoinBalance == rhs.rewardCoinBalance))
      return false;
    return true;
  }
  bool operator != (const Coin &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Coin & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Coin &a, Coin &b);

std::ostream& operator<<(std::ostream& out, const Coin& obj);

typedef struct _CoinPayLoad__isset {
  _CoinPayLoad__isset() : payCoin(false), freeCoin(false), type(false), rewardCoin(false) {}
  bool payCoin :1;
  bool freeCoin :1;
  bool type :1;
  bool rewardCoin :1;
} _CoinPayLoad__isset;

class CoinPayLoad : public virtual ::apache::thrift::TBase {
 public:

  CoinPayLoad(const CoinPayLoad&);
  CoinPayLoad& operator=(const CoinPayLoad&);
  CoinPayLoad() : payCoin(0), freeCoin(0), type((PayloadType::type)0), rewardCoin(0) {
  }

  virtual ~CoinPayLoad() noexcept;
  int32_t payCoin;
  int32_t freeCoin;
  PayloadType::type type;
  int32_t rewardCoin;

  _CoinPayLoad__isset __isset;

  void __set_payCoin(const int32_t val);

  void __set_freeCoin(const int32_t val);

  void __set_type(const PayloadType::type val);

  void __set_rewardCoin(const int32_t val);

  bool operator == (const CoinPayLoad & rhs) const
  {
    if (!(payCoin == rhs.payCoin))
      return false;
    if (!(freeCoin == rhs.freeCoin))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(rewardCoin == rhs.rewardCoin))
      return false;
    return true;
  }
  bool operator != (const CoinPayLoad &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinPayLoad & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinPayLoad &a, CoinPayLoad &b);

std::ostream& operator<<(std::ostream& out, const CoinPayLoad& obj);

typedef struct _CoinHistory__isset {
  _CoinHistory__isset() : payDate(false), coinBalance(false), coin(false), price(false), title(false), refund(false), paySeq(false), currency(false), currencySign(false), displayPrice(false), payload(false), channelId(false) {}
  bool payDate :1;
  bool coinBalance :1;
  bool coin :1;
  bool price :1;
  bool title :1;
  bool refund :1;
  bool paySeq :1;
  bool currency :1;
  bool currencySign :1;
  bool displayPrice :1;
  bool payload :1;
  bool channelId :1;
} _CoinHistory__isset;

class CoinHistory : public virtual ::apache::thrift::TBase {
 public:

  CoinHistory(const CoinHistory&);
  CoinHistory& operator=(const CoinHistory&);
  CoinHistory() : payDate(0), coinBalance(0), coin(0), price(), title(), refund(0), paySeq(), currency(), currencySign(), displayPrice(), channelId() {
  }

  virtual ~CoinHistory() noexcept;
  int64_t payDate;
  int32_t coinBalance;
  int32_t coin;
  std::string price;
  std::string title;
  bool refund;
  std::string paySeq;
  std::string currency;
  std::string currencySign;
  std::string displayPrice;
  CoinPayLoad payload;
  std::string channelId;

  _CoinHistory__isset __isset;

  void __set_payDate(const int64_t val);

  void __set_coinBalance(const int32_t val);

  void __set_coin(const int32_t val);

  void __set_price(const std::string& val);

  void __set_title(const std::string& val);

  void __set_refund(const bool val);

  void __set_paySeq(const std::string& val);

  void __set_currency(const std::string& val);

  void __set_currencySign(const std::string& val);

  void __set_displayPrice(const std::string& val);

  void __set_payload(const CoinPayLoad& val);

  void __set_channelId(const std::string& val);

  bool operator == (const CoinHistory & rhs) const
  {
    if (!(payDate == rhs.payDate))
      return false;
    if (!(coinBalance == rhs.coinBalance))
      return false;
    if (!(coin == rhs.coin))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(refund == rhs.refund))
      return false;
    if (!(paySeq == rhs.paySeq))
      return false;
    if (!(currency == rhs.currency))
      return false;
    if (!(currencySign == rhs.currencySign))
      return false;
    if (!(displayPrice == rhs.displayPrice))
      return false;
    if (!(payload == rhs.payload))
      return false;
    if (!(channelId == rhs.channelId))
      return false;
    return true;
  }
  bool operator != (const CoinHistory &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinHistory & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinHistory &a, CoinHistory &b);

std::ostream& operator<<(std::ostream& out, const CoinHistory& obj);

typedef struct _CoinHistoryCondition__isset {
  _CoinHistoryCondition__isset() : start(false), size(false), language(false), eddt(false), appStoreCode(false) {}
  bool start :1;
  bool size :1;
  bool language :1;
  bool eddt :1;
  bool appStoreCode :1;
} _CoinHistoryCondition__isset;

class CoinHistoryCondition : public virtual ::apache::thrift::TBase {
 public:

  CoinHistoryCondition(const CoinHistoryCondition&);
  CoinHistoryCondition& operator=(const CoinHistoryCondition&);
  CoinHistoryCondition() : start(0), size(0), language(), eddt(), appStoreCode((PaymentType::type)0) {
  }

  virtual ~CoinHistoryCondition() noexcept;
  int64_t start;
  int32_t size;
  std::string language;
  std::string eddt;
  PaymentType::type appStoreCode;

  _CoinHistoryCondition__isset __isset;

  void __set_start(const int64_t val);

  void __set_size(const int32_t val);

  void __set_language(const std::string& val);

  void __set_eddt(const std::string& val);

  void __set_appStoreCode(const PaymentType::type val);

  bool operator == (const CoinHistoryCondition & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(eddt == rhs.eddt))
      return false;
    if (!(appStoreCode == rhs.appStoreCode))
      return false;
    return true;
  }
  bool operator != (const CoinHistoryCondition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinHistoryCondition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinHistoryCondition &a, CoinHistoryCondition &b);

std::ostream& operator<<(std::ostream& out, const CoinHistoryCondition& obj);

typedef struct _CoinHistoryResult__isset {
  _CoinHistoryResult__isset() : historys(false), balance(false), hasNext(false) {}
  bool historys :1;
  bool balance :1;
  bool hasNext :1;
} _CoinHistoryResult__isset;

class CoinHistoryResult : public virtual ::apache::thrift::TBase {
 public:

  CoinHistoryResult(const CoinHistoryResult&);
  CoinHistoryResult& operator=(const CoinHistoryResult&);
  CoinHistoryResult() : hasNext(0) {
  }

  virtual ~CoinHistoryResult() noexcept;
  std::vector<CoinHistory>  historys;
  Coin balance;
  bool hasNext;

  _CoinHistoryResult__isset __isset;

  void __set_historys(const std::vector<CoinHistory> & val);

  void __set_balance(const Coin& val);

  void __set_hasNext(const bool val);

  bool operator == (const CoinHistoryResult & rhs) const
  {
    if (!(historys == rhs.historys))
      return false;
    if (!(balance == rhs.balance))
      return false;
    if (!(hasNext == rhs.hasNext))
      return false;
    return true;
  }
  bool operator != (const CoinHistoryResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinHistoryResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinHistoryResult &a, CoinHistoryResult &b);

std::ostream& operator<<(std::ostream& out, const CoinHistoryResult& obj);

typedef struct _CoinProductItem__isset {
  _CoinProductItem__isset() : itemId(false), coin(false), freeCoin(false), currency(false), price(false), displayPrice(false), name(false), desc(false) {}
  bool itemId :1;
  bool coin :1;
  bool freeCoin :1;
  bool currency :1;
  bool price :1;
  bool displayPrice :1;
  bool name :1;
  bool desc :1;
} _CoinProductItem__isset;

class CoinProductItem : public virtual ::apache::thrift::TBase {
 public:

  CoinProductItem(const CoinProductItem&);
  CoinProductItem& operator=(const CoinProductItem&);
  CoinProductItem() : itemId(), coin(0), freeCoin(0), currency(), price(), displayPrice(), name(), desc() {
  }

  virtual ~CoinProductItem() noexcept;
  std::string itemId;
  int32_t coin;
  int32_t freeCoin;
  std::string currency;
  std::string price;
  std::string displayPrice;
  std::string name;
  std::string desc;

  _CoinProductItem__isset __isset;

  void __set_itemId(const std::string& val);

  void __set_coin(const int32_t val);

  void __set_freeCoin(const int32_t val);

  void __set_currency(const std::string& val);

  void __set_price(const std::string& val);

  void __set_displayPrice(const std::string& val);

  void __set_name(const std::string& val);

  void __set_desc(const std::string& val);

  bool operator == (const CoinProductItem & rhs) const
  {
    if (!(itemId == rhs.itemId))
      return false;
    if (!(coin == rhs.coin))
      return false;
    if (!(freeCoin == rhs.freeCoin))
      return false;
    if (!(currency == rhs.currency))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(displayPrice == rhs.displayPrice))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(desc == rhs.desc))
      return false;
    return true;
  }
  bool operator != (const CoinProductItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinProductItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinProductItem &a, CoinProductItem &b);

std::ostream& operator<<(std::ostream& out, const CoinProductItem& obj);

typedef struct _CoinPurchaseConfirm__isset {
  _CoinPurchaseConfirm__isset() : orderId(false), appStoreCode(false), receipt(false), signature(false), seller(false), requestType(false), ignoreReceipt(false) {}
  bool orderId :1;
  bool appStoreCode :1;
  bool receipt :1;
  bool signature :1;
  bool seller :1;
  bool requestType :1;
  bool ignoreReceipt :1;
} _CoinPurchaseConfirm__isset;

class CoinPurchaseConfirm : public virtual ::apache::thrift::TBase {
 public:

  CoinPurchaseConfirm(const CoinPurchaseConfirm&);
  CoinPurchaseConfirm& operator=(const CoinPurchaseConfirm&);
  CoinPurchaseConfirm() : orderId(), appStoreCode((PaymentType::type)0), receipt(), signature(), seller(), requestType(), ignoreReceipt(0) {
  }

  virtual ~CoinPurchaseConfirm() noexcept;
  std::string orderId;
  PaymentType::type appStoreCode;
  std::string receipt;
  std::string signature;
  std::string seller;
  std::string requestType;
  bool ignoreReceipt;

  _CoinPurchaseConfirm__isset __isset;

  void __set_orderId(const std::string& val);

  void __set_appStoreCode(const PaymentType::type val);

  void __set_receipt(const std::string& val);

  void __set_signature(const std::string& val);

  void __set_seller(const std::string& val);

  void __set_requestType(const std::string& val);

  void __set_ignoreReceipt(const bool val);

  bool operator == (const CoinPurchaseConfirm & rhs) const
  {
    if (!(orderId == rhs.orderId))
      return false;
    if (!(appStoreCode == rhs.appStoreCode))
      return false;
    if (!(receipt == rhs.receipt))
      return false;
    if (!(signature == rhs.signature))
      return false;
    if (!(seller == rhs.seller))
      return false;
    if (!(requestType == rhs.requestType))
      return false;
    if (!(ignoreReceipt == rhs.ignoreReceipt))
      return false;
    return true;
  }
  bool operator != (const CoinPurchaseConfirm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinPurchaseConfirm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinPurchaseConfirm &a, CoinPurchaseConfirm &b);

std::ostream& operator<<(std::ostream& out, const CoinPurchaseConfirm& obj);

typedef struct _CoinPurchaseReservation__isset {
  _CoinPurchaseReservation__isset() : productId(false), country(false), currency(false), price(false), appStoreCode(false), language(false), pgCode(false), redirectUrl(false) {}
  bool productId :1;
  bool country :1;
  bool currency :1;
  bool price :1;
  bool appStoreCode :1;
  bool language :1;
  bool pgCode :1;
  bool redirectUrl :1;
} _CoinPurchaseReservation__isset;

class CoinPurchaseReservation : public virtual ::apache::thrift::TBase {
 public:

  CoinPurchaseReservation(const CoinPurchaseReservation&);
  CoinPurchaseReservation& operator=(const CoinPurchaseReservation&);
  CoinPurchaseReservation() : productId(), country(), currency(), price(), appStoreCode((PaymentType::type)0), language(), pgCode((PaymentPgType::type)0), redirectUrl() {
  }

  virtual ~CoinPurchaseReservation() noexcept;
  std::string productId;
  std::string country;
  std::string currency;
  std::string price;
  PaymentType::type appStoreCode;
  std::string language;
  PaymentPgType::type pgCode;
  std::string redirectUrl;

  _CoinPurchaseReservation__isset __isset;

  void __set_productId(const std::string& val);

  void __set_country(const std::string& val);

  void __set_currency(const std::string& val);

  void __set_price(const std::string& val);

  void __set_appStoreCode(const PaymentType::type val);

  void __set_language(const std::string& val);

  void __set_pgCode(const PaymentPgType::type val);

  void __set_redirectUrl(const std::string& val);

  bool operator == (const CoinPurchaseReservation & rhs) const
  {
    if (!(productId == rhs.productId))
      return false;
    if (!(country == rhs.country))
      return false;
    if (!(currency == rhs.currency))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(appStoreCode == rhs.appStoreCode))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(pgCode == rhs.pgCode))
      return false;
    if (!(redirectUrl == rhs.redirectUrl))
      return false;
    return true;
  }
  bool operator != (const CoinPurchaseReservation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinPurchaseReservation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinPurchaseReservation &a, CoinPurchaseReservation &b);

std::ostream& operator<<(std::ostream& out, const CoinPurchaseReservation& obj);

typedef struct _CoinUseReservationItem__isset {
  _CoinUseReservationItem__isset() : itemId(false), itemName(false), amount(false) {}
  bool itemId :1;
  bool itemName :1;
  bool amount :1;
} _CoinUseReservationItem__isset;

class CoinUseReservationItem : public virtual ::apache::thrift::TBase {
 public:

  CoinUseReservationItem(const CoinUseReservationItem&);
  CoinUseReservationItem& operator=(const CoinUseReservationItem&);
  CoinUseReservationItem() : itemId(), itemName(), amount(0) {
  }

  virtual ~CoinUseReservationItem() noexcept;
  std::string itemId;
  std::string itemName;
  int32_t amount;

  _CoinUseReservationItem__isset __isset;

  void __set_itemId(const std::string& val);

  void __set_itemName(const std::string& val);

  void __set_amount(const int32_t val);

  bool operator == (const CoinUseReservationItem & rhs) const
  {
    if (!(itemId == rhs.itemId))
      return false;
    if (!(itemName == rhs.itemName))
      return false;
    if (!(amount == rhs.amount))
      return false;
    return true;
  }
  bool operator != (const CoinUseReservationItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinUseReservationItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinUseReservationItem &a, CoinUseReservationItem &b);

std::ostream& operator<<(std::ostream& out, const CoinUseReservationItem& obj);

typedef struct _CoinUseReservation__isset {
  _CoinUseReservation__isset() : channelId(false), shopOrderId(false), appStoreCode(false), items(false), country(false) {}
  bool channelId :1;
  bool shopOrderId :1;
  bool appStoreCode :1;
  bool items :1;
  bool country :1;
} _CoinUseReservation__isset;

class CoinUseReservation : public virtual ::apache::thrift::TBase {
 public:

  CoinUseReservation(const CoinUseReservation&);
  CoinUseReservation& operator=(const CoinUseReservation&);
  CoinUseReservation() : channelId(), shopOrderId(), appStoreCode((PaymentType::type)0), country() {
  }

  virtual ~CoinUseReservation() noexcept;
  std::string channelId;
  std::string shopOrderId;
  PaymentType::type appStoreCode;
  std::vector<CoinUseReservationItem>  items;
  std::string country;

  _CoinUseReservation__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_shopOrderId(const std::string& val);

  void __set_appStoreCode(const PaymentType::type val);

  void __set_items(const std::vector<CoinUseReservationItem> & val);

  void __set_country(const std::string& val);

  bool operator == (const CoinUseReservation & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(shopOrderId == rhs.shopOrderId))
      return false;
    if (!(appStoreCode == rhs.appStoreCode))
      return false;
    if (!(items == rhs.items))
      return false;
    if (!(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const CoinUseReservation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CoinUseReservation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CoinUseReservation &a, CoinUseReservation &b);

std::ostream& operator<<(std::ostream& out, const CoinUseReservation& obj);

typedef struct _CompactContact__isset {
  _CompactContact__isset() : mid(false), createdTime(false), modifiedTime(false), status(false), settings(false), displayNameOverridden(false) {}
  bool mid :1;
  bool createdTime :1;
  bool modifiedTime :1;
  bool status :1;
  bool settings :1;
  bool displayNameOverridden :1;
} _CompactContact__isset;

class CompactContact : public virtual ::apache::thrift::TBase {
 public:

  CompactContact(const CompactContact&);
  CompactContact& operator=(const CompactContact&);
  CompactContact() : mid(), createdTime(0), modifiedTime(0), status((ContactStatus::type)0), settings(0), displayNameOverridden() {
  }

  virtual ~CompactContact() noexcept;
  std::string mid;
  int64_t createdTime;
  int64_t modifiedTime;
  ContactStatus::type status;
  int64_t settings;
  std::string displayNameOverridden;

  _CompactContact__isset __isset;

  void __set_mid(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_modifiedTime(const int64_t val);

  void __set_status(const ContactStatus::type val);

  void __set_settings(const int64_t val);

  void __set_displayNameOverridden(const std::string& val);

  bool operator == (const CompactContact & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(modifiedTime == rhs.modifiedTime))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(settings == rhs.settings))
      return false;
    if (!(displayNameOverridden == rhs.displayNameOverridden))
      return false;
    return true;
  }
  bool operator != (const CompactContact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CompactContact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CompactContact &a, CompactContact &b);

std::ostream& operator<<(std::ostream& out, const CompactContact& obj);

typedef struct _ContactModification__isset {
  _ContactModification__isset() : type(false), luid(false), phones(false), emails(false), userids(false) {}
  bool type :1;
  bool luid :1;
  bool phones :1;
  bool emails :1;
  bool userids :1;
} _ContactModification__isset;

class ContactModification : public virtual ::apache::thrift::TBase {
 public:

  ContactModification(const ContactModification&);
  ContactModification& operator=(const ContactModification&);
  ContactModification() : type((ModificationType::type)0), luid() {
  }

  virtual ~ContactModification() noexcept;
  ModificationType::type type;
  std::string luid;
  std::vector<std::string>  phones;
  std::vector<std::string>  emails;
  std::vector<std::string>  userids;

  _ContactModification__isset __isset;

  void __set_type(const ModificationType::type val);

  void __set_luid(const std::string& val);

  void __set_phones(const std::vector<std::string> & val);

  void __set_emails(const std::vector<std::string> & val);

  void __set_userids(const std::vector<std::string> & val);

  bool operator == (const ContactModification & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(luid == rhs.luid))
      return false;
    if (!(phones == rhs.phones))
      return false;
    if (!(emails == rhs.emails))
      return false;
    if (!(userids == rhs.userids))
      return false;
    return true;
  }
  bool operator != (const ContactModification &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContactModification & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ContactModification &a, ContactModification &b);

std::ostream& operator<<(std::ostream& out, const ContactModification& obj);

typedef struct _ContactRegistration__isset {
  _ContactRegistration__isset() : contact(false), luid(false), contactType(false), contactKey(false) {}
  bool contact :1;
  bool luid :1;
  bool contactType :1;
  bool contactKey :1;
} _ContactRegistration__isset;

class ContactRegistration : public virtual ::apache::thrift::TBase {
 public:

  ContactRegistration(const ContactRegistration&);
  ContactRegistration& operator=(const ContactRegistration&);
  ContactRegistration() : luid(), contactType((ContactType::type)0), contactKey() {
  }

  virtual ~ContactRegistration() noexcept;
  Contact contact;
  std::string luid;
  ContactType::type contactType;
  std::string contactKey;

  _ContactRegistration__isset __isset;

  void __set_contact(const Contact& val);

  void __set_luid(const std::string& val);

  void __set_contactType(const ContactType::type val);

  void __set_contactKey(const std::string& val);

  bool operator == (const ContactRegistration & rhs) const
  {
    if (!(contact == rhs.contact))
      return false;
    if (!(luid == rhs.luid))
      return false;
    if (!(contactType == rhs.contactType))
      return false;
    if (!(contactKey == rhs.contactKey))
      return false;
    return true;
  }
  bool operator != (const ContactRegistration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContactRegistration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ContactRegistration &a, ContactRegistration &b);

std::ostream& operator<<(std::ostream& out, const ContactRegistration& obj);

typedef struct _ContactReport__isset {
  _ContactReport__isset() : mid(false), exists(false), contact(false) {}
  bool mid :1;
  bool exists :1;
  bool contact :1;
} _ContactReport__isset;

class ContactReport : public virtual ::apache::thrift::TBase {
 public:

  ContactReport(const ContactReport&);
  ContactReport& operator=(const ContactReport&);
  ContactReport() : mid(), exists(0) {
  }

  virtual ~ContactReport() noexcept;
  std::string mid;
  bool exists;
  Contact contact;

  _ContactReport__isset __isset;

  void __set_mid(const std::string& val);

  void __set_exists(const bool val);

  void __set_contact(const Contact& val);

  bool operator == (const ContactReport & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(exists == rhs.exists))
      return false;
    if (!(contact == rhs.contact))
      return false;
    return true;
  }
  bool operator != (const ContactReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContactReport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ContactReport &a, ContactReport &b);

std::ostream& operator<<(std::ostream& out, const ContactReport& obj);

typedef struct _ContactReportResult__isset {
  _ContactReportResult__isset() : mid(false), exists(false) {}
  bool mid :1;
  bool exists :1;
} _ContactReportResult__isset;

class ContactReportResult : public virtual ::apache::thrift::TBase {
 public:

  ContactReportResult(const ContactReportResult&);
  ContactReportResult& operator=(const ContactReportResult&);
  ContactReportResult() : mid(), exists(0) {
  }

  virtual ~ContactReportResult() noexcept;
  std::string mid;
  bool exists;

  _ContactReportResult__isset __isset;

  void __set_mid(const std::string& val);

  void __set_exists(const bool val);

  bool operator == (const ContactReportResult & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(exists == rhs.exists))
      return false;
    return true;
  }
  bool operator != (const ContactReportResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContactReportResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ContactReportResult &a, ContactReportResult &b);

std::ostream& operator<<(std::ostream& out, const ContactReportResult& obj);

typedef struct _DeviceInfo__isset {
  _DeviceInfo__isset() : deviceName(false), systemName(false), systemVersion(false), model(false), carrierCode(false), carrierName(false), applicationType(false) {}
  bool deviceName :1;
  bool systemName :1;
  bool systemVersion :1;
  bool model :1;
  bool carrierCode :1;
  bool carrierName :1;
  bool applicationType :1;
} _DeviceInfo__isset;

class DeviceInfo : public virtual ::apache::thrift::TBase {
 public:

  DeviceInfo(const DeviceInfo&);
  DeviceInfo& operator=(const DeviceInfo&);
  DeviceInfo() : deviceName(), systemName(), systemVersion(), model(), carrierCode((CarrierCode::type)0), carrierName(), applicationType((ApplicationType::type)0) {
  }

  virtual ~DeviceInfo() noexcept;
  std::string deviceName;
  std::string systemName;
  std::string systemVersion;
  std::string model;
  CarrierCode::type carrierCode;
  std::string carrierName;
  ApplicationType::type applicationType;

  _DeviceInfo__isset __isset;

  void __set_deviceName(const std::string& val);

  void __set_systemName(const std::string& val);

  void __set_systemVersion(const std::string& val);

  void __set_model(const std::string& val);

  void __set_carrierCode(const CarrierCode::type val);

  void __set_carrierName(const std::string& val);

  void __set_applicationType(const ApplicationType::type val);

  bool operator == (const DeviceInfo & rhs) const
  {
    if (!(deviceName == rhs.deviceName))
      return false;
    if (!(systemName == rhs.systemName))
      return false;
    if (!(systemVersion == rhs.systemVersion))
      return false;
    if (!(model == rhs.model))
      return false;
    if (!(carrierCode == rhs.carrierCode))
      return false;
    if (!(carrierName == rhs.carrierName))
      return false;
    if (!(applicationType == rhs.applicationType))
      return false;
    return true;
  }
  bool operator != (const DeviceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeviceInfo &a, DeviceInfo &b);

std::ostream& operator<<(std::ostream& out, const DeviceInfo& obj);

typedef struct _EmailConfirmation__isset {
  _EmailConfirmation__isset() : usePasswordSet(false), email(false), password(false), ignoreDuplication(false) {}
  bool usePasswordSet :1;
  bool email :1;
  bool password :1;
  bool ignoreDuplication :1;
} _EmailConfirmation__isset;

class EmailConfirmation : public virtual ::apache::thrift::TBase {
 public:

  EmailConfirmation(const EmailConfirmation&);
  EmailConfirmation& operator=(const EmailConfirmation&);
  EmailConfirmation() : usePasswordSet(0), email(), password(), ignoreDuplication(0) {
  }

  virtual ~EmailConfirmation() noexcept;
  bool usePasswordSet;
  std::string email;
  std::string password;
  bool ignoreDuplication;

  _EmailConfirmation__isset __isset;

  void __set_usePasswordSet(const bool val);

  void __set_email(const std::string& val);

  void __set_password(const std::string& val);

  void __set_ignoreDuplication(const bool val);

  bool operator == (const EmailConfirmation & rhs) const
  {
    if (!(usePasswordSet == rhs.usePasswordSet))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(ignoreDuplication == rhs.ignoreDuplication))
      return false;
    return true;
  }
  bool operator != (const EmailConfirmation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmailConfirmation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EmailConfirmation &a, EmailConfirmation &b);

std::ostream& operator<<(std::ostream& out, const EmailConfirmation& obj);

typedef struct _EmailConfirmationSession__isset {
  _EmailConfirmationSession__isset() : emailConfirmationType(false), verifier(false), targetEmail(false) {}
  bool emailConfirmationType :1;
  bool verifier :1;
  bool targetEmail :1;
} _EmailConfirmationSession__isset;

class EmailConfirmationSession : public virtual ::apache::thrift::TBase {
 public:

  EmailConfirmationSession(const EmailConfirmationSession&);
  EmailConfirmationSession& operator=(const EmailConfirmationSession&);
  EmailConfirmationSession() : emailConfirmationType((EmailConfirmationType::type)0), verifier(), targetEmail() {
  }

  virtual ~EmailConfirmationSession() noexcept;
  EmailConfirmationType::type emailConfirmationType;
  std::string verifier;
  std::string targetEmail;

  _EmailConfirmationSession__isset __isset;

  void __set_emailConfirmationType(const EmailConfirmationType::type val);

  void __set_verifier(const std::string& val);

  void __set_targetEmail(const std::string& val);

  bool operator == (const EmailConfirmationSession & rhs) const
  {
    if (!(emailConfirmationType == rhs.emailConfirmationType))
      return false;
    if (!(verifier == rhs.verifier))
      return false;
    if (!(targetEmail == rhs.targetEmail))
      return false;
    return true;
  }
  bool operator != (const EmailConfirmationSession &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmailConfirmationSession & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EmailConfirmationSession &a, EmailConfirmationSession &b);

std::ostream& operator<<(std::ostream& out, const EmailConfirmationSession& obj);

typedef struct _FriendChannelMatrix__isset {
  _FriendChannelMatrix__isset() : channelId(false), representMid(false), count(false) {}
  bool channelId :1;
  bool representMid :1;
  bool count :1;
} _FriendChannelMatrix__isset;

class FriendChannelMatrix : public virtual ::apache::thrift::TBase {
 public:

  FriendChannelMatrix(const FriendChannelMatrix&);
  FriendChannelMatrix& operator=(const FriendChannelMatrix&);
  FriendChannelMatrix() : channelId(), representMid(), count(0) {
  }

  virtual ~FriendChannelMatrix() noexcept;
  std::string channelId;
  std::string representMid;
  int32_t count;

  _FriendChannelMatrix__isset __isset;

  void __set_channelId(const std::string& val);

  void __set_representMid(const std::string& val);

  void __set_count(const int32_t val);

  bool operator == (const FriendChannelMatrix & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(representMid == rhs.representMid))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const FriendChannelMatrix &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendChannelMatrix & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FriendChannelMatrix &a, FriendChannelMatrix &b);

std::ostream& operator<<(std::ostream& out, const FriendChannelMatrix& obj);

typedef struct _FriendChannelMatricesResponse__isset {
  _FriendChannelMatricesResponse__isset() : expires(false), matrices(false) {}
  bool expires :1;
  bool matrices :1;
} _FriendChannelMatricesResponse__isset;

class FriendChannelMatricesResponse : public virtual ::apache::thrift::TBase {
 public:

  FriendChannelMatricesResponse(const FriendChannelMatricesResponse&);
  FriendChannelMatricesResponse& operator=(const FriendChannelMatricesResponse&);
  FriendChannelMatricesResponse() : expires(0) {
  }

  virtual ~FriendChannelMatricesResponse() noexcept;
  int64_t expires;
  std::vector<FriendChannelMatrix>  matrices;

  _FriendChannelMatricesResponse__isset __isset;

  void __set_expires(const int64_t val);

  void __set_matrices(const std::vector<FriendChannelMatrix> & val);

  bool operator == (const FriendChannelMatricesResponse & rhs) const
  {
    if (!(expires == rhs.expires))
      return false;
    if (!(matrices == rhs.matrices))
      return false;
    return true;
  }
  bool operator != (const FriendChannelMatricesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendChannelMatricesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FriendChannelMatricesResponse &a, FriendChannelMatricesResponse &b);

std::ostream& operator<<(std::ostream& out, const FriendChannelMatricesResponse& obj);

typedef struct _Geolocation__isset {
  _Geolocation__isset() : longitude(false), latitude(false) {}
  bool longitude :1;
  bool latitude :1;
} _Geolocation__isset;

class Geolocation : public virtual ::apache::thrift::TBase {
 public:

  Geolocation(const Geolocation&);
  Geolocation& operator=(const Geolocation&);
  Geolocation() : longitude(0), latitude(0) {
  }

  virtual ~Geolocation() noexcept;
  double longitude;
  double latitude;

  _Geolocation__isset __isset;

  void __set_longitude(const double val);

  void __set_latitude(const double val);

  bool operator == (const Geolocation & rhs) const
  {
    if (!(longitude == rhs.longitude))
      return false;
    if (!(latitude == rhs.latitude))
      return false;
    return true;
  }
  bool operator != (const Geolocation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Geolocation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Geolocation &a, Geolocation &b);

std::ostream& operator<<(std::ostream& out, const Geolocation& obj);

typedef struct _NotificationTarget__isset {
  _NotificationTarget__isset() : applicationType(false), applicationVersion(false), region(false) {}
  bool applicationType :1;
  bool applicationVersion :1;
  bool region :1;
} _NotificationTarget__isset;

class NotificationTarget : public virtual ::apache::thrift::TBase {
 public:

  NotificationTarget(const NotificationTarget&);
  NotificationTarget& operator=(const NotificationTarget&);
  NotificationTarget() : applicationType(), applicationVersion(), region() {
  }

  virtual ~NotificationTarget() noexcept;
  std::string applicationType;
  std::string applicationVersion;
  std::string region;

  _NotificationTarget__isset __isset;

  void __set_applicationType(const std::string& val);

  void __set_applicationVersion(const std::string& val);

  void __set_region(const std::string& val);

  bool operator == (const NotificationTarget & rhs) const
  {
    if (!(applicationType == rhs.applicationType))
      return false;
    if (!(applicationVersion == rhs.applicationVersion))
      return false;
    if (!(region == rhs.region))
      return false;
    return true;
  }
  bool operator != (const NotificationTarget &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotificationTarget & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotificationTarget &a, NotificationTarget &b);

std::ostream& operator<<(std::ostream& out, const NotificationTarget& obj);

typedef struct _GlobalEvent__isset {
  _GlobalEvent__isset() : key(false), targets(false), createdTime(false), data(false), maxDelay(false) {}
  bool key :1;
  bool targets :1;
  bool createdTime :1;
  bool data :1;
  bool maxDelay :1;
} _GlobalEvent__isset;

class GlobalEvent : public virtual ::apache::thrift::TBase {
 public:

  GlobalEvent(const GlobalEvent&);
  GlobalEvent& operator=(const GlobalEvent&);
  GlobalEvent() : key(), createdTime(0), data(0), maxDelay(0) {
  }

  virtual ~GlobalEvent() noexcept;
  std::string key;
  std::vector<NotificationTarget>  targets;
  int64_t createdTime;
  int64_t data;
  int32_t maxDelay;

  _GlobalEvent__isset __isset;

  void __set_key(const std::string& val);

  void __set_targets(const std::vector<NotificationTarget> & val);

  void __set_createdTime(const int64_t val);

  void __set_data(const int64_t val);

  void __set_maxDelay(const int32_t val);

  bool operator == (const GlobalEvent & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(targets == rhs.targets))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(maxDelay == rhs.maxDelay))
      return false;
    return true;
  }
  bool operator != (const GlobalEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GlobalEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GlobalEvent &a, GlobalEvent &b);

std::ostream& operator<<(std::ostream& out, const GlobalEvent& obj);

typedef struct _Group__isset {
  _Group__isset() : id(false), createdTime(false), name(false), pictureStatus(false), members(false), creator(false), invitee(false), notificationDisabled(false) {}
  bool id :1;
  bool createdTime :1;
  bool name :1;
  bool pictureStatus :1;
  bool members :1;
  bool creator :1;
  bool invitee :1;
  bool notificationDisabled :1;
} _Group__isset;

class Group : public virtual ::apache::thrift::TBase {
 public:

  Group(const Group&);
  Group& operator=(const Group&);
  Group() : id(), createdTime(0), name(), pictureStatus(), notificationDisabled(0) {
  }

  virtual ~Group() noexcept;
  std::string id;
  int64_t createdTime;
  std::string name;
  std::string pictureStatus;
  std::vector<Contact>  members;
  Contact creator;
  std::vector<Contact>  invitee;
  bool notificationDisabled;

  _Group__isset __isset;

  void __set_id(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_name(const std::string& val);

  void __set_pictureStatus(const std::string& val);

  void __set_members(const std::vector<Contact> & val);

  void __set_creator(const Contact& val);

  void __set_invitee(const std::vector<Contact> & val);

  void __set_notificationDisabled(const bool val);

  bool operator == (const Group & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(pictureStatus == rhs.pictureStatus))
      return false;
    if (!(members == rhs.members))
      return false;
    if (!(creator == rhs.creator))
      return false;
    if (!(invitee == rhs.invitee))
      return false;
    if (!(notificationDisabled == rhs.notificationDisabled))
      return false;
    return true;
  }
  bool operator != (const Group &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Group & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Group &a, Group &b);

std::ostream& operator<<(std::ostream& out, const Group& obj);

typedef struct _IdentityCredential__isset {
  _IdentityCredential__isset() : provider(false), identifier(false), password(false) {}
  bool provider :1;
  bool identifier :1;
  bool password :1;
} _IdentityCredential__isset;

class IdentityCredential : public virtual ::apache::thrift::TBase {
 public:

  IdentityCredential(const IdentityCredential&);
  IdentityCredential& operator=(const IdentityCredential&);
  IdentityCredential() : provider((IdentityProvider::type)0), identifier(), password() {
  }

  virtual ~IdentityCredential() noexcept;
  IdentityProvider::type provider;
  std::string identifier;
  std::string password;

  _IdentityCredential__isset __isset;

  void __set_provider(const IdentityProvider::type val);

  void __set_identifier(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const IdentityCredential & rhs) const
  {
    if (!(provider == rhs.provider))
      return false;
    if (!(identifier == rhs.identifier))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const IdentityCredential &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IdentityCredential & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(IdentityCredential &a, IdentityCredential &b);

std::ostream& operator<<(std::ostream& out, const IdentityCredential& obj);

typedef struct _LastReadMessageId__isset {
  _LastReadMessageId__isset() : mid(false), lastReadMessageId(false) {}
  bool mid :1;
  bool lastReadMessageId :1;
} _LastReadMessageId__isset;

class LastReadMessageId : public virtual ::apache::thrift::TBase {
 public:

  LastReadMessageId(const LastReadMessageId&);
  LastReadMessageId& operator=(const LastReadMessageId&);
  LastReadMessageId() : mid(), lastReadMessageId() {
  }

  virtual ~LastReadMessageId() noexcept;
  std::string mid;
  std::string lastReadMessageId;

  _LastReadMessageId__isset __isset;

  void __set_mid(const std::string& val);

  void __set_lastReadMessageId(const std::string& val);

  bool operator == (const LastReadMessageId & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(lastReadMessageId == rhs.lastReadMessageId))
      return false;
    return true;
  }
  bool operator != (const LastReadMessageId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LastReadMessageId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LastReadMessageId &a, LastReadMessageId &b);

std::ostream& operator<<(std::ostream& out, const LastReadMessageId& obj);

typedef struct _LastReadMessageIds__isset {
  _LastReadMessageIds__isset() : chatId(false), lastReadMessageIds(false) {}
  bool chatId :1;
  bool lastReadMessageIds :1;
} _LastReadMessageIds__isset;

class LastReadMessageIds : public virtual ::apache::thrift::TBase {
 public:

  LastReadMessageIds(const LastReadMessageIds&);
  LastReadMessageIds& operator=(const LastReadMessageIds&);
  LastReadMessageIds() : chatId() {
  }

  virtual ~LastReadMessageIds() noexcept;
  std::string chatId;
  std::vector<LastReadMessageId>  lastReadMessageIds;

  _LastReadMessageIds__isset __isset;

  void __set_chatId(const std::string& val);

  void __set_lastReadMessageIds(const std::vector<LastReadMessageId> & val);

  bool operator == (const LastReadMessageIds & rhs) const
  {
    if (!(chatId == rhs.chatId))
      return false;
    if (!(lastReadMessageIds == rhs.lastReadMessageIds))
      return false;
    return true;
  }
  bool operator != (const LastReadMessageIds &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LastReadMessageIds & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LastReadMessageIds &a, LastReadMessageIds &b);

std::ostream& operator<<(std::ostream& out, const LastReadMessageIds& obj);

typedef struct _LoginResult__isset {
  _LoginResult__isset() : authToken(false), certificate(false), verifier(false), pinCode(false), type(false) {}
  bool authToken :1;
  bool certificate :1;
  bool verifier :1;
  bool pinCode :1;
  bool type :1;
} _LoginResult__isset;

class LoginResult : public virtual ::apache::thrift::TBase {
 public:

  LoginResult(const LoginResult&);
  LoginResult& operator=(const LoginResult&);
  LoginResult() : authToken(), certificate(), verifier(), pinCode(), type((LoginResultType::type)0) {
  }

  virtual ~LoginResult() noexcept;
  std::string authToken;
  std::string certificate;
  std::string verifier;
  std::string pinCode;
  LoginResultType::type type;

  _LoginResult__isset __isset;

  void __set_authToken(const std::string& val);

  void __set_certificate(const std::string& val);

  void __set_verifier(const std::string& val);

  void __set_pinCode(const std::string& val);

  void __set_type(const LoginResultType::type val);

  bool operator == (const LoginResult & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(certificate == rhs.certificate))
      return false;
    if (!(verifier == rhs.verifier))
      return false;
    if (!(pinCode == rhs.pinCode))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const LoginResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LoginResult &a, LoginResult &b);

std::ostream& operator<<(std::ostream& out, const LoginResult& obj);

typedef struct _LoginSession__isset {
  _LoginSession__isset() : tokenKey(false), expirationTime(false), applicationType(false), systemName(false), accessLocation(false) {}
  bool tokenKey :1;
  bool expirationTime :1;
  bool applicationType :1;
  bool systemName :1;
  bool accessLocation :1;
} _LoginSession__isset;

class LoginSession : public virtual ::apache::thrift::TBase {
 public:

  LoginSession(const LoginSession&);
  LoginSession& operator=(const LoginSession&);
  LoginSession() : tokenKey(), expirationTime(0), applicationType((ApplicationType::type)0), systemName(), accessLocation() {
  }

  virtual ~LoginSession() noexcept;
  std::string tokenKey;
  int64_t expirationTime;
  ApplicationType::type applicationType;
  std::string systemName;
  std::string accessLocation;

  _LoginSession__isset __isset;

  void __set_tokenKey(const std::string& val);

  void __set_expirationTime(const int64_t val);

  void __set_applicationType(const ApplicationType::type val);

  void __set_systemName(const std::string& val);

  void __set_accessLocation(const std::string& val);

  bool operator == (const LoginSession & rhs) const
  {
    if (!(tokenKey == rhs.tokenKey))
      return false;
    if (!(expirationTime == rhs.expirationTime))
      return false;
    if (!(applicationType == rhs.applicationType))
      return false;
    if (!(systemName == rhs.systemName))
      return false;
    if (!(accessLocation == rhs.accessLocation))
      return false;
    return true;
  }
  bool operator != (const LoginSession &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginSession & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LoginSession &a, LoginSession &b);

std::ostream& operator<<(std::ostream& out, const LoginSession& obj);

typedef struct _Message__isset {
  _Message__isset() : from_(false), to(false), toType(false), id(false), createdTime(false), deliveredTime(false), text(false), location(false), hasContent(false), contentType(false), contentPreview(false), contentMetadata(false) {}
  bool from_ :1;
  bool to :1;
  bool toType :1;
  bool id :1;
  bool createdTime :1;
  bool deliveredTime :1;
  bool text :1;
  bool location :1;
  bool hasContent :1;
  bool contentType :1;
  bool contentPreview :1;
  bool contentMetadata :1;
} _Message__isset;

class Message : public virtual ::apache::thrift::TBase {
 public:

  Message(const Message&);
  Message& operator=(const Message&);
  Message() : from_(), to(), toType((MIDType::type)0), id(), createdTime(0), deliveredTime(0), text(), hasContent(0), contentType((ContentType::type)0), contentPreview() {
  }

  virtual ~Message() noexcept;
  std::string from_;
  std::string to;
  MIDType::type toType;
  std::string id;
  int64_t createdTime;
  int64_t deliveredTime;
  std::string text;
  Location location;
  bool hasContent;
  ContentType::type contentType;
  std::string contentPreview;
  std::map<std::string, std::string>  contentMetadata;

  _Message__isset __isset;

  void __set_from_(const std::string& val);

  void __set_to(const std::string& val);

  void __set_toType(const MIDType::type val);

  void __set_id(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_deliveredTime(const int64_t val);

  void __set_text(const std::string& val);

  void __set_location(const Location& val);

  void __set_hasContent(const bool val);

  void __set_contentType(const ContentType::type val);

  void __set_contentPreview(const std::string& val);

  void __set_contentMetadata(const std::map<std::string, std::string> & val);

  bool operator == (const Message & rhs) const
  {
    if (!(from_ == rhs.from_))
      return false;
    if (!(to == rhs.to))
      return false;
    if (!(toType == rhs.toType))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(deliveredTime == rhs.deliveredTime))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(location == rhs.location))
      return false;
    if (!(hasContent == rhs.hasContent))
      return false;
    if (!(contentType == rhs.contentType))
      return false;
    if (!(contentPreview == rhs.contentPreview))
      return false;
    if (!(contentMetadata == rhs.contentMetadata))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Message &a, Message &b);

std::ostream& operator<<(std::ostream& out, const Message& obj);

typedef struct _MessageOperation__isset {
  _MessageOperation__isset() : revision(false), createdTime(false), type(false), reqSeq(false), status(false), param1(false), param2(false), param3(false), message(false) {}
  bool revision :1;
  bool createdTime :1;
  bool type :1;
  bool reqSeq :1;
  bool status :1;
  bool param1 :1;
  bool param2 :1;
  bool param3 :1;
  bool message :1;
} _MessageOperation__isset;

class MessageOperation : public virtual ::apache::thrift::TBase {
 public:

  MessageOperation(const MessageOperation&);
  MessageOperation& operator=(const MessageOperation&);
  MessageOperation() : revision(0), createdTime(0), type((MessageOperationType::type)0), reqSeq(0), status((OpStatus::type)0), param1(), param2(), param3() {
  }

  virtual ~MessageOperation() noexcept;
  int64_t revision;
  int64_t createdTime;
  MessageOperationType::type type;
  int32_t reqSeq;
  OpStatus::type status;
  std::string param1;
  std::string param2;
  std::string param3;
  Message message;

  _MessageOperation__isset __isset;

  void __set_revision(const int64_t val);

  void __set_createdTime(const int64_t val);

  void __set_type(const MessageOperationType::type val);

  void __set_reqSeq(const int32_t val);

  void __set_status(const OpStatus::type val);

  void __set_param1(const std::string& val);

  void __set_param2(const std::string& val);

  void __set_param3(const std::string& val);

  void __set_message(const Message& val);

  bool operator == (const MessageOperation & rhs) const
  {
    if (!(revision == rhs.revision))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(param1 == rhs.param1))
      return false;
    if (!(param2 == rhs.param2))
      return false;
    if (!(param3 == rhs.param3))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const MessageOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MessageOperation &a, MessageOperation &b);

std::ostream& operator<<(std::ostream& out, const MessageOperation& obj);

typedef struct _MessageOperations__isset {
  _MessageOperations__isset() : operations(false), endFlag(false) {}
  bool operations :1;
  bool endFlag :1;
} _MessageOperations__isset;

class MessageOperations : public virtual ::apache::thrift::TBase {
 public:

  MessageOperations(const MessageOperations&);
  MessageOperations& operator=(const MessageOperations&);
  MessageOperations() : endFlag(0) {
  }

  virtual ~MessageOperations() noexcept;
  std::vector<MessageOperation>  operations;
  bool endFlag;

  _MessageOperations__isset __isset;

  void __set_operations(const std::vector<MessageOperation> & val);

  void __set_endFlag(const bool val);

  bool operator == (const MessageOperations & rhs) const
  {
    if (!(operations == rhs.operations))
      return false;
    if (!(endFlag == rhs.endFlag))
      return false;
    return true;
  }
  bool operator != (const MessageOperations &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageOperations & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MessageOperations &a, MessageOperations &b);

std::ostream& operator<<(std::ostream& out, const MessageOperations& obj);

typedef struct _MetaProfile__isset {
  _MetaProfile__isset() : createTime(false), regionCode(false), identities(false) {}
  bool createTime :1;
  bool regionCode :1;
  bool identities :1;
} _MetaProfile__isset;

class MetaProfile : public virtual ::apache::thrift::TBase {
 public:

  MetaProfile(const MetaProfile&);
  MetaProfile& operator=(const MetaProfile&);
  MetaProfile() : createTime(0), regionCode() {
  }

  virtual ~MetaProfile() noexcept;
  int64_t createTime;
  std::string regionCode;
  std::map<RegistrationType::type, std::string>  identities;

  _MetaProfile__isset __isset;

  void __set_createTime(const int64_t val);

  void __set_regionCode(const std::string& val);

  void __set_identities(const std::map<RegistrationType::type, std::string> & val);

  bool operator == (const MetaProfile & rhs) const
  {
    if (!(createTime == rhs.createTime))
      return false;
    if (!(regionCode == rhs.regionCode))
      return false;
    if (!(identities == rhs.identities))
      return false;
    return true;
  }
  bool operator != (const MetaProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetaProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MetaProfile &a, MetaProfile &b);

std::ostream& operator<<(std::ostream& out, const MetaProfile& obj);

typedef struct _NotificationItem__isset {
  _NotificationItem__isset() : id(false), from_(false), to(false), fromChannel(false), toChannel(false), revision(false), createdTime(false), content(false) {}
  bool id :1;
  bool from_ :1;
  bool to :1;
  bool fromChannel :1;
  bool toChannel :1;
  bool revision :1;
  bool createdTime :1;
  bool content :1;
} _NotificationItem__isset;

class NotificationItem : public virtual ::apache::thrift::TBase {
 public:

  NotificationItem(const NotificationItem&);
  NotificationItem& operator=(const NotificationItem&);
  NotificationItem() : id(), from_(), to(), fromChannel(), toChannel(), revision(0), createdTime(0) {
  }

  virtual ~NotificationItem() noexcept;
  std::string id;
  std::string from_;
  std::string to;
  std::string fromChannel;
  std::string toChannel;
  int64_t revision;
  int64_t createdTime;
  std::map<std::string, std::string>  content;

  _NotificationItem__isset __isset;

  void __set_id(const std::string& val);

  void __set_from_(const std::string& val);

  void __set_to(const std::string& val);

  void __set_fromChannel(const std::string& val);

  void __set_toChannel(const std::string& val);

  void __set_revision(const int64_t val);

  void __set_createdTime(const int64_t val);

  void __set_content(const std::map<std::string, std::string> & val);

  bool operator == (const NotificationItem & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(from_ == rhs.from_))
      return false;
    if (!(to == rhs.to))
      return false;
    if (!(fromChannel == rhs.fromChannel))
      return false;
    if (!(toChannel == rhs.toChannel))
      return false;
    if (!(revision == rhs.revision))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const NotificationItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotificationItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotificationItem &a, NotificationItem &b);

std::ostream& operator<<(std::ostream& out, const NotificationItem& obj);

typedef struct _NotificationFetchResult__isset {
  _NotificationFetchResult__isset() : fetchMode(false), itemList(false) {}
  bool fetchMode :1;
  bool itemList :1;
} _NotificationFetchResult__isset;

class NotificationFetchResult : public virtual ::apache::thrift::TBase {
 public:

  NotificationFetchResult(const NotificationFetchResult&);
  NotificationFetchResult& operator=(const NotificationFetchResult&);
  NotificationFetchResult() : fetchMode((NotificationItemFetchMode::type)0) {
  }

  virtual ~NotificationFetchResult() noexcept;
  NotificationItemFetchMode::type fetchMode;
  std::vector<NotificationItem>  itemList;

  _NotificationFetchResult__isset __isset;

  void __set_fetchMode(const NotificationItemFetchMode::type val);

  void __set_itemList(const std::vector<NotificationItem> & val);

  bool operator == (const NotificationFetchResult & rhs) const
  {
    if (!(fetchMode == rhs.fetchMode))
      return false;
    if (!(itemList == rhs.itemList))
      return false;
    return true;
  }
  bool operator != (const NotificationFetchResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotificationFetchResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotificationFetchResult &a, NotificationFetchResult &b);

std::ostream& operator<<(std::ostream& out, const NotificationFetchResult& obj);

typedef struct _Operation__isset {
  _Operation__isset() : revision(false), createdTime(false), type(false), reqSeq(false), checksum(false), status(false), param1(false), param2(false), param3(false), message(false) {}
  bool revision :1;
  bool createdTime :1;
  bool type :1;
  bool reqSeq :1;
  bool checksum :1;
  bool status :1;
  bool param1 :1;
  bool param2 :1;
  bool param3 :1;
  bool message :1;
} _Operation__isset;

class Operation : public virtual ::apache::thrift::TBase {
 public:

  Operation(const Operation&);
  Operation& operator=(const Operation&);
  Operation() : revision(0), createdTime(0), type((OpType::type)0), reqSeq(0), checksum(), status((OpStatus::type)0), param1(), param2(), param3() {
  }

  virtual ~Operation() noexcept;
  int64_t revision;
  int64_t createdTime;
  OpType::type type;
  int32_t reqSeq;
  std::string checksum;
  OpStatus::type status;
  std::string param1;
  std::string param2;
  std::string param3;
  Message message;

  _Operation__isset __isset;

  void __set_revision(const int64_t val);

  void __set_createdTime(const int64_t val);

  void __set_type(const OpType::type val);

  void __set_reqSeq(const int32_t val);

  void __set_checksum(const std::string& val);

  void __set_status(const OpStatus::type val);

  void __set_param1(const std::string& val);

  void __set_param2(const std::string& val);

  void __set_param3(const std::string& val);

  void __set_message(const Message& val);

  bool operator == (const Operation & rhs) const
  {
    if (!(revision == rhs.revision))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(reqSeq == rhs.reqSeq))
      return false;
    if (!(checksum == rhs.checksum))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(param1 == rhs.param1))
      return false;
    if (!(param2 == rhs.param2))
      return false;
    if (!(param3 == rhs.param3))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Operation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Operation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Operation &a, Operation &b);

std::ostream& operator<<(std::ostream& out, const Operation& obj);

typedef struct _PaymentReservation__isset {
  _PaymentReservation__isset() : receiverMid(false), productId(false), language(false), location(false), currency(false), price(false), appStoreCode(false), messageText(false), messageTemplate(false), packageId(false) {}
  bool receiverMid :1;
  bool productId :1;
  bool language :1;
  bool location :1;
  bool currency :1;
  bool price :1;
  bool appStoreCode :1;
  bool messageText :1;
  bool messageTemplate :1;
  bool packageId :1;
} _PaymentReservation__isset;

class PaymentReservation : public virtual ::apache::thrift::TBase {
 public:

  PaymentReservation(const PaymentReservation&);
  PaymentReservation& operator=(const PaymentReservation&);
  PaymentReservation() : receiverMid(), productId(), language(), location(), currency(), price(), appStoreCode((PaymentType::type)0), messageText(), messageTemplate(0), packageId(0) {
  }

  virtual ~PaymentReservation() noexcept;
  std::string receiverMid;
  std::string productId;
  std::string language;
  std::string location;
  std::string currency;
  std::string price;
  PaymentType::type appStoreCode;
  std::string messageText;
  int32_t messageTemplate;
  int64_t packageId;

  _PaymentReservation__isset __isset;

  void __set_receiverMid(const std::string& val);

  void __set_productId(const std::string& val);

  void __set_language(const std::string& val);

  void __set_location(const std::string& val);

  void __set_currency(const std::string& val);

  void __set_price(const std::string& val);

  void __set_appStoreCode(const PaymentType::type val);

  void __set_messageText(const std::string& val);

  void __set_messageTemplate(const int32_t val);

  void __set_packageId(const int64_t val);

  bool operator == (const PaymentReservation & rhs) const
  {
    if (!(receiverMid == rhs.receiverMid))
      return false;
    if (!(productId == rhs.productId))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(location == rhs.location))
      return false;
    if (!(currency == rhs.currency))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(appStoreCode == rhs.appStoreCode))
      return false;
    if (!(messageText == rhs.messageText))
      return false;
    if (!(messageTemplate == rhs.messageTemplate))
      return false;
    if (!(packageId == rhs.packageId))
      return false;
    return true;
  }
  bool operator != (const PaymentReservation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaymentReservation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaymentReservation &a, PaymentReservation &b);

std::ostream& operator<<(std::ostream& out, const PaymentReservation& obj);

typedef struct _PaymentReservationResult__isset {
  _PaymentReservationResult__isset() : orderId(false), confirmUrl(false), extras(false) {}
  bool orderId :1;
  bool confirmUrl :1;
  bool extras :1;
} _PaymentReservationResult__isset;

class PaymentReservationResult : public virtual ::apache::thrift::TBase {
 public:

  PaymentReservationResult(const PaymentReservationResult&);
  PaymentReservationResult& operator=(const PaymentReservationResult&);
  PaymentReservationResult() : orderId(), confirmUrl() {
  }

  virtual ~PaymentReservationResult() noexcept;
  std::string orderId;
  std::string confirmUrl;
  std::map<std::string, std::string>  extras;

  _PaymentReservationResult__isset __isset;

  void __set_orderId(const std::string& val);

  void __set_confirmUrl(const std::string& val);

  void __set_extras(const std::map<std::string, std::string> & val);

  bool operator == (const PaymentReservationResult & rhs) const
  {
    if (!(orderId == rhs.orderId))
      return false;
    if (!(confirmUrl == rhs.confirmUrl))
      return false;
    if (!(extras == rhs.extras))
      return false;
    return true;
  }
  bool operator != (const PaymentReservationResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PaymentReservationResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PaymentReservationResult &a, PaymentReservationResult &b);

std::ostream& operator<<(std::ostream& out, const PaymentReservationResult& obj);

typedef struct _Product__isset {
  _Product__isset() : productId(false), packageId(false), version(false), authorName(false), onSale(false), validDays(false), saleType(false), copyright(false), title(false), descriptionText(false), shopOrderId(false), fromMid(false), toMid(false), validUntil(false), priceTier(false), price(false), currency(false), currencySymbol(false), paymentType(false), createDate(false), ownFlag(false), eventType(false), urlSchema(false), downloadUrl(false), buddyMid(false), publishSince(false), newFlag(false), missionFlag(false) {}
  bool productId :1;
  bool packageId :1;
  bool version :1;
  bool authorName :1;
  bool onSale :1;
  bool validDays :1;
  bool saleType :1;
  bool copyright :1;
  bool title :1;
  bool descriptionText :1;
  bool shopOrderId :1;
  bool fromMid :1;
  bool toMid :1;
  bool validUntil :1;
  bool priceTier :1;
  bool price :1;
  bool currency :1;
  bool currencySymbol :1;
  bool paymentType :1;
  bool createDate :1;
  bool ownFlag :1;
  bool eventType :1;
  bool urlSchema :1;
  bool downloadUrl :1;
  bool buddyMid :1;
  bool publishSince :1;
  bool newFlag :1;
  bool missionFlag :1;
} _Product__isset;

class Product : public virtual ::apache::thrift::TBase {
 public:

  Product(const Product&);
  Product& operator=(const Product&);
  Product() : productId(), packageId(0), version(0), authorName(), onSale(0), validDays(0), saleType(0), copyright(), title(), descriptionText(), shopOrderId(0), fromMid(), toMid(), validUntil(0), priceTier(0), price(), currency(), currencySymbol(), paymentType((PaymentType::type)0), createDate(0), ownFlag(0), eventType((ProductEventType::type)0), urlSchema(), downloadUrl(), buddyMid(), publishSince(0), newFlag(0), missionFlag(0) {
  }

  virtual ~Product() noexcept;
  std::string productId;
  int64_t packageId;
  int32_t version;
  std::string authorName;
  bool onSale;
  int32_t validDays;
  int32_t saleType;
  std::string copyright;
  std::string title;
  std::string descriptionText;
  int64_t shopOrderId;
  std::string fromMid;
  std::string toMid;
  int64_t validUntil;
  int32_t priceTier;
  std::string price;
  std::string currency;
  std::string currencySymbol;
  PaymentType::type paymentType;
  int64_t createDate;
  bool ownFlag;
  ProductEventType::type eventType;
  std::string urlSchema;
  std::string downloadUrl;
  std::string buddyMid;
  int64_t publishSince;
  bool newFlag;
  bool missionFlag;

  _Product__isset __isset;

  void __set_productId(const std::string& val);

  void __set_packageId(const int64_t val);

  void __set_version(const int32_t val);

  void __set_authorName(const std::string& val);

  void __set_onSale(const bool val);

  void __set_validDays(const int32_t val);

  void __set_saleType(const int32_t val);

  void __set_copyright(const std::string& val);

  void __set_title(const std::string& val);

  void __set_descriptionText(const std::string& val);

  void __set_shopOrderId(const int64_t val);

  void __set_fromMid(const std::string& val);

  void __set_toMid(const std::string& val);

  void __set_validUntil(const int64_t val);

  void __set_priceTier(const int32_t val);

  void __set_price(const std::string& val);

  void __set_currency(const std::string& val);

  void __set_currencySymbol(const std::string& val);

  void __set_paymentType(const PaymentType::type val);

  void __set_createDate(const int64_t val);

  void __set_ownFlag(const bool val);

  void __set_eventType(const ProductEventType::type val);

  void __set_urlSchema(const std::string& val);

  void __set_downloadUrl(const std::string& val);

  void __set_buddyMid(const std::string& val);

  void __set_publishSince(const int64_t val);

  void __set_newFlag(const bool val);

  void __set_missionFlag(const bool val);

  bool operator == (const Product & rhs) const
  {
    if (!(productId == rhs.productId))
      return false;
    if (!(packageId == rhs.packageId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(authorName == rhs.authorName))
      return false;
    if (!(onSale == rhs.onSale))
      return false;
    if (!(validDays == rhs.validDays))
      return false;
    if (!(saleType == rhs.saleType))
      return false;
    if (!(copyright == rhs.copyright))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(descriptionText == rhs.descriptionText))
      return false;
    if (!(shopOrderId == rhs.shopOrderId))
      return false;
    if (!(fromMid == rhs.fromMid))
      return false;
    if (!(toMid == rhs.toMid))
      return false;
    if (!(validUntil == rhs.validUntil))
      return false;
    if (!(priceTier == rhs.priceTier))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(currency == rhs.currency))
      return false;
    if (!(currencySymbol == rhs.currencySymbol))
      return false;
    if (!(paymentType == rhs.paymentType))
      return false;
    if (!(createDate == rhs.createDate))
      return false;
    if (!(ownFlag == rhs.ownFlag))
      return false;
    if (!(eventType == rhs.eventType))
      return false;
    if (!(urlSchema == rhs.urlSchema))
      return false;
    if (!(downloadUrl == rhs.downloadUrl))
      return false;
    if (!(buddyMid == rhs.buddyMid))
      return false;
    if (!(publishSince == rhs.publishSince))
      return false;
    if (!(newFlag == rhs.newFlag))
      return false;
    if (!(missionFlag == rhs.missionFlag))
      return false;
    return true;
  }
  bool operator != (const Product &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Product & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Product &a, Product &b);

std::ostream& operator<<(std::ostream& out, const Product& obj);

typedef struct _ProductList__isset {
  _ProductList__isset() : hasNext(false), bannerSequence(false), bannerTargetType(false), bannerTargetPath(false), productList(false), bannerLang(false) {}
  bool hasNext :1;
  bool bannerSequence :1;
  bool bannerTargetType :1;
  bool bannerTargetPath :1;
  bool productList :1;
  bool bannerLang :1;
} _ProductList__isset;

class ProductList : public virtual ::apache::thrift::TBase {
 public:

  ProductList(const ProductList&);
  ProductList& operator=(const ProductList&);
  ProductList() : hasNext(0), bannerSequence(0), bannerTargetType((ProductBannerLinkType::type)0), bannerTargetPath(), bannerLang() {
  }

  virtual ~ProductList() noexcept;
  bool hasNext;
  int64_t bannerSequence;
  ProductBannerLinkType::type bannerTargetType;
  std::string bannerTargetPath;
  std::vector<Product>  productList;
  std::string bannerLang;

  _ProductList__isset __isset;

  void __set_hasNext(const bool val);

  void __set_bannerSequence(const int64_t val);

  void __set_bannerTargetType(const ProductBannerLinkType::type val);

  void __set_bannerTargetPath(const std::string& val);

  void __set_productList(const std::vector<Product> & val);

  void __set_bannerLang(const std::string& val);

  bool operator == (const ProductList & rhs) const
  {
    if (!(hasNext == rhs.hasNext))
      return false;
    if (!(bannerSequence == rhs.bannerSequence))
      return false;
    if (!(bannerTargetType == rhs.bannerTargetType))
      return false;
    if (!(bannerTargetPath == rhs.bannerTargetPath))
      return false;
    if (!(productList == rhs.productList))
      return false;
    if (!(bannerLang == rhs.bannerLang))
      return false;
    return true;
  }
  bool operator != (const ProductList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProductList &a, ProductList &b);

std::ostream& operator<<(std::ostream& out, const ProductList& obj);

typedef struct _ProductSimple__isset {
  _ProductSimple__isset() : productId(false), packageId(false), version(false), onSale(false), validUntil(false) {}
  bool productId :1;
  bool packageId :1;
  bool version :1;
  bool onSale :1;
  bool validUntil :1;
} _ProductSimple__isset;

class ProductSimple : public virtual ::apache::thrift::TBase {
 public:

  ProductSimple(const ProductSimple&);
  ProductSimple& operator=(const ProductSimple&);
  ProductSimple() : productId(), packageId(0), version(0), onSale(0), validUntil(0) {
  }

  virtual ~ProductSimple() noexcept;
  std::string productId;
  int64_t packageId;
  int32_t version;
  bool onSale;
  int64_t validUntil;

  _ProductSimple__isset __isset;

  void __set_productId(const std::string& val);

  void __set_packageId(const int64_t val);

  void __set_version(const int32_t val);

  void __set_onSale(const bool val);

  void __set_validUntil(const int64_t val);

  bool operator == (const ProductSimple & rhs) const
  {
    if (!(productId == rhs.productId))
      return false;
    if (!(packageId == rhs.packageId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(onSale == rhs.onSale))
      return false;
    if (!(validUntil == rhs.validUntil))
      return false;
    return true;
  }
  bool operator != (const ProductSimple &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductSimple & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProductSimple &a, ProductSimple &b);

std::ostream& operator<<(std::ostream& out, const ProductSimple& obj);

typedef struct _ProductSimpleList__isset {
  _ProductSimpleList__isset() : hasNext(false), reinvokeHour(false), lastVersionSeq(false), productList(false), recentNewReleaseDate(false), recentEventReleaseDate(false) {}
  bool hasNext :1;
  bool reinvokeHour :1;
  bool lastVersionSeq :1;
  bool productList :1;
  bool recentNewReleaseDate :1;
  bool recentEventReleaseDate :1;
} _ProductSimpleList__isset;

class ProductSimpleList : public virtual ::apache::thrift::TBase {
 public:

  ProductSimpleList(const ProductSimpleList&);
  ProductSimpleList& operator=(const ProductSimpleList&);
  ProductSimpleList() : hasNext(0), reinvokeHour(0), lastVersionSeq(0), recentNewReleaseDate(0), recentEventReleaseDate(0) {
  }

  virtual ~ProductSimpleList() noexcept;
  bool hasNext;
  int32_t reinvokeHour;
  int64_t lastVersionSeq;
  std::vector<ProductSimple>  productList;
  int64_t recentNewReleaseDate;
  int64_t recentEventReleaseDate;

  _ProductSimpleList__isset __isset;

  void __set_hasNext(const bool val);

  void __set_reinvokeHour(const int32_t val);

  void __set_lastVersionSeq(const int64_t val);

  void __set_productList(const std::vector<ProductSimple> & val);

  void __set_recentNewReleaseDate(const int64_t val);

  void __set_recentEventReleaseDate(const int64_t val);

  bool operator == (const ProductSimpleList & rhs) const
  {
    if (!(hasNext == rhs.hasNext))
      return false;
    if (!(reinvokeHour == rhs.reinvokeHour))
      return false;
    if (!(lastVersionSeq == rhs.lastVersionSeq))
      return false;
    if (!(productList == rhs.productList))
      return false;
    if (!(recentNewReleaseDate == rhs.recentNewReleaseDate))
      return false;
    if (!(recentEventReleaseDate == rhs.recentEventReleaseDate))
      return false;
    return true;
  }
  bool operator != (const ProductSimpleList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProductSimpleList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProductSimpleList &a, ProductSimpleList &b);

std::ostream& operator<<(std::ostream& out, const ProductSimpleList& obj);

typedef struct _Profile__isset {
  _Profile__isset() : mid(false), userid(false), phone(false), email(false), regionCode(false), displayName(false), phoneticName(false), pictureStatus(false), thumbnailUrl(false), statusMessage(false), allowSearchByUserid(false), allowSearchByEmail(false), picturePath(false) {}
  bool mid :1;
  bool userid :1;
  bool phone :1;
  bool email :1;
  bool regionCode :1;
  bool displayName :1;
  bool phoneticName :1;
  bool pictureStatus :1;
  bool thumbnailUrl :1;
  bool statusMessage :1;
  bool allowSearchByUserid :1;
  bool allowSearchByEmail :1;
  bool picturePath :1;
} _Profile__isset;

class Profile : public virtual ::apache::thrift::TBase {
 public:

  Profile(const Profile&);
  Profile& operator=(const Profile&);
  Profile() : mid(), userid(), phone(), email(), regionCode(), displayName(), phoneticName(), pictureStatus(), thumbnailUrl(), statusMessage(), allowSearchByUserid(0), allowSearchByEmail(0), picturePath() {
  }

  virtual ~Profile() noexcept;
  std::string mid;
  std::string userid;
  std::string phone;
  std::string email;
  std::string regionCode;
  std::string displayName;
  std::string phoneticName;
  std::string pictureStatus;
  std::string thumbnailUrl;
  std::string statusMessage;
  bool allowSearchByUserid;
  bool allowSearchByEmail;
  std::string picturePath;

  _Profile__isset __isset;

  void __set_mid(const std::string& val);

  void __set_userid(const std::string& val);

  void __set_phone(const std::string& val);

  void __set_email(const std::string& val);

  void __set_regionCode(const std::string& val);

  void __set_displayName(const std::string& val);

  void __set_phoneticName(const std::string& val);

  void __set_pictureStatus(const std::string& val);

  void __set_thumbnailUrl(const std::string& val);

  void __set_statusMessage(const std::string& val);

  void __set_allowSearchByUserid(const bool val);

  void __set_allowSearchByEmail(const bool val);

  void __set_picturePath(const std::string& val);

  bool operator == (const Profile & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(userid == rhs.userid))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(regionCode == rhs.regionCode))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(phoneticName == rhs.phoneticName))
      return false;
    if (!(pictureStatus == rhs.pictureStatus))
      return false;
    if (!(thumbnailUrl == rhs.thumbnailUrl))
      return false;
    if (!(statusMessage == rhs.statusMessage))
      return false;
    if (!(allowSearchByUserid == rhs.allowSearchByUserid))
      return false;
    if (!(allowSearchByEmail == rhs.allowSearchByEmail))
      return false;
    if (!(picturePath == rhs.picturePath))
      return false;
    return true;
  }
  bool operator != (const Profile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Profile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Profile &a, Profile &b);

std::ostream& operator<<(std::ostream& out, const Profile& obj);

typedef struct _ProximityMatchCandidateResult__isset {
  _ProximityMatchCandidateResult__isset() : users(false), buddies(false) {}
  bool users :1;
  bool buddies :1;
} _ProximityMatchCandidateResult__isset;

class ProximityMatchCandidateResult : public virtual ::apache::thrift::TBase {
 public:

  ProximityMatchCandidateResult(const ProximityMatchCandidateResult&);
  ProximityMatchCandidateResult& operator=(const ProximityMatchCandidateResult&);
  ProximityMatchCandidateResult() {
  }

  virtual ~ProximityMatchCandidateResult() noexcept;
  std::vector<Contact>  users;
  std::vector<Contact>  buddies;

  _ProximityMatchCandidateResult__isset __isset;

  void __set_users(const std::vector<Contact> & val);

  void __set_buddies(const std::vector<Contact> & val);

  bool operator == (const ProximityMatchCandidateResult & rhs) const
  {
    if (!(users == rhs.users))
      return false;
    if (!(buddies == rhs.buddies))
      return false;
    return true;
  }
  bool operator != (const ProximityMatchCandidateResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProximityMatchCandidateResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ProximityMatchCandidateResult &a, ProximityMatchCandidateResult &b);

std::ostream& operator<<(std::ostream& out, const ProximityMatchCandidateResult& obj);

typedef struct _RegisterWithSnsIdResult__isset {
  _RegisterWithSnsIdResult__isset() : authToken(false), userCreated(false) {}
  bool authToken :1;
  bool userCreated :1;
} _RegisterWithSnsIdResult__isset;

class RegisterWithSnsIdResult : public virtual ::apache::thrift::TBase {
 public:

  RegisterWithSnsIdResult(const RegisterWithSnsIdResult&);
  RegisterWithSnsIdResult& operator=(const RegisterWithSnsIdResult&);
  RegisterWithSnsIdResult() : authToken(), userCreated(0) {
  }

  virtual ~RegisterWithSnsIdResult() noexcept;
  std::string authToken;
  bool userCreated;

  _RegisterWithSnsIdResult__isset __isset;

  void __set_authToken(const std::string& val);

  void __set_userCreated(const bool val);

  bool operator == (const RegisterWithSnsIdResult & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(userCreated == rhs.userCreated))
      return false;
    return true;
  }
  bool operator != (const RegisterWithSnsIdResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterWithSnsIdResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RegisterWithSnsIdResult &a, RegisterWithSnsIdResult &b);

std::ostream& operator<<(std::ostream& out, const RegisterWithSnsIdResult& obj);

typedef struct _RequestTokenResponse__isset {
  _RequestTokenResponse__isset() : requestToken(false), returnUrl(false) {}
  bool requestToken :1;
  bool returnUrl :1;
} _RequestTokenResponse__isset;

class RequestTokenResponse : public virtual ::apache::thrift::TBase {
 public:

  RequestTokenResponse(const RequestTokenResponse&);
  RequestTokenResponse& operator=(const RequestTokenResponse&);
  RequestTokenResponse() : requestToken(), returnUrl() {
  }

  virtual ~RequestTokenResponse() noexcept;
  std::string requestToken;
  std::string returnUrl;

  _RequestTokenResponse__isset __isset;

  void __set_requestToken(const std::string& val);

  void __set_returnUrl(const std::string& val);

  bool operator == (const RequestTokenResponse & rhs) const
  {
    if (!(requestToken == rhs.requestToken))
      return false;
    if (!(returnUrl == rhs.returnUrl))
      return false;
    return true;
  }
  bool operator != (const RequestTokenResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestTokenResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RequestTokenResponse &a, RequestTokenResponse &b);

std::ostream& operator<<(std::ostream& out, const RequestTokenResponse& obj);

typedef struct _Room__isset {
  _Room__isset() : mid(false), createdTime(false), contacts(false), notificationDisabled(false) {}
  bool mid :1;
  bool createdTime :1;
  bool contacts :1;
  bool notificationDisabled :1;
} _Room__isset;

class Room : public virtual ::apache::thrift::TBase {
 public:

  Room(const Room&);
  Room& operator=(const Room&);
  Room() : mid(), createdTime(0), notificationDisabled(0) {
  }

  virtual ~Room() noexcept;
  std::string mid;
  int64_t createdTime;
  std::vector<Contact>  contacts;
  bool notificationDisabled;

  _Room__isset __isset;

  void __set_mid(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_contacts(const std::vector<Contact> & val);

  void __set_notificationDisabled(const bool val);

  bool operator == (const Room & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(createdTime == rhs.createdTime))
      return false;
    if (!(contacts == rhs.contacts))
      return false;
    if (!(notificationDisabled == rhs.notificationDisabled))
      return false;
    return true;
  }
  bool operator != (const Room &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Room & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Room &a, Room &b);

std::ostream& operator<<(std::ostream& out, const Room& obj);

typedef struct _RSAKey__isset {
  _RSAKey__isset() : keynm(false), nvalue(false), evalue(false), sessionKey(false) {}
  bool keynm :1;
  bool nvalue :1;
  bool evalue :1;
  bool sessionKey :1;
} _RSAKey__isset;

class RSAKey : public virtual ::apache::thrift::TBase {
 public:

  RSAKey(const RSAKey&);
  RSAKey& operator=(const RSAKey&);
  RSAKey() : keynm(), nvalue(), evalue(), sessionKey() {
  }

  virtual ~RSAKey() noexcept;
  std::string keynm;
  std::string nvalue;
  std::string evalue;
  std::string sessionKey;

  _RSAKey__isset __isset;

  void __set_keynm(const std::string& val);

  void __set_nvalue(const std::string& val);

  void __set_evalue(const std::string& val);

  void __set_sessionKey(const std::string& val);

  bool operator == (const RSAKey & rhs) const
  {
    if (!(keynm == rhs.keynm))
      return false;
    if (!(nvalue == rhs.nvalue))
      return false;
    if (!(evalue == rhs.evalue))
      return false;
    if (!(sessionKey == rhs.sessionKey))
      return false;
    return true;
  }
  bool operator != (const RSAKey &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RSAKey & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RSAKey &a, RSAKey &b);

std::ostream& operator<<(std::ostream& out, const RSAKey& obj);

typedef struct _SendBuddyMessageResult__isset {
  _SendBuddyMessageResult__isset() : requestId(false), state(false), messageId(false), eventNo(false), receiverCount(false), successCount(false), failCount(false), cancelCount(false), blockCount(false), unregisterCount(false), timestamp(false), message(false) {}
  bool requestId :1;
  bool state :1;
  bool messageId :1;
  bool eventNo :1;
  bool receiverCount :1;
  bool successCount :1;
  bool failCount :1;
  bool cancelCount :1;
  bool blockCount :1;
  bool unregisterCount :1;
  bool timestamp :1;
  bool message :1;
} _SendBuddyMessageResult__isset;

class SendBuddyMessageResult : public virtual ::apache::thrift::TBase {
 public:

  SendBuddyMessageResult(const SendBuddyMessageResult&);
  SendBuddyMessageResult& operator=(const SendBuddyMessageResult&);
  SendBuddyMessageResult() : requestId(), state((BuddyResultState::type)0), messageId(), eventNo(0), receiverCount(0), successCount(0), failCount(0), cancelCount(0), blockCount(0), unregisterCount(0), timestamp(0), message() {
  }

  virtual ~SendBuddyMessageResult() noexcept;
  std::string requestId;
  BuddyResultState::type state;
  std::string messageId;
  int32_t eventNo;
  int64_t receiverCount;
  int64_t successCount;
  int64_t failCount;
  int64_t cancelCount;
  int64_t blockCount;
  int64_t unregisterCount;
  int64_t timestamp;
  std::string message;

  _SendBuddyMessageResult__isset __isset;

  void __set_requestId(const std::string& val);

  void __set_state(const BuddyResultState::type val);

  void __set_messageId(const std::string& val);

  void __set_eventNo(const int32_t val);

  void __set_receiverCount(const int64_t val);

  void __set_successCount(const int64_t val);

  void __set_failCount(const int64_t val);

  void __set_cancelCount(const int64_t val);

  void __set_blockCount(const int64_t val);

  void __set_unregisterCount(const int64_t val);

  void __set_timestamp(const int64_t val);

  void __set_message(const std::string& val);

  bool operator == (const SendBuddyMessageResult & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(eventNo == rhs.eventNo))
      return false;
    if (!(receiverCount == rhs.receiverCount))
      return false;
    if (!(successCount == rhs.successCount))
      return false;
    if (!(failCount == rhs.failCount))
      return false;
    if (!(cancelCount == rhs.cancelCount))
      return false;
    if (!(blockCount == rhs.blockCount))
      return false;
    if (!(unregisterCount == rhs.unregisterCount))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const SendBuddyMessageResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendBuddyMessageResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SendBuddyMessageResult &a, SendBuddyMessageResult &b);

std::ostream& operator<<(std::ostream& out, const SendBuddyMessageResult& obj);

typedef struct _SetBuddyOnAirResult__isset {
  _SetBuddyOnAirResult__isset() : requestId(false), state(false), eventNo(false), receiverCount(false), successCount(false), failCount(false), cancelCount(false), unregisterCount(false), timestamp(false), message(false) {}
  bool requestId :1;
  bool state :1;
  bool eventNo :1;
  bool receiverCount :1;
  bool successCount :1;
  bool failCount :1;
  bool cancelCount :1;
  bool unregisterCount :1;
  bool timestamp :1;
  bool message :1;
} _SetBuddyOnAirResult__isset;

class SetBuddyOnAirResult : public virtual ::apache::thrift::TBase {
 public:

  SetBuddyOnAirResult(const SetBuddyOnAirResult&);
  SetBuddyOnAirResult& operator=(const SetBuddyOnAirResult&);
  SetBuddyOnAirResult() : requestId(), state((BuddyResultState::type)0), eventNo(0), receiverCount(0), successCount(0), failCount(0), cancelCount(0), unregisterCount(0), timestamp(0), message() {
  }

  virtual ~SetBuddyOnAirResult() noexcept;
  std::string requestId;
  BuddyResultState::type state;
  int32_t eventNo;
  int64_t receiverCount;
  int64_t successCount;
  int64_t failCount;
  int64_t cancelCount;
  int64_t unregisterCount;
  int64_t timestamp;
  std::string message;

  _SetBuddyOnAirResult__isset __isset;

  void __set_requestId(const std::string& val);

  void __set_state(const BuddyResultState::type val);

  void __set_eventNo(const int32_t val);

  void __set_receiverCount(const int64_t val);

  void __set_successCount(const int64_t val);

  void __set_failCount(const int64_t val);

  void __set_cancelCount(const int64_t val);

  void __set_unregisterCount(const int64_t val);

  void __set_timestamp(const int64_t val);

  void __set_message(const std::string& val);

  bool operator == (const SetBuddyOnAirResult & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(eventNo == rhs.eventNo))
      return false;
    if (!(receiverCount == rhs.receiverCount))
      return false;
    if (!(successCount == rhs.successCount))
      return false;
    if (!(failCount == rhs.failCount))
      return false;
    if (!(cancelCount == rhs.cancelCount))
      return false;
    if (!(unregisterCount == rhs.unregisterCount))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const SetBuddyOnAirResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetBuddyOnAirResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SetBuddyOnAirResult &a, SetBuddyOnAirResult &b);

std::ostream& operator<<(std::ostream& out, const SetBuddyOnAirResult& obj);

typedef struct _Settings__isset {
  _Settings__isset() : notificationEnable(false), notificationMuteExpiration(false), notificationNewMessage(false), notificationGroupInvitation(false), notificationShowMessage(false), notificationIncomingCall(false), notificationSoundMessage(false), notificationSoundGroup(false), notificationDisabledWithSub(false), privacySyncContacts(false), privacySearchByPhoneNumber(false), privacySearchByUserid(false), privacySearchByEmail(false), privacyAllowSecondaryDeviceLogin(false), privacyProfileImagePostToMyhome(false), privacyReceiveMessagesFromNotFriend(false), contactMyTicket(false), identityProvider(false), identityIdentifier(false), snsAccounts(false), phoneRegistration(false), emailConfirmationStatus(false), preferenceLocale(false), customModes(false) {}
  bool notificationEnable :1;
  bool notificationMuteExpiration :1;
  bool notificationNewMessage :1;
  bool notificationGroupInvitation :1;
  bool notificationShowMessage :1;
  bool notificationIncomingCall :1;
  bool notificationSoundMessage :1;
  bool notificationSoundGroup :1;
  bool notificationDisabledWithSub :1;
  bool privacySyncContacts :1;
  bool privacySearchByPhoneNumber :1;
  bool privacySearchByUserid :1;
  bool privacySearchByEmail :1;
  bool privacyAllowSecondaryDeviceLogin :1;
  bool privacyProfileImagePostToMyhome :1;
  bool privacyReceiveMessagesFromNotFriend :1;
  bool contactMyTicket :1;
  bool identityProvider :1;
  bool identityIdentifier :1;
  bool snsAccounts :1;
  bool phoneRegistration :1;
  bool emailConfirmationStatus :1;
  bool preferenceLocale :1;
  bool customModes :1;
} _Settings__isset;

class Settings : public virtual ::apache::thrift::TBase {
 public:

  Settings(const Settings&);
  Settings& operator=(const Settings&);
  Settings() : notificationEnable(0), notificationMuteExpiration(0), notificationNewMessage(0), notificationGroupInvitation(0), notificationShowMessage(0), notificationIncomingCall(0), notificationSoundMessage(), notificationSoundGroup(), notificationDisabledWithSub(0), privacySyncContacts(0), privacySearchByPhoneNumber(0), privacySearchByUserid(0), privacySearchByEmail(0), privacyAllowSecondaryDeviceLogin(0), privacyProfileImagePostToMyhome(0), privacyReceiveMessagesFromNotFriend(0), contactMyTicket(), identityProvider((IdentityProvider::type)0), identityIdentifier(), phoneRegistration(0), emailConfirmationStatus((EmailConfirmationStatus::type)0), preferenceLocale() {
  }

  virtual ~Settings() noexcept;
  bool notificationEnable;
  int64_t notificationMuteExpiration;
  bool notificationNewMessage;
  bool notificationGroupInvitation;
  bool notificationShowMessage;
  bool notificationIncomingCall;
  std::string notificationSoundMessage;
  std::string notificationSoundGroup;
  bool notificationDisabledWithSub;
  bool privacySyncContacts;
  bool privacySearchByPhoneNumber;
  bool privacySearchByUserid;
  bool privacySearchByEmail;
  bool privacyAllowSecondaryDeviceLogin;
  bool privacyProfileImagePostToMyhome;
  bool privacyReceiveMessagesFromNotFriend;
  std::string contactMyTicket;
  IdentityProvider::type identityProvider;
  std::string identityIdentifier;
  std::map<SnsIdType::type, std::string>  snsAccounts;
  bool phoneRegistration;
  EmailConfirmationStatus::type emailConfirmationStatus;
  std::string preferenceLocale;
  std::map<CustomMode::type, std::string>  customModes;

  _Settings__isset __isset;

  void __set_notificationEnable(const bool val);

  void __set_notificationMuteExpiration(const int64_t val);

  void __set_notificationNewMessage(const bool val);

  void __set_notificationGroupInvitation(const bool val);

  void __set_notificationShowMessage(const bool val);

  void __set_notificationIncomingCall(const bool val);

  void __set_notificationSoundMessage(const std::string& val);

  void __set_notificationSoundGroup(const std::string& val);

  void __set_notificationDisabledWithSub(const bool val);

  void __set_privacySyncContacts(const bool val);

  void __set_privacySearchByPhoneNumber(const bool val);

  void __set_privacySearchByUserid(const bool val);

  void __set_privacySearchByEmail(const bool val);

  void __set_privacyAllowSecondaryDeviceLogin(const bool val);

  void __set_privacyProfileImagePostToMyhome(const bool val);

  void __set_privacyReceiveMessagesFromNotFriend(const bool val);

  void __set_contactMyTicket(const std::string& val);

  void __set_identityProvider(const IdentityProvider::type val);

  void __set_identityIdentifier(const std::string& val);

  void __set_snsAccounts(const std::map<SnsIdType::type, std::string> & val);

  void __set_phoneRegistration(const bool val);

  void __set_emailConfirmationStatus(const EmailConfirmationStatus::type val);

  void __set_preferenceLocale(const std::string& val);

  void __set_customModes(const std::map<CustomMode::type, std::string> & val);

  bool operator == (const Settings & rhs) const
  {
    if (!(notificationEnable == rhs.notificationEnable))
      return false;
    if (!(notificationMuteExpiration == rhs.notificationMuteExpiration))
      return false;
    if (!(notificationNewMessage == rhs.notificationNewMessage))
      return false;
    if (!(notificationGroupInvitation == rhs.notificationGroupInvitation))
      return false;
    if (!(notificationShowMessage == rhs.notificationShowMessage))
      return false;
    if (!(notificationIncomingCall == rhs.notificationIncomingCall))
      return false;
    if (!(notificationSoundMessage == rhs.notificationSoundMessage))
      return false;
    if (!(notificationSoundGroup == rhs.notificationSoundGroup))
      return false;
    if (!(notificationDisabledWithSub == rhs.notificationDisabledWithSub))
      return false;
    if (!(privacySyncContacts == rhs.privacySyncContacts))
      return false;
    if (!(privacySearchByPhoneNumber == rhs.privacySearchByPhoneNumber))
      return false;
    if (!(privacySearchByUserid == rhs.privacySearchByUserid))
      return false;
    if (!(privacySearchByEmail == rhs.privacySearchByEmail))
      return false;
    if (!(privacyAllowSecondaryDeviceLogin == rhs.privacyAllowSecondaryDeviceLogin))
      return false;
    if (!(privacyProfileImagePostToMyhome == rhs.privacyProfileImagePostToMyhome))
      return false;
    if (!(privacyReceiveMessagesFromNotFriend == rhs.privacyReceiveMessagesFromNotFriend))
      return false;
    if (!(contactMyTicket == rhs.contactMyTicket))
      return false;
    if (!(identityProvider == rhs.identityProvider))
      return false;
    if (!(identityIdentifier == rhs.identityIdentifier))
      return false;
    if (!(snsAccounts == rhs.snsAccounts))
      return false;
    if (!(phoneRegistration == rhs.phoneRegistration))
      return false;
    if (!(emailConfirmationStatus == rhs.emailConfirmationStatus))
      return false;
    if (!(preferenceLocale == rhs.preferenceLocale))
      return false;
    if (!(customModes == rhs.customModes))
      return false;
    return true;
  }
  bool operator != (const Settings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Settings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Settings &a, Settings &b);

std::ostream& operator<<(std::ostream& out, const Settings& obj);

typedef struct _SimpleChannelClient__isset {
  _SimpleChannelClient__isset() : applicationType(false), applicationVersion(false), locale(false) {}
  bool applicationType :1;
  bool applicationVersion :1;
  bool locale :1;
} _SimpleChannelClient__isset;

class SimpleChannelClient : public virtual ::apache::thrift::TBase {
 public:

  SimpleChannelClient(const SimpleChannelClient&);
  SimpleChannelClient& operator=(const SimpleChannelClient&);
  SimpleChannelClient() : applicationType(), applicationVersion(), locale() {
  }

  virtual ~SimpleChannelClient() noexcept;
  std::string applicationType;
  std::string applicationVersion;
  std::string locale;

  _SimpleChannelClient__isset __isset;

  void __set_applicationType(const std::string& val);

  void __set_applicationVersion(const std::string& val);

  void __set_locale(const std::string& val);

  bool operator == (const SimpleChannelClient & rhs) const
  {
    if (!(applicationType == rhs.applicationType))
      return false;
    if (!(applicationVersion == rhs.applicationVersion))
      return false;
    if (!(locale == rhs.locale))
      return false;
    return true;
  }
  bool operator != (const SimpleChannelClient &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleChannelClient & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SimpleChannelClient &a, SimpleChannelClient &b);

std::ostream& operator<<(std::ostream& out, const SimpleChannelClient& obj);

typedef struct _SimpleChannelContact__isset {
  _SimpleChannelContact__isset() : mid(false), displayName(false), pictureStatus(false), picturePath(false), statusMessage(false) {}
  bool mid :1;
  bool displayName :1;
  bool pictureStatus :1;
  bool picturePath :1;
  bool statusMessage :1;
} _SimpleChannelContact__isset;

class SimpleChannelContact : public virtual ::apache::thrift::TBase {
 public:

  SimpleChannelContact(const SimpleChannelContact&);
  SimpleChannelContact& operator=(const SimpleChannelContact&);
  SimpleChannelContact() : mid(), displayName(), pictureStatus(), picturePath(), statusMessage() {
  }

  virtual ~SimpleChannelContact() noexcept;
  std::string mid;
  std::string displayName;
  std::string pictureStatus;
  std::string picturePath;
  std::string statusMessage;

  _SimpleChannelContact__isset __isset;

  void __set_mid(const std::string& val);

  void __set_displayName(const std::string& val);

  void __set_pictureStatus(const std::string& val);

  void __set_picturePath(const std::string& val);

  void __set_statusMessage(const std::string& val);

  bool operator == (const SimpleChannelContact & rhs) const
  {
    if (!(mid == rhs.mid))
      return false;
    if (!(displayName == rhs.displayName))
      return false;
    if (!(pictureStatus == rhs.pictureStatus))
      return false;
    if (!(picturePath == rhs.picturePath))
      return false;
    if (!(statusMessage == rhs.statusMessage))
      return false;
    return true;
  }
  bool operator != (const SimpleChannelContact &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleChannelContact & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SimpleChannelContact &a, SimpleChannelContact &b);

std::ostream& operator<<(std::ostream& out, const SimpleChannelContact& obj);

typedef struct _SnsFriend__isset {
  _SnsFriend__isset() : snsUserId(false), snsUserName(false), snsIdType(false) {}
  bool snsUserId :1;
  bool snsUserName :1;
  bool snsIdType :1;
} _SnsFriend__isset;

class SnsFriend : public virtual ::apache::thrift::TBase {
 public:

  SnsFriend(const SnsFriend&);
  SnsFriend& operator=(const SnsFriend&);
  SnsFriend() : snsUserId(), snsUserName(), snsIdType((SnsIdType::type)0) {
  }

  virtual ~SnsFriend() noexcept;
  std::string snsUserId;
  std::string snsUserName;
  SnsIdType::type snsIdType;

  _SnsFriend__isset __isset;

  void __set_snsUserId(const std::string& val);

  void __set_snsUserName(const std::string& val);

  void __set_snsIdType(const SnsIdType::type val);

  bool operator == (const SnsFriend & rhs) const
  {
    if (!(snsUserId == rhs.snsUserId))
      return false;
    if (!(snsUserName == rhs.snsUserName))
      return false;
    if (!(snsIdType == rhs.snsIdType))
      return false;
    return true;
  }
  bool operator != (const SnsFriend &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsFriend & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnsFriend &a, SnsFriend &b);

std::ostream& operator<<(std::ostream& out, const SnsFriend& obj);

typedef struct _SnsFriendContactRegistration__isset {
  _SnsFriendContactRegistration__isset() : contact(false), snsIdType(false), snsUserId(false) {}
  bool contact :1;
  bool snsIdType :1;
  bool snsUserId :1;
} _SnsFriendContactRegistration__isset;

class SnsFriendContactRegistration : public virtual ::apache::thrift::TBase {
 public:

  SnsFriendContactRegistration(const SnsFriendContactRegistration&);
  SnsFriendContactRegistration& operator=(const SnsFriendContactRegistration&);
  SnsFriendContactRegistration() : snsIdType((SnsIdType::type)0), snsUserId() {
  }

  virtual ~SnsFriendContactRegistration() noexcept;
  Contact contact;
  SnsIdType::type snsIdType;
  std::string snsUserId;

  _SnsFriendContactRegistration__isset __isset;

  void __set_contact(const Contact& val);

  void __set_snsIdType(const SnsIdType::type val);

  void __set_snsUserId(const std::string& val);

  bool operator == (const SnsFriendContactRegistration & rhs) const
  {
    if (!(contact == rhs.contact))
      return false;
    if (!(snsIdType == rhs.snsIdType))
      return false;
    if (!(snsUserId == rhs.snsUserId))
      return false;
    return true;
  }
  bool operator != (const SnsFriendContactRegistration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsFriendContactRegistration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnsFriendContactRegistration &a, SnsFriendContactRegistration &b);

std::ostream& operator<<(std::ostream& out, const SnsFriendContactRegistration& obj);

typedef struct _SnsFriendModification__isset {
  _SnsFriendModification__isset() : type(false), snsFriend(false) {}
  bool type :1;
  bool snsFriend :1;
} _SnsFriendModification__isset;

class SnsFriendModification : public virtual ::apache::thrift::TBase {
 public:

  SnsFriendModification(const SnsFriendModification&);
  SnsFriendModification& operator=(const SnsFriendModification&);
  SnsFriendModification() : type((ModificationType::type)0) {
  }

  virtual ~SnsFriendModification() noexcept;
  ModificationType::type type;
  SnsFriend snsFriend;

  _SnsFriendModification__isset __isset;

  void __set_type(const ModificationType::type val);

  void __set_snsFriend(const SnsFriend& val);

  bool operator == (const SnsFriendModification & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(snsFriend == rhs.snsFriend))
      return false;
    return true;
  }
  bool operator != (const SnsFriendModification &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsFriendModification & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnsFriendModification &a, SnsFriendModification &b);

std::ostream& operator<<(std::ostream& out, const SnsFriendModification& obj);

typedef struct _SnsFriends__isset {
  _SnsFriends__isset() : snsFriends(false), hasMore(false) {}
  bool snsFriends :1;
  bool hasMore :1;
} _SnsFriends__isset;

class SnsFriends : public virtual ::apache::thrift::TBase {
 public:

  SnsFriends(const SnsFriends&);
  SnsFriends& operator=(const SnsFriends&);
  SnsFriends() : hasMore(0) {
  }

  virtual ~SnsFriends() noexcept;
  std::vector<SnsFriend>  snsFriends;
  bool hasMore;

  _SnsFriends__isset __isset;

  void __set_snsFriends(const std::vector<SnsFriend> & val);

  void __set_hasMore(const bool val);

  bool operator == (const SnsFriends & rhs) const
  {
    if (!(snsFriends == rhs.snsFriends))
      return false;
    if (!(hasMore == rhs.hasMore))
      return false;
    return true;
  }
  bool operator != (const SnsFriends &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsFriends & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnsFriends &a, SnsFriends &b);

std::ostream& operator<<(std::ostream& out, const SnsFriends& obj);

typedef struct _SnsIdUserStatus__isset {
  _SnsIdUserStatus__isset() : userExisting(false), phoneNumberRegistered(false), sameDevice(false) {}
  bool userExisting :1;
  bool phoneNumberRegistered :1;
  bool sameDevice :1;
} _SnsIdUserStatus__isset;

class SnsIdUserStatus : public virtual ::apache::thrift::TBase {
 public:

  SnsIdUserStatus(const SnsIdUserStatus&);
  SnsIdUserStatus& operator=(const SnsIdUserStatus&);
  SnsIdUserStatus() : userExisting(0), phoneNumberRegistered(0), sameDevice(0) {
  }

  virtual ~SnsIdUserStatus() noexcept;
  bool userExisting;
  bool phoneNumberRegistered;
  bool sameDevice;

  _SnsIdUserStatus__isset __isset;

  void __set_userExisting(const bool val);

  void __set_phoneNumberRegistered(const bool val);

  void __set_sameDevice(const bool val);

  bool operator == (const SnsIdUserStatus & rhs) const
  {
    if (!(userExisting == rhs.userExisting))
      return false;
    if (!(phoneNumberRegistered == rhs.phoneNumberRegistered))
      return false;
    if (!(sameDevice == rhs.sameDevice))
      return false;
    return true;
  }
  bool operator != (const SnsIdUserStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsIdUserStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnsIdUserStatus &a, SnsIdUserStatus &b);

std::ostream& operator<<(std::ostream& out, const SnsIdUserStatus& obj);

typedef struct _SnsProfile__isset {
  _SnsProfile__isset() : snsUserId(false), snsUserName(false), email(false), thumbnailUrl(false) {}
  bool snsUserId :1;
  bool snsUserName :1;
  bool email :1;
  bool thumbnailUrl :1;
} _SnsProfile__isset;

class SnsProfile : public virtual ::apache::thrift::TBase {
 public:

  SnsProfile(const SnsProfile&);
  SnsProfile& operator=(const SnsProfile&);
  SnsProfile() : snsUserId(), snsUserName(), email(), thumbnailUrl() {
  }

  virtual ~SnsProfile() noexcept;
  std::string snsUserId;
  std::string snsUserName;
  std::string email;
  std::string thumbnailUrl;

  _SnsProfile__isset __isset;

  void __set_snsUserId(const std::string& val);

  void __set_snsUserName(const std::string& val);

  void __set_email(const std::string& val);

  void __set_thumbnailUrl(const std::string& val);

  bool operator == (const SnsProfile & rhs) const
  {
    if (!(snsUserId == rhs.snsUserId))
      return false;
    if (!(snsUserName == rhs.snsUserName))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(thumbnailUrl == rhs.thumbnailUrl))
      return false;
    return true;
  }
  bool operator != (const SnsProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnsProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SnsProfile &a, SnsProfile &b);

std::ostream& operator<<(std::ostream& out, const SnsProfile& obj);

typedef struct _SystemConfiguration__isset {
  _SystemConfiguration__isset() : endpoint(false), endpointSsl(false), updateUrl(false), c2dmAccount(false), nniServer(false) {}
  bool endpoint :1;
  bool endpointSsl :1;
  bool updateUrl :1;
  bool c2dmAccount :1;
  bool nniServer :1;
} _SystemConfiguration__isset;

class SystemConfiguration : public virtual ::apache::thrift::TBase {
 public:

  SystemConfiguration(const SystemConfiguration&);
  SystemConfiguration& operator=(const SystemConfiguration&);
  SystemConfiguration() : endpoint(), endpointSsl(), updateUrl(), c2dmAccount(), nniServer() {
  }

  virtual ~SystemConfiguration() noexcept;
  std::string endpoint;
  std::string endpointSsl;
  std::string updateUrl;
  std::string c2dmAccount;
  std::string nniServer;

  _SystemConfiguration__isset __isset;

  void __set_endpoint(const std::string& val);

  void __set_endpointSsl(const std::string& val);

  void __set_updateUrl(const std::string& val);

  void __set_c2dmAccount(const std::string& val);

  void __set_nniServer(const std::string& val);

  bool operator == (const SystemConfiguration & rhs) const
  {
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(endpointSsl == rhs.endpointSsl))
      return false;
    if (!(updateUrl == rhs.updateUrl))
      return false;
    if (!(c2dmAccount == rhs.c2dmAccount))
      return false;
    if (!(nniServer == rhs.nniServer))
      return false;
    return true;
  }
  bool operator != (const SystemConfiguration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SystemConfiguration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SystemConfiguration &a, SystemConfiguration &b);

std::ostream& operator<<(std::ostream& out, const SystemConfiguration& obj);

typedef struct _TalkException__isset {
  _TalkException__isset() : code(false), reason(false), parameterMap(false) {}
  bool code :1;
  bool reason :1;
  bool parameterMap :1;
} _TalkException__isset;

class TalkException : public ::apache::thrift::TException {
 public:

  TalkException(const TalkException&);
  TalkException& operator=(const TalkException&);
  TalkException() : code((ErrorCode::type)0), reason() {
  }

  virtual ~TalkException() noexcept;
  ErrorCode::type code;
  std::string reason;
  std::map<std::string, std::string>  parameterMap;

  _TalkException__isset __isset;

  void __set_code(const ErrorCode::type val);

  void __set_reason(const std::string& val);

  void __set_parameterMap(const std::map<std::string, std::string> & val);

  bool operator == (const TalkException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(reason == rhs.reason))
      return false;
    if (!(parameterMap == rhs.parameterMap))
      return false;
    return true;
  }
  bool operator != (const TalkException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(TalkException &a, TalkException &b);

std::ostream& operator<<(std::ostream& out, const TalkException& obj);

typedef struct _Ticket__isset {
  _Ticket__isset() : id(false), expirationTime(false), maxUseCount(false) {}
  bool id :1;
  bool expirationTime :1;
  bool maxUseCount :1;
} _Ticket__isset;

class Ticket : public virtual ::apache::thrift::TBase {
 public:

  Ticket(const Ticket&);
  Ticket& operator=(const Ticket&);
  Ticket() : id(), expirationTime(0), maxUseCount(0) {
  }

  virtual ~Ticket() noexcept;
  std::string id;
  int64_t expirationTime;
  int32_t maxUseCount;

  _Ticket__isset __isset;

  void __set_id(const std::string& val);

  void __set_expirationTime(const int64_t val);

  void __set_maxUseCount(const int32_t val);

  bool operator == (const Ticket & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(expirationTime == rhs.expirationTime))
      return false;
    if (!(maxUseCount == rhs.maxUseCount))
      return false;
    return true;
  }
  bool operator != (const Ticket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ticket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Ticket &a, Ticket &b);

std::ostream& operator<<(std::ostream& out, const Ticket& obj);

typedef struct _TMessageBox__isset {
  _TMessageBox__isset() : id(false), channelId(false), lastSeq(false), unreadCount(false), lastModifiedTime(false), status(false), midType(false), lastMessages(false) {}
  bool id :1;
  bool channelId :1;
  bool lastSeq :1;
  bool unreadCount :1;
  bool lastModifiedTime :1;
  bool status :1;
  bool midType :1;
  bool lastMessages :1;
} _TMessageBox__isset;

class TMessageBox : public virtual ::apache::thrift::TBase {
 public:

  TMessageBox(const TMessageBox&);
  TMessageBox& operator=(const TMessageBox&);
  TMessageBox() : id(), channelId(), lastSeq(0), unreadCount(0), lastModifiedTime(0), status(0), midType((MIDType::type)0) {
  }

  virtual ~TMessageBox() noexcept;
  std::string id;
  std::string channelId;
  int64_t lastSeq;
  int64_t unreadCount;
  int64_t lastModifiedTime;
  int32_t status;
  MIDType::type midType;
  std::vector<Message>  lastMessages;

  _TMessageBox__isset __isset;

  void __set_id(const std::string& val);

  void __set_channelId(const std::string& val);

  void __set_lastSeq(const int64_t val);

  void __set_unreadCount(const int64_t val);

  void __set_lastModifiedTime(const int64_t val);

  void __set_status(const int32_t val);

  void __set_midType(const MIDType::type val);

  void __set_lastMessages(const std::vector<Message> & val);

  bool operator == (const TMessageBox & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(channelId == rhs.channelId))
      return false;
    if (!(lastSeq == rhs.lastSeq))
      return false;
    if (!(unreadCount == rhs.unreadCount))
      return false;
    if (!(lastModifiedTime == rhs.lastModifiedTime))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(midType == rhs.midType))
      return false;
    if (!(lastMessages == rhs.lastMessages))
      return false;
    return true;
  }
  bool operator != (const TMessageBox &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMessageBox & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMessageBox &a, TMessageBox &b);

std::ostream& operator<<(std::ostream& out, const TMessageBox& obj);

typedef struct _TMessageBoxWrapUp__isset {
  _TMessageBoxWrapUp__isset() : messageBox(false), name(false), contacts(false), pictureRevision(false) {}
  bool messageBox :1;
  bool name :1;
  bool contacts :1;
  bool pictureRevision :1;
} _TMessageBoxWrapUp__isset;

class TMessageBoxWrapUp : public virtual ::apache::thrift::TBase {
 public:

  TMessageBoxWrapUp(const TMessageBoxWrapUp&);
  TMessageBoxWrapUp& operator=(const TMessageBoxWrapUp&);
  TMessageBoxWrapUp() : name(), pictureRevision() {
  }

  virtual ~TMessageBoxWrapUp() noexcept;
  TMessageBox messageBox;
  std::string name;
  std::vector<Contact>  contacts;
  std::string pictureRevision;

  _TMessageBoxWrapUp__isset __isset;

  void __set_messageBox(const TMessageBox& val);

  void __set_name(const std::string& val);

  void __set_contacts(const std::vector<Contact> & val);

  void __set_pictureRevision(const std::string& val);

  bool operator == (const TMessageBoxWrapUp & rhs) const
  {
    if (!(messageBox == rhs.messageBox))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(contacts == rhs.contacts))
      return false;
    if (!(pictureRevision == rhs.pictureRevision))
      return false;
    return true;
  }
  bool operator != (const TMessageBoxWrapUp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMessageBoxWrapUp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMessageBoxWrapUp &a, TMessageBoxWrapUp &b);

std::ostream& operator<<(std::ostream& out, const TMessageBoxWrapUp& obj);

typedef struct _TMessageBoxWrapUpResponse__isset {
  _TMessageBoxWrapUpResponse__isset() : messageBoxWrapUpList(false), totalSize(false) {}
  bool messageBoxWrapUpList :1;
  bool totalSize :1;
} _TMessageBoxWrapUpResponse__isset;

class TMessageBoxWrapUpResponse : public virtual ::apache::thrift::TBase {
 public:

  TMessageBoxWrapUpResponse(const TMessageBoxWrapUpResponse&);
  TMessageBoxWrapUpResponse& operator=(const TMessageBoxWrapUpResponse&);
  TMessageBoxWrapUpResponse() : totalSize(0) {
  }

  virtual ~TMessageBoxWrapUpResponse() noexcept;
  std::vector<TMessageBoxWrapUp>  messageBoxWrapUpList;
  int32_t totalSize;

  _TMessageBoxWrapUpResponse__isset __isset;

  void __set_messageBoxWrapUpList(const std::vector<TMessageBoxWrapUp> & val);

  void __set_totalSize(const int32_t val);

  bool operator == (const TMessageBoxWrapUpResponse & rhs) const
  {
    if (!(messageBoxWrapUpList == rhs.messageBoxWrapUpList))
      return false;
    if (!(totalSize == rhs.totalSize))
      return false;
    return true;
  }
  bool operator != (const TMessageBoxWrapUpResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMessageBoxWrapUpResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMessageBoxWrapUpResponse &a, TMessageBoxWrapUpResponse &b);

std::ostream& operator<<(std::ostream& out, const TMessageBoxWrapUpResponse& obj);

typedef struct _UniversalNotificationServiceException__isset {
  _UniversalNotificationServiceException__isset() : code(false), reason(false), parameterMap(false) {}
  bool code :1;
  bool reason :1;
  bool parameterMap :1;
} _UniversalNotificationServiceException__isset;

class UniversalNotificationServiceException : public ::apache::thrift::TException {
 public:

  UniversalNotificationServiceException(const UniversalNotificationServiceException&);
  UniversalNotificationServiceException& operator=(const UniversalNotificationServiceException&);
  UniversalNotificationServiceException() : code((UniversalNotificationServiceErrorCode::type)0), reason() {
  }

  virtual ~UniversalNotificationServiceException() noexcept;
  UniversalNotificationServiceErrorCode::type code;
  std::string reason;
  std::map<std::string, std::string>  parameterMap;

  _UniversalNotificationServiceException__isset __isset;

  void __set_code(const UniversalNotificationServiceErrorCode::type val);

  void __set_reason(const std::string& val);

  void __set_parameterMap(const std::map<std::string, std::string> & val);

  bool operator == (const UniversalNotificationServiceException & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(reason == rhs.reason))
      return false;
    if (!(parameterMap == rhs.parameterMap))
      return false;
    return true;
  }
  bool operator != (const UniversalNotificationServiceException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UniversalNotificationServiceException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(UniversalNotificationServiceException &a, UniversalNotificationServiceException &b);

std::ostream& operator<<(std::ostream& out, const UniversalNotificationServiceException& obj);

typedef struct _UpdateBuddyProfileResult__isset {
  _UpdateBuddyProfileResult__isset() : requestId(false), state(false), eventNo(false), receiverCount(false), successCount(false), failCount(false), cancelCount(false), unregisterCount(false), timestamp(false), message(false) {}
  bool requestId :1;
  bool state :1;
  bool eventNo :1;
  bool receiverCount :1;
  bool successCount :1;
  bool failCount :1;
  bool cancelCount :1;
  bool unregisterCount :1;
  bool timestamp :1;
  bool message :1;
} _UpdateBuddyProfileResult__isset;

class UpdateBuddyProfileResult : public virtual ::apache::thrift::TBase {
 public:

  UpdateBuddyProfileResult(const UpdateBuddyProfileResult&);
  UpdateBuddyProfileResult& operator=(const UpdateBuddyProfileResult&);
  UpdateBuddyProfileResult() : requestId(), state((BuddyResultState::type)0), eventNo(0), receiverCount(0), successCount(0), failCount(0), cancelCount(0), unregisterCount(0), timestamp(0), message() {
  }

  virtual ~UpdateBuddyProfileResult() noexcept;
  std::string requestId;
  BuddyResultState::type state;
  int32_t eventNo;
  int64_t receiverCount;
  int64_t successCount;
  int64_t failCount;
  int64_t cancelCount;
  int64_t unregisterCount;
  int64_t timestamp;
  std::string message;

  _UpdateBuddyProfileResult__isset __isset;

  void __set_requestId(const std::string& val);

  void __set_state(const BuddyResultState::type val);

  void __set_eventNo(const int32_t val);

  void __set_receiverCount(const int64_t val);

  void __set_successCount(const int64_t val);

  void __set_failCount(const int64_t val);

  void __set_cancelCount(const int64_t val);

  void __set_unregisterCount(const int64_t val);

  void __set_timestamp(const int64_t val);

  void __set_message(const std::string& val);

  bool operator == (const UpdateBuddyProfileResult & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(eventNo == rhs.eventNo))
      return false;
    if (!(receiverCount == rhs.receiverCount))
      return false;
    if (!(successCount == rhs.successCount))
      return false;
    if (!(failCount == rhs.failCount))
      return false;
    if (!(cancelCount == rhs.cancelCount))
      return false;
    if (!(unregisterCount == rhs.unregisterCount))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const UpdateBuddyProfileResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateBuddyProfileResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateBuddyProfileResult &a, UpdateBuddyProfileResult &b);

std::ostream& operator<<(std::ostream& out, const UpdateBuddyProfileResult& obj);

typedef struct _UserAuthStatus__isset {
  _UserAuthStatus__isset() : phoneNumberRegistered(false), registeredSnsIdTypes(false) {}
  bool phoneNumberRegistered :1;
  bool registeredSnsIdTypes :1;
} _UserAuthStatus__isset;

class UserAuthStatus : public virtual ::apache::thrift::TBase {
 public:

  UserAuthStatus(const UserAuthStatus&);
  UserAuthStatus& operator=(const UserAuthStatus&);
  UserAuthStatus() : phoneNumberRegistered(0) {
  }

  virtual ~UserAuthStatus() noexcept;
  bool phoneNumberRegistered;
  std::vector<SnsIdType::type>  registeredSnsIdTypes;

  _UserAuthStatus__isset __isset;

  void __set_phoneNumberRegistered(const bool val);

  void __set_registeredSnsIdTypes(const std::vector<SnsIdType::type> & val);

  bool operator == (const UserAuthStatus & rhs) const
  {
    if (!(phoneNumberRegistered == rhs.phoneNumberRegistered))
      return false;
    if (!(registeredSnsIdTypes == rhs.registeredSnsIdTypes))
      return false;
    return true;
  }
  bool operator != (const UserAuthStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserAuthStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserAuthStatus &a, UserAuthStatus &b);

std::ostream& operator<<(std::ostream& out, const UserAuthStatus& obj);

typedef struct _VerificationSessionData__isset {
  _VerificationSessionData__isset() : sessionId(false), method(false), callback(false), normalizedPhone(false), countryCode(false), nationalSignificantNumber(false), availableVerificationMethods(false) {}
  bool sessionId :1;
  bool method :1;
  bool callback :1;
  bool normalizedPhone :1;
  bool countryCode :1;
  bool nationalSignificantNumber :1;
  bool availableVerificationMethods :1;
} _VerificationSessionData__isset;

class VerificationSessionData : public virtual ::apache::thrift::TBase {
 public:

  VerificationSessionData(const VerificationSessionData&);
  VerificationSessionData& operator=(const VerificationSessionData&);
  VerificationSessionData() : sessionId(), method((VerificationMethod::type)0), callback(), normalizedPhone(), countryCode(), nationalSignificantNumber() {
  }

  virtual ~VerificationSessionData() noexcept;
  std::string sessionId;
  VerificationMethod::type method;
  std::string callback;
  std::string normalizedPhone;
  std::string countryCode;
  std::string nationalSignificantNumber;
  std::vector<VerificationMethod::type>  availableVerificationMethods;

  _VerificationSessionData__isset __isset;

  void __set_sessionId(const std::string& val);

  void __set_method(const VerificationMethod::type val);

  void __set_callback(const std::string& val);

  void __set_normalizedPhone(const std::string& val);

  void __set_countryCode(const std::string& val);

  void __set_nationalSignificantNumber(const std::string& val);

  void __set_availableVerificationMethods(const std::vector<VerificationMethod::type> & val);

  bool operator == (const VerificationSessionData & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(method == rhs.method))
      return false;
    if (!(callback == rhs.callback))
      return false;
    if (!(normalizedPhone == rhs.normalizedPhone))
      return false;
    if (!(countryCode == rhs.countryCode))
      return false;
    if (!(nationalSignificantNumber == rhs.nationalSignificantNumber))
      return false;
    if (!(availableVerificationMethods == rhs.availableVerificationMethods))
      return false;
    return true;
  }
  bool operator != (const VerificationSessionData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VerificationSessionData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VerificationSessionData &a, VerificationSessionData &b);

std::ostream& operator<<(std::ostream& out, const VerificationSessionData& obj);

typedef struct _WapInvitation__isset {
  _WapInvitation__isset() : type(false), inviteeEmail(false), inviterMid(false), roomMid(false) {}
  bool type :1;
  bool inviteeEmail :1;
  bool inviterMid :1;
  bool roomMid :1;
} _WapInvitation__isset;

class WapInvitation : public virtual ::apache::thrift::TBase {
 public:

  WapInvitation(const WapInvitation&);
  WapInvitation& operator=(const WapInvitation&);
  WapInvitation() : type((WapInvitationType::type)0), inviteeEmail(), inviterMid(), roomMid() {
  }

  virtual ~WapInvitation() noexcept;
  WapInvitationType::type type;
  std::string inviteeEmail;
  std::string inviterMid;
  std::string roomMid;

  _WapInvitation__isset __isset;

  void __set_type(const WapInvitationType::type val);

  void __set_inviteeEmail(const std::string& val);

  void __set_inviterMid(const std::string& val);

  void __set_roomMid(const std::string& val);

  bool operator == (const WapInvitation & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(inviteeEmail == rhs.inviteeEmail))
      return false;
    if (!(inviterMid == rhs.inviterMid))
      return false;
    if (!(roomMid == rhs.roomMid))
      return false;
    return true;
  }
  bool operator != (const WapInvitation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WapInvitation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WapInvitation &a, WapInvitation &b);

std::ostream& operator<<(std::ostream& out, const WapInvitation& obj);



#endif
